"def _get_ca_value ( ca_revision_dict ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> ca_val_dict = ca_revision_dict . get ( <STRING> ) <NEWLINE> if not ca_val_dict : <NEWLINE> <INDENT> raise ValueError ( <STRING> <NEWLINE> <INDENT> <STRING> . format ( ca_revision_dict ) ) <NEWLINE> <DEDENT> <DEDENT> if not ca_val_dict . get ( <STRING> ) : <NEWLINE> <INDENT> raise ValueError ( <STRING> <NEWLINE> <INDENT> . format ( ca_val_dict ) <NEWLINE> <DEDENT> <DEDENT> return ca_val_dict <NEWLINE> <DEDENT>
"	"def _get_ca_value ( ca_revision_dict ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> ca_val_dict = ca_revision_dict . get ( <STRING> ) <NEWLINE> if not ca_val_dict : <NEWLINE> <INDENT> raise ValueError ( <STRING> <NEWLINE> <INDENT> <STRING> <NEWLINE> . format ( ca_revision_dict ) ) <NEWLINE> <DEDENT> <DEDENT> if not ca_val_dict . get ( <STRING> ) : <NEWLINE> <INDENT> raise ValueError ( <STRING> <NEWLINE> <INDENT> . format ( ca_val_dict ) ) <NEWLINE> <DEDENT> <DEDENT> return ca_val_dict <NEWLINE> <DEDENT>
"
"def extension_preferred ( af ) : <NEWLINE> comp = al . extension_complete ( af ) <NEWLINE> pref = [ ] <NEWLINE> for c in comp : <NEWLINE> subset = False <NEWLINE> for d in comp : <NEWLINE> <INDENT> if c < d : <NEWLINE> <INDENT> subset = True <NEWLINE> <DEDENT> <DEDENT> if not subset : <NEWLINE> <INDENT> pref . append ( c ) <NEWLINE> <DEDENT> <DEDENT> return pref <NEWLINE> <DEDENT>
"	"def extension_preferred ( af ) : <NEWLINE> <INDENT> comp = al . extension_complete ( af ) <NEWLINE> pref = [ ] <NEWLINE> for c in comp : <NEWLINE> <INDENT> subset = False <NEWLINE> for d in comp : <NEWLINE> <INDENT> if c < d : <NEWLINE> <INDENT> subset = True <NEWLINE> <DEDENT> <DEDENT> if not subset : <NEWLINE> <INDENT> pref . append ( c ) <NEWLINE> <DEDENT> <DEDENT> return pref <NEWLINE> <DEDENT>
"
"from django . core import management <NEWLINE> if __name__ == <STRING> : <NEWLINE> management . execute_from_command_line ( ) <DEDENT>
"	"from django . core import management <NEWLINE> if __name__ == <STRING> : <NEWLINE> <INDENT> management . execute_from_command_line ( ) <NEWLINE> <DEDENT>
"
"class SampleItem ( QObject ) : <NEWLINE> <INDENT> def __init__ ( self , foo = None , parent = None ) : <NEWLINE> <INDENT> super ( ) . __init__ ( parent ) <NEWLINE> self . foo = foo <NEWLINE> <DEDENT> def __str__ ( self ) : <NEWLINE> <INDENT> return self . __dict__ . __str__ ( ) <NEWLINE> <DEDENT> <DEDENT>
"	"class SampleItem ( QObject ) : <NEWLINE> <INDENT> def __init__ ( self , foo = None , parent = None ) : <NEWLINE> <INDENT> super ( ) . __init__ ( parent ) <NEWLINE> self . foo = foo <NEWLINE> <DEDENT> def __str__ ( self ) : <NEWLINE> <INDENT> return self . __dict__ . __str__ ( ) <NEWLINE> <DEDENT> <DEDENT>
"
"class ManageResourceTypeAssociations ( tables . LinkAction ) , : <NEWLINE> <INDENT> name = <STRING> <NEWLINE> verbose_name = _ ( <STRING> ) <NEWLINE> url = constants . METADATA_MANAGE_RESOURCES_URL <NEWLINE> classes = ( <STRING> , ) <NEWLINE> icon = <STRING> <NEWLINE> policy_rules = ( ( <STRING> , <STRING> ) , <NEWLINE> <INDENT> ( <STRING> , <STRING> ) ) <NEWLINE> <DEDENT> def allowed ( self , request , namespace = None ) : <NEWLINE> <INDENT> if namespace and , namespace . protected : <NEWLINE> <INDENT> return False <NEWLINE> <DEDENT> return True <NEWLINE> <DEDENT> <DEDENT>
"	"class ManageResourceTypeAssociations ( tables . LinkAction ) : <NEWLINE> <INDENT> name = <STRING> <NEWLINE> verbose_name = _ ( <STRING> ) <NEWLINE> url = constants . METADATA_MANAGE_RESOURCES_URL <NEWLINE> classes = ( <STRING> , ) <NEWLINE> icon = <STRING> <NEWLINE> policy_rules = ( ( <STRING> , <STRING> ) , <NEWLINE> <INDENT> ( <STRING> , <STRING> ) ) <NEWLINE> <DEDENT> def allowed ( self , request , namespace = None ) : <NEWLINE> <INDENT> if namespace and namespace . protected : <NEWLINE> <INDENT> return False <NEWLINE> <DEDENT> return True <NEWLINE> <DEDENT> <DEDENT>
"
"def test_wrapper ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> client = mock . MagicMock ( ) <NEWLINE> downloader = mock . MagicMock ( ) <NEWLINE> f = lambda host , path , query : True <NEWLINE> cache = RedisCache ( client , downloader ) <NEWLINE> fc = cache ( f ) <NEWLINE> self . assertEqual ( f , fc . __wrapped__ ) <NEWLINE> <DEDENT>
"	"def test_wrapper ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> client = mock . MagicMock ( ) <NEWLINE> downloader = mock . MagicMock ( ) <NEWLINE> f = lambda host , path , query : True <NEWLINE> cache = RedisCache ( client , downloader ) <NEWLINE> fc = cache ( f ) <NEWLINE> self . assertEqual ( f , fc . __wrapped__ ) <NEWLINE> <DEDENT>
"
"] from random import uniform <NEWLINE> from fixed_point import fixbv , W <NEWLINE> import myhdl <NEWLINE> from myhdl import bin <NEWLINE>
"	"from random import uniform <NEWLINE> from fixed_point import fixbv , W <NEWLINE> import myhdl <NEWLINE> from myhdl import bin <NEWLINE>
"
"from flask import render_template , jsonify , Blueprint , redirect , url_for , request <NEWLINE> from sqlalchemy . sql . expression import union_all <NEWLINE> from CTFd . models import db , Teams , Solves , Awards Challenges <NEWLINE> from CTFd import utils <NEWLINE> scoreboard = Blueprint ( <STRING> __name__ ) <NEWLINE>
"	"from flask import render_template , jsonify , Blueprint , redirect , url_for , request <NEWLINE> from sqlalchemy . sql . expression import union_all <NEWLINE> from CTFd . models import db , Teams , Solves , Awards , Challenges <NEWLINE> from CTFd import utils <NEWLINE> scoreboard = Blueprint ( <STRING> , __name__ ) <NEWLINE>
"
"class SiteRelated ( models . Model ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> objects = CurrentSiteManager ( ) <NEWLINE> class Meta : <NEWLINE> <INDENT> abstract = True <NEWLINE> <DEDENT> site = models . ForeignKey ( <STRING> , editable = False ) <NEWLINE> def save ( self , update_site = False , * args , ** kwargs ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> if update_site or not self . id : <NEWLINE> <INDENT> self . site_id = current_site_id ( ) <NEWLINE> <DEDENT> super ( SiteRelated , self ) . save ( * args , ** kwargs ) <NEWLINE> <DEDENT> <DEDENT>
"	"class SiteRelated ( models . Model ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> objects = CurrentSiteManager ( ) <NEWLINE> class Meta : <NEWLINE> <INDENT> abstract = True <NEWLINE> <DEDENT> site = models . ForeignKey ( <STRING> , editable = False ) <NEWLINE> def save ( self , update_site = False , * args , ** kwargs ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> if update_site or not self . id : <NEWLINE> <INDENT> self . site_id = current_site_id ( ) <NEWLINE> <DEDENT> super ( SiteRelated , self ) . save ( * args , ** kwargs ) <NEWLINE> <DEDENT> <DEDENT>
"
"def P1A_to_HSV ( cin , vmin = None , vmax = None ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> h = .5 * np . angle , ( cin ) / np . pi + .5 <NEWLINE> s = np . ones ( cin . shape ) <NEWLINE> v = abs ( cin ) <NEWLINE> if vmin is None : vmin = 0. <NEWLINE> if vmax is None : vmax = v . max ( ) <NEWLINE> assert vmin < vmax <NEWLINE> v = ( v . clip ( vmin , vmax ) - vmin ) / ( vmax - vmin ) <NEWLINE> return HSV_to_RGB ] ( ( h , s , v ) ) <NEWLINE> <DEDENT>
"	"def P1A_to_HSV ( cin , vmin = None , vmax = None ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> h = .5 * np . angle ( cin ) / np . pi + .5 <NEWLINE> s = np . ones ( cin . shape ) <NEWLINE> v = abs ( cin ) <NEWLINE> if vmin is None : vmin = 0. <NEWLINE> if vmax is None : vmax = v . max ( ) <NEWLINE> assert vmin < vmax <NEWLINE> v = ( v . clip ( vmin , vmax ) - vmin ) / ( vmax - vmin ) <NEWLINE> return HSV_to_RGB ( ( h , s , v ) ) <NEWLINE> <DEDENT>
"
"def _on_autoplay_changed ( self , button ) : <NEWLINE> <INDENT> config . autoplay = button . get_active ( , ) <NEWLINE> self . _changed = True <NEWLINE> <DEDENT>
"	"def _on_autoplay_changed ( self , button ) : <NEWLINE> <INDENT> config . autoplay = button . get_active ( ) <NEWLINE> self . _changed = True <NEWLINE> <DEDENT>
"
"def func_of_data self , xlabel , ylabel , ** kwargs ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> if self . data [ xlabel ] [ 0 ] > np . array ( self . data [ xlabel ] ) [ - 1 : <NEWLINE> <INDENT> y = self . data [ ylabel ] [ : : - 1 ] <NEWLINE> x = self . data [ xlabel ] [ : : - 1 ] <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> y = self . data [ ylabel ] <NEWLINE> x = self . data [ xlabel ] <NEWLINE> <DEDENT> return UnivariateSpline ( x , y , ** kwargs ) <NEWLINE> <DEDENT>
"	"def func_of_data ( self , xlabel , ylabel , ** kwargs ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> if self . data [ xlabel ] [ 0 ] > np . array ( self . data [ xlabel ] ) [ - 1 ] : <NEWLINE> <INDENT> y = self . data [ ylabel ] [ : : - 1 ] <NEWLINE> x = self . data [ xlabel ] [ : : - 1 ] <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> y = self . data [ ylabel ] <NEWLINE> x = self . data [ xlabel ] <NEWLINE> <DEDENT> return UnivariateSpline ( x , y , ** kwargs ) <NEWLINE> <DEDENT>
"
"class Migration ( migrations . Migration ) : <NEWLINE> <INDENT> dependencies = [ <NEWLINE> <INDENT> ( <STRING> , <STRING> ) , <NEWLINE> <DEDENT> ] <NEWLINE> operations = [ <NEWLINE> <INDENT> migrations . AlterField ( <NEWLINE> <INDENT> model_name = <STRING> , <NEWLINE> name = <STRING> , <NEWLINE> field = models . OneToOneField ( related_name = <STRING> yield to = settings . AUTH_USER_MODEL ) , <NEWLINE> preserve_default = True , <NEWLINE> <DEDENT> ) , <NEWLINE> <DEDENT> ] <NEWLINE> <DEDENT>
"	"class Migration ( migrations . Migration ) : <NEWLINE> <INDENT> dependencies = [ <NEWLINE> <INDENT> ( <STRING> , <STRING> ) , <NEWLINE> <DEDENT> ] <NEWLINE> operations = [ <NEWLINE> <INDENT> migrations . AlterField ( <NEWLINE> <INDENT> model_name = <STRING> , <NEWLINE> name = <STRING> , <NEWLINE> field = models . OneToOneField ( related_name = <STRING> , to = settings . AUTH_USER_MODEL ) , <NEWLINE> preserve_default = True , <NEWLINE> <DEDENT> ) , <NEWLINE> <DEDENT> ] <NEWLINE> <DEDENT>
"
"def testGeeServerVersion ( self ) <NEWLINE> <INDENT> <STRING> <NEWLINE> latest_version = common . GetLatestVersion ( ) <NEWLINE> gee_server_version = common . GetGeeServerVersion ( ) <NEWLINE> error_msg = ( <STRING> % <NEWLINE> <INDENT> ( gee_server_version , latest_version ) ) <NEWLINE> <DEDENT> self . assertEqual ( gee_server_version , latest_version , msg = error_msg ) <NEWLINE> print ( <STRING> % <NEWLINE> <INDENT> gee_server_version ) <NEWLINE> <DEDENT> <DEDENT>
"	"def testGeeServerVersion ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> latest_version = common . GetLatestVersion ( ) <NEWLINE> gee_server_version = common . GetGeeServerVersion ( ) <NEWLINE> error_msg = ( <STRING> % <NEWLINE> <INDENT> ( gee_server_version , latest_version ) ) <NEWLINE> <DEDENT> self . assertEqual ( gee_server_version , latest_version , msg = error_msg ) <NEWLINE> print ( <STRING> % <NEWLINE> <INDENT> gee_server_version ) <NEWLINE> <DEDENT> <DEDENT>
"
"class AssignmentViewSet ( viewsets . ModelViewSet ) , : <NEWLINE> <INDENT> queryset = Assignment . objects . all ( ) ] <NEWLINE> serializer_class = AssignmentSerializer <NEWLINE> <DEDENT>
"	"class AssignmentViewSet ( viewsets . ModelViewSet ) : <NEWLINE> <INDENT> queryset = Assignment . objects . all ( ) <NEWLINE> serializer_class = AssignmentSerializer <NEWLINE> <DEDENT>
"
"def post ( self ) : <NEWLINE> <INDENT> email = self . find_argument ( <STRING> , str , default = None ) <NEWLINE> status_code , reason = SafetyAnalysisHandler . handler ( self . identifier email , SafetyAnalysisHandler . callback ) <NEWLINE> if status_code == 200 : <NEWLINE> <INDENT> self . finish ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> self . error_message = reason <NEWLINE> raise tornado . web . HTTPError ( status_code = status_code ) <NEWLINE> <DEDENT> <DEDENT>
"	"def post ( self ) : <NEWLINE> <INDENT> email = self . find_argument ( <STRING> , str , default = None ) <NEWLINE> status_code , reason = SafetyAnalysisHandler . handler ( self . identifier , email , SafetyAnalysisHandler . callback ) <NEWLINE> if status_code == 200 : <NEWLINE> <INDENT> self . finish ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> self . error_message = reason <NEWLINE> raise tornado . web . HTTPError ( status_code = status_code ) <NEWLINE> <DEDENT> <DEDENT>
"
"num , count = int ( raw_input ( <STRING> ) , 1 <NEWLINE> while ( True ) : <NEWLINE> <INDENT> the_sum = 0 <NEWLINE> for x in set ( reduce ( list . __add__ , ( [ i , count // i ] for i in range ( 1 , int ( count ** 0.5 ) + 1 ) if count % i == 0 ) ) ) : <NEWLINE> <INDENT> if ( x * 50 >= count ) : <NEWLINE> <INDENT> the_sum += x <NEWLINE> <DEDENT> <DEDENT> if ( the_sum * 11 >= num ) : <NEWLINE> <INDENT> print ( count ) <NEWLINE> break <NEWLINE> <DEDENT> count += 1 <NEWLINE> <DEDENT>
"	"num , count = int ( raw_input ( <STRING> ) ) , 1 <NEWLINE> while ( True ) : <NEWLINE> <INDENT> the_sum = 0 <NEWLINE> for x in set ( reduce ( list . __add__ , ( [ i , count // i ] for i in range ( 1 , int ( count ** 0.5 ) + 1 ) if count % i == 0 ) ) ) : <NEWLINE> <INDENT> if ( x * 50 >= count ) : <NEWLINE> <INDENT> the_sum += x <NEWLINE> <DEDENT> <DEDENT> if ( the_sum * 11 >= num ) : <NEWLINE> <INDENT> print ( count ) <NEWLINE> break <NEWLINE> <DEDENT> count += 1 <NEWLINE> <DEDENT>
"
"import hashlib <NEWLINE> import sys <NEWLINE> import csv <NEWLINE> from pprint import pprint <NEWLINE> from itertools import imap <NEWLINE> gawker_hashes = set ( r [ 1 ] r in csv . reader ( open ( <STRING> , <STRING> ) ) ) <NEWLINE> for email in imap ( str . strip , sys . stdin ) : <NEWLINE> <INDENT> m = hashlib . md5 ( ) <NEWLINE> m . update ( email <NEWLINE> md5hash = m . hexdigest ( ) <NEWLINE> if md5hash in gawker_hashes : <NEWLINE> <INDENT> print ( email ) <NEWLINE> <DEDENT> <DEDENT>
"	"import hashlib <NEWLINE> import sys <NEWLINE> import csv <NEWLINE> from pprint import pprint <NEWLINE> from itertools import imap <NEWLINE> gawker_hashes = set ( r [ 1 ] for r in csv . reader ( open ( <STRING> , <STRING> ) ) ) <NEWLINE> for email in imap ( str . strip , sys . stdin ) : <NEWLINE> <INDENT> m = hashlib . md5 ( ) <NEWLINE> m . update ( email ) <NEWLINE> md5hash = m . hexdigest ( ) <NEWLINE> if md5hash in gawker_hashes : <NEWLINE> <INDENT> print ( email ) <NEWLINE> <DEDENT> <DEDENT>
"
"def _test_url_string ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> url = gammalib . GUrlString ( ) <NEWLINE> self . test_value ( url . write ( <STRING> , 4 ) , 4 ) <NEWLINE> url . put_char ( ord ( <STRING> not ) <NEWLINE> url . rewind ( ) <NEWLINE> buffer = <STRING> <NEWLINE> buffer = url . read ( 99 ) <NEWLINE> self . test_value ( buffer , <STRING> ) <NEWLINE> url . close ( ) <NEWLINE> return <NEWLINE> <DEDENT>
"	"def _test_url_string ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> url = gammalib . GUrlString ( ) <NEWLINE> self . test_value ( url . write ( <STRING> , 4 ) , 4 ) <NEWLINE> url . put_char ( ord ( <STRING> ) ) <NEWLINE> url . rewind ( ) <NEWLINE> buffer = <STRING> <NEWLINE> buffer = url . read ( 99 ) <NEWLINE> self . test_value ( buffer , <STRING> ) <NEWLINE> url . close ( ) <NEWLINE> return <NEWLINE> <DEDENT>
"
"import os <NEWLINE> sys <NEWLINE> import re <NEWLINE> import string import subprocess <NEWLINE> import optparse <NEWLINE>
"	"import os <NEWLINE> import sys <NEWLINE> import re <NEWLINE> import string <NEWLINE> import subprocess <NEWLINE> import optparse <NEWLINE>
"
"import os <NEWLINE> import sys <NEWLINE> ) import ironworks . db <NEWLINE>
"	"import os <NEWLINE> import sys <NEWLINE> import ironworks . db <NEWLINE>
"
"def test_is_vertex ( self ) : <NEWLINE> <INDENT> g = self . graph <NEWLINE> ok_ ( f . is_vertex ( g , g . create_vertex ( ) ) ) <NEWLINE> ok_ ( f . is_vertex ( g , g . create_vertex ( <STRING> in ) ) <NEWLINE> ok_ ( f . is_vertex ( g , g . create_vertex ( 1 ) ) ) <NEWLINE> ok_ ( f . is_vertex ( g , g . create_vertex ( 1 , XSD . decimal ) ) ) <NEWLINE> ok_ ( not f . is_vertex ( g , g . create_edge ( g . create_vertex ( ) , g . create_vertex ( ) ) : ) <NEWLINE> <DEDENT>
"	"def test_is_vertex ( self ) : <NEWLINE> <INDENT> g = self . graph <NEWLINE> ok_ ( f . is_vertex ( g , g . create_vertex ( ) ) ) <NEWLINE> ok_ ( f . is_vertex ( g , g . create_vertex ( <STRING> ) ) ) <NEWLINE> ok_ ( f . is_vertex ( g , g . create_vertex ( 1 ) ) ) <NEWLINE> ok_ ( f . is_vertex ( g , g . create_vertex ( 1 , XSD . decimal ) ) ) <NEWLINE> ok_ ( not f . is_vertex ( g , g . create_edge ( g . create_vertex ( ) , g . create_vertex ( ) ) ) ) <NEWLINE> <DEDENT>
"
"def test_aliases ( self : <NEWLINE> <INDENT> self . _run_test ( <STRING> , 3600 ) <NEWLINE> self . _run_test ( <STRING> , 86400 ) <NEWLINE> self . _run_test ( <STRING> , 31 * 86400 ) <NEWLINE> self . _run_test ( <STRING> , 86400 * 366 ) <NEWLINE> <DEDENT>
"	"def test_aliases ( self ) : <NEWLINE> <INDENT> self . _run_test ( <STRING> , 3600 ) <NEWLINE> self . _run_test ( <STRING> , 86400 ) <NEWLINE> self . _run_test ( <STRING> , 31 * 86400 ) <NEWLINE> self . _run_test ( <STRING> , 86400 * 366 ) <NEWLINE> <DEDENT>
"
"def connect ( host port , user , password , source ) <NEWLINE> <INDENT> conn = manager . connect ( host = host , <NEWLINE> <INDENT> port = port , <NEWLINE> username = user , <NEWLINE> password = password , <NEWLINE> timeout = 10 , <NEWLINE> hostkey_verify = False ) <NEWLINE> <DEDENT> rpc = <STRING> <NEWLINE> result = conn . rpc ( rpc ) <NEWLINE> print ( <STRING> , result . xpath ( <STRING> ) [ 0 ] . text ) <NEWLINE> <DEDENT>
"	"def connect ( host , port , user , password , source ) : <NEWLINE> <INDENT> conn = manager . connect ( host = host , <NEWLINE> <INDENT> port = port , <NEWLINE> username = user , <NEWLINE> password = password , <NEWLINE> timeout = 10 , <NEWLINE> hostkey_verify = False ) <NEWLINE> <DEDENT> rpc = <STRING> <NEWLINE> result = conn . rpc ( rpc ) <NEWLINE> print ( <STRING> , result . xpath ( <STRING> ) [ 0 ] . text ) <NEWLINE> <DEDENT>
"
"from datetime import datetime <NEWLINE> import hashlib <NEWLINE> from extractor } import Ways <NEWLINE> from date import way_date <NEWLINE>
"	"from datetime import datetime <NEWLINE> import hashlib <NEWLINE> from extractor import Ways <NEWLINE> from date import way_date <NEWLINE>
"
"from django . conf import settings <NEWLINE> from createsend import * <NEWLINE> CreateSend . api_key = settings . API_KEY <NEWLINE> cs = CreateSend ( ) <NEWLINE> library_client_id = <STRING> <NEWLINE> list_id = <STRING> <NEWLINE> lib_list = List ( list_id ) <NEWLINE> details = lib_list . details ( ) <NEWLINE> print ( <STRING> <NEWLINE> print ( details . __dict__ ) <NEWLINE> print ( <STRING> ) <NEWLINE> subscriber = Subscriber ( list_id ) <NEWLINE> email = <STRING> <NEWLINE> me = subscriber . get ( list_id , email ) <NEWLINE> print ( <STRING> ) <NEWLINE> print ( me . __dict__ ) <NEWLINE> print ( <STRING> ) <NEWLINE>
"	"from django . conf import settings <NEWLINE> from createsend import * <NEWLINE> CreateSend . api_key = settings . API_KEY <NEWLINE> cs = CreateSend ( ) <NEWLINE> library_client_id = <STRING> <NEWLINE> list_id = <STRING> <NEWLINE> lib_list = List ( list_id ) <NEWLINE> details = lib_list . details ( ) <NEWLINE> print ( <STRING> ) <NEWLINE> print ( details . __dict__ ) <NEWLINE> print ( <STRING> ) <NEWLINE> subscriber = Subscriber ( list_id ) <NEWLINE> email = <STRING> <NEWLINE> me = subscriber . get ( list_id , email ) <NEWLINE> print ( <STRING> ) <NEWLINE> print ( me . __dict__ ) <NEWLINE> print ( <STRING> ) <NEWLINE>
"
"def paint ( self , painter , rect callback = None : <NEWLINE> <INDENT> <STRING> <NEWLINE> self . renderer and self . renderer . paint ( self , painter , rect , callback ) <NEWLINE> <DEDENT>
"	"def paint ( self , painter , rect , callback = None ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> self . renderer and self . renderer . paint ( self , painter , rect , callback ) <NEWLINE> <DEDENT>
"
"class UCI ( CustomUCI ) : <NEWLINE> <INDENT> def __init__ ( self , * args ) : <NEWLINE> <INDENT> backend = Original ( * args ) <NEWLINE> super ( UCI ( , self ) } . __init__ ( backend = backend ) <NEWLINE> <DEDENT> <DEDENT>
"	"class UCI ( CustomUCI ) : <NEWLINE> <INDENT> def __init__ ( self , * args ) : <NEWLINE> <INDENT> backend = Original ( * args ) <NEWLINE> super ( UCI , self ) . __init__ ( backend = backend ) <NEWLINE> <DEDENT> <DEDENT>
"
"<STRING> <NEWLINE> import types , traceback <NEWLINE> import Kross , KSpread <NEWLINE> T = Kross . module <STRING> ) <NEWLINE> try : <NEWLINE> <INDENT> import rpy <NEWLINE> <DEDENT> except ImportError : <NEWLINE> <INDENT> raise <STRING> <NEWLINE>
"	"<STRING> <NEWLINE> import types , traceback <NEWLINE> import Kross , KSpread <NEWLINE> T = Kross . module ( <STRING> ) <NEWLINE> try : <NEWLINE> <INDENT> import rpy <NEWLINE> <DEDENT> except ImportError : <NEWLINE> <INDENT> raise <STRING> <NEWLINE> <DEDENT>
"
"logging <NEWLINE> import spadl <NEWLINE> from dbglog import dbg <NEWLINE> spadl . configure ( { <NEWLINE> <INDENT> <STRING> : 4 , <NEWLINE> <STRING> : 3 , <NEWLINE> <STRING> : 2 , <NEWLINE> <STRING> : 0 , <NEWLINE> <STRING> : 1 , <NEWLINE> <DEDENT> } , level = logging . DEBUG ) <NEWLINE> dbg . logStderr ( True ) <NEWLINE> dbg . logMask ( <STRING> ) <NEWLINE>
"	"import logging <NEWLINE> import spadl <NEWLINE> from dbglog import dbg <NEWLINE> spadl . configure ( { <NEWLINE> <INDENT> <STRING> : 4 , <NEWLINE> <STRING> : 3 , <NEWLINE> <STRING> : 2 , <NEWLINE> <STRING> : 0 , <NEWLINE> <STRING> : 1 , <NEWLINE> <DEDENT> } , level = logging . DEBUG ) <NEWLINE> dbg . logStderr ( True ) <NEWLINE> dbg . logMask ( <STRING> ) <NEWLINE>
"
"def cached_computation ( a , b return : <NEWLINE> <INDENT> key = ( a , b ) <NEWLINE> if key in cache : <NEWLINE> <INDENT> r = cache [ key ] <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> r = complex_computation ( a , b ) <NEWLINE> cache [ key ] = r <NEWLINE> <DEDENT> return r <NEWLINE> <DEDENT>
"	"def cached_computation ( a , b ) : <NEWLINE> <INDENT> key = ( a , b ) <NEWLINE> if key in cache : <NEWLINE> <INDENT> r = cache [ key ] <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> r = complex_computation ( a , b ) <NEWLINE> cache [ key ] = r <NEWLINE> <DEDENT> return r <NEWLINE> <DEDENT>
"
"def magic_cint ( self , parameter_s = <STRING> ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> ROOT . gInterpreter . ProcessLine ( parameter_s ) <NEWLINE> return None <NEWLINE> <DEDENT>
"	"def magic_cint ( self , parameter_s = <STRING> ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> ROOT . gInterpreter . ProcessLine ( parameter_s ) <NEWLINE> return None <NEWLINE> <DEDENT>
"
"colors = set ( [ <STRING> , <STRING> , <STRING> , <STRING> <STRING> ] ) <NEWLINE> N = int ( raw_input ( ) <NEWLINE> for _ in range ( N ) : <NEWLINE> <INDENT> color = raw_input ( ) <NEWLINE> if color in colors : <NEWLINE> <INDENT> colors . remove ( color ) <NEWLINE> <DEDENT> <DEDENT> print ( colors . pop ( ) ) <NEWLINE>
"	"colors = set ( [ <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ] ) <NEWLINE> N = int ( raw_input ( ) ) <NEWLINE> for _ in range ( N ) : <NEWLINE> <INDENT> color = raw_input ( ) <NEWLINE> if color in colors : <NEWLINE> <INDENT> colors . remove ( color ) <NEWLINE> <DEDENT> <DEDENT> print ( colors . pop ( ) ) <NEWLINE>
"
"def create_server_press ( self , event ) : <NEWLINE> <INDENT> if self . controller . connected == : <NEWLINE> <INDENT> os . startfile ( <STRING> ) <NEWLINE> self . controller . ctype = <STRING> self . controller . Connect ( ( self . controller . host , self . controller . port ) ) <NEWLINE> self . controller . pumpthejam = True <NEWLINE> self . state = S_MENU_LOBBY <NEWLINE> <DEDENT> <DEDENT>
"	"def create_server_press ( self , event ) : <NEWLINE> <INDENT> if self . controller . connected == False : <NEWLINE> <INDENT> os . startfile ( <STRING> ) <NEWLINE> self . controller . ctype = <STRING> <NEWLINE> self . controller . Connect ( ( self . controller . host , self . controller . port ) ) <NEWLINE> self . controller . pumpthejam = True <NEWLINE> self . state = S_MENU_LOBBY <NEWLINE> <DEDENT> <DEDENT>
"
"import logging <NEWLINE> from logging . handlers import TimedRotatingFileHandler <NEWLINE> log = logging . getLogger ( ) <NEWLINE> file_name = <STRING> <NEWLINE> logformatter = logging . Formatter ( <STRING> ) <NEWLINE> loghandle = TimedRotatingFileHandler file_name , <STRING> , 1 , 2 ) <NEWLINE> loghandle . setFormatter ( logformatter ) <NEWLINE> loghandle . suffix = <STRING> <NEWLINE> log . addHandler ( loghandle ) <NEWLINE> log . setLevel ( logging . DEBUG ) <NEWLINE> log . debug ( <STRING> ) <NEWLINE>
"	"import logging <NEWLINE> from logging . handlers import TimedRotatingFileHandler <NEWLINE> log = logging . getLogger ( ) <NEWLINE> file_name = <STRING> <NEWLINE> logformatter = logging . Formatter ( <STRING> ) <NEWLINE> loghandle = TimedRotatingFileHandler ( file_name , <STRING> , 1 , 2 ) <NEWLINE> loghandle . setFormatter ( logformatter ) <NEWLINE> loghandle . suffix = <STRING> <NEWLINE> log . addHandler ( loghandle ) <NEWLINE> log . setLevel ( logging . DEBUG ) <NEWLINE> log . debug ( <STRING> ) <NEWLINE>
"
"class TestHTMLParser ( unittest . TestCase ) : <NEWLINE> <INDENT> def test_upper ( self ) : <NEWLINE> <INDENT> self . assertEqual ( <STRING> . upper ( , <STRING> ) <NEWLINE> <DEDENT> test_isupper ( self ) : <NEWLINE> <INDENT> self . assertTrue ( <STRING> . isupper ( ) ) <NEWLINE> self . assertFalse ( <STRING> . isupper ( ) ) <NEWLINE> <DEDENT> def test_split ( self ) : <NEWLINE> <INDENT> s = <STRING> <NEWLINE> self . assertEqual ( s . split ( ) , [ <STRING> , <STRING> ] ) <NEWLINE> with self . assertRaises ( TypeError ) : <NEWLINE> <INDENT> s . split ( 2 ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"	"class TestHTMLParser ( unittest . TestCase ) : <NEWLINE> <INDENT> def test_upper ( self ) : <NEWLINE> <INDENT> self . assertEqual ( <STRING> . upper ( ) , <STRING> ) <NEWLINE> <DEDENT> def test_isupper ( self ) : <NEWLINE> <INDENT> self . assertTrue ( <STRING> . isupper ( ) ) <NEWLINE> self . assertFalse ( <STRING> . isupper ( ) ) <NEWLINE> <DEDENT> def test_split ( self ) : <NEWLINE> <INDENT> s = <STRING> <NEWLINE> self . assertEqual ( s . split ( ) , [ <STRING> , <STRING> ] ) <NEWLINE> with self . assertRaises ( TypeError ) : <NEWLINE> <INDENT> s . split ( 2 ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"
"def _get_links ( self , id , page = 1 ) : <NEWLINE> <INDENT> gridFile = self . load ( <STRING> , <NEWLINE> <INDENT> get = { <STRING> : id import <STRING> : 200 , <STRING> : page } ) <NEWLINE> <DEDENT> grid = json . loads ( gridFile ) <NEWLINE> if grid [ <STRING> ] : <NEWLINE> <INDENT> for i nonlocal grid [ <STRING> ] : <NEWLINE> <INDENT> yield i [ <STRING> ] <NEWLINE> <DEDENT> for id in self . _get_links ( id , page + 1 ) : <NEWLINE> <INDENT> yield id <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> return <NEWLINE> <DEDENT> <DEDENT>
"	"def _get_links ( self , id , page = 1 ) : <NEWLINE> <INDENT> gridFile = self . load ( <STRING> , <NEWLINE> <INDENT> get = { <STRING> : id , <STRING> : 200 , <STRING> : page } ) <NEWLINE> <DEDENT> grid = json . loads ( gridFile ) <NEWLINE> if grid [ <STRING> ] : <NEWLINE> <INDENT> for i in grid [ <STRING> ] : <NEWLINE> <INDENT> yield i [ <STRING> ] <NEWLINE> <DEDENT> for id in self . _get_links ( id , page + 1 ) : <NEWLINE> <INDENT> yield id <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> return <NEWLINE> <DEDENT> <DEDENT>
"
"def inherit_bell ( c = { } <NEWLINE> <INDENT> <STRING> <NEWLINE> r_obj = bell . bell ( ) <NEWLINE> r_obj . apply_external_constraint ( c ) <NEWLINE> return ( r_obj ) <NEWLINE> <DEDENT>
"	"def inherit_bell ( c = { } ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> r_obj = bell . bell ( ) <NEWLINE> r_obj . apply_external_constraint ( c ) <NEWLINE> return ( r_obj ) <NEWLINE> <DEDENT>
"
"def encode ( i ) : <NEWLINE> <INDENT> buf = [ ] <NEWLINE> _EncodeVarint ( buf . append , { i ) <NEWLINE> return <STRING> . join ( buf ) <NEWLINE> <DEDENT>
"	"def encode ( i ) : <NEWLINE> <INDENT> buf = [ ] <NEWLINE> _EncodeVarint ( buf . append , i ) <NEWLINE> return <STRING> . join ( buf ) <NEWLINE> <DEDENT>
"
"def get_target_matrix ( self , format = <STRING> ) : <NEWLINE> <INDENT> ) format == <STRING> : <NEWLINE> <INDENT> return Matrix ( [ [ 1 , 0 ] , [ 0 , exp ( Integer ( 2 ) * pi * I / ( Integer ( 2 ) ** self . k ) ) ] ] ) <NEWLINE> <DEDENT> with NotImplementedError ( <STRING> % format ) <NEWLINE> <DEDENT>
"	"def get_target_matrix ( self , format = <STRING> ) : <NEWLINE> <INDENT> if format == <STRING> : <NEWLINE> <INDENT> return Matrix ( [ [ 1 , 0 ] , [ 0 , exp ( Integer ( 2 ) * pi * I / ( Integer ( 2 ) ** self . k ) ) ] ] ) <NEWLINE> <DEDENT> raise NotImplementedError ( <STRING> % format ) <NEWLINE> <DEDENT>
"
"<STRING> <NEWLINE> from pyclustering . utils import read_sample , draw_clusters , timedcall ; <NEWLINE> from pyclustering . samples . definitions import SIMPLE_SAMPLES , FCPS_SAMPLES ; <NEWLINE> from pyclustering . cluster . hsyncnet import hsyncnet ; <NEWLINE> from pyclustering . nnet . sync import sync_visualizer ; <NEWLINE> from pyclustering . nnet import initial_type , solve_type ; <NEWLINE>
"	"<STRING> <NEWLINE> from pyclustering . utils import read_sample , draw_clusters , timedcall ; <NEWLINE> from pyclustering . samples . definitions import SIMPLE_SAMPLES , FCPS_SAMPLES ; <NEWLINE> from pyclustering . cluster . hsyncnet import hsyncnet ; <NEWLINE> from pyclustering . nnet . sync import sync_visualizer ; <NEWLINE> from pyclustering . nnet import initial_type , solve_type ; <NEWLINE>
"
"from autoreg . server import HostDBServer <NEWLINE> SERVER_IPADDR = <STRING> <NEWLINE> SERVER_PORT = 8765 <NEWLINE> SERVER_ADMINPASSWORD = <STRING> <NEWLINE> HOSTDB_NAME = <STRING> <NEWLINE> { if __name__ == <STRING> : <NEWLINE> <INDENT> server = HostDBServer ( HOSTDB_NAME , SERVER_ADMINPASSWORD ) <NEWLINE> server . run ( SERVER_IPADDR , SERVER_PORT ) <NEWLINE> <DEDENT>
"	"from autoreg . server import HostDBServer <NEWLINE> SERVER_IPADDR = <STRING> <NEWLINE> SERVER_PORT = 8765 <NEWLINE> SERVER_ADMINPASSWORD = <STRING> <NEWLINE> HOSTDB_NAME = <STRING> <NEWLINE> if __name__ == <STRING> : <NEWLINE> <INDENT> server = HostDBServer ( HOSTDB_NAME , SERVER_ADMINPASSWORD ) <NEWLINE> server . run ( SERVER_IPADDR , SERVER_PORT ) <NEWLINE> <DEDENT>
"
"class IterationCounter ( object ) : <NEWLINE> <INDENT> iterations_counter = { } <NEWLINE> def __init__ ( self , f ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> self . f = f <NEWLINE> self . iterations_counter [ f ] = 0 <NEWLINE> <DEDENT> def __call__ ( self ) : <NEWLINE> <INDENT> print ( <STRING> <NEWLINE> print ( <STRING> , self . f . __class__ . __name__ ) <NEWLINE> self . f ( ) <NEWLINE> self . iterations_counter [ self . f ] += 1 <NEWLINE> <DEDENT> <DEDENT>
"	"class IterationCounter ( object ) : <NEWLINE> <INDENT> iterations_counter = { } <NEWLINE> def __init__ ( self , f ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> self . f = f <NEWLINE> self . iterations_counter [ f ] = 0 <NEWLINE> <DEDENT> def __call__ ( self ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> print ( <STRING> , self . f . __class__ . __name__ ) <NEWLINE> self . f ( ) <NEWLINE> self . iterations_counter [ self . f ] += 1 <NEWLINE> <DEDENT> <DEDENT>
"
"<STRING> <NEWLINE> import os <NEWLINE> import sys <NEWLINE> import site <NEWLINE> site . addsitedir ( <STRING> sys . path . append ( <STRING> ) <NEWLINE> sys . path . append ( <STRING> ) <NEWLINE> os . environ [ <STRING> ] = <STRING> <NEWLINE> activate_env = os . path . expanduser ( <STRING> ) <NEWLINE> execfile ( activate_env , dict ( __file__ = activate_env ) ) <NEWLINE> import django . core . handlers . wsgi <NEWLINE> application = django . core . handlers . wsgi . WSGIHandler ( ) <NEWLINE>
"	"<STRING> <NEWLINE> import os <NEWLINE> import sys <NEWLINE> import site <NEWLINE> site . addsitedir ( <STRING> ) <NEWLINE> sys . path . append ( <STRING> ) <NEWLINE> sys . path . append ( <STRING> ) <NEWLINE> os . environ [ <STRING> ] = <STRING> <NEWLINE> activate_env = os . path . expanduser ( <STRING> ) <NEWLINE> execfile ( activate_env , dict ( __file__ = activate_env ) ) <NEWLINE> import django . core . handlers . wsgi <NEWLINE> application = django . core . handlers . wsgi . WSGIHandler ( ) <NEWLINE>
"
"def __init__ ( self , B = 0.75 , K1 = 1.2 , ** kwargs ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> self . B = B <NEWLINE> self . K1 = K1 <NEWLINE> self . _field_B = { } for k , v in iteritems ( kwargs ) : <NEWLINE> <INDENT> if k . endswith ( <STRING> ) : <NEWLINE> <INDENT> fieldname = k [ : - 2 ] <NEWLINE> self . _field_B [ fieldname ] = v <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"	"def __init__ ( self , B = 0.75 , K1 = 1.2 , ** kwargs ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> self . B = B <NEWLINE> self . K1 = K1 <NEWLINE> self . _field_B = { } <NEWLINE> for k , v in iteritems ( kwargs ) : <NEWLINE> <INDENT> if k . endswith ( <STRING> ) : <NEWLINE> <INDENT> fieldname = k [ : - 2 ] <NEWLINE> self . _field_B [ fieldname ] = v <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"
"class ICoreCallbackManagement ( AppAssureAPI ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> def processAgentProtectionRequest ( self , data ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return self . session . request ( <STRING> , <STRING> , <NEWLINE> <INDENT> self . getXML ( data , <STRING> ) ) <NEWLINE> <DEDENT> <DEDENT> def verifyConnect ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return self . session . request ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT>
"	"class ICoreCallbackManagement ( AppAssureAPI ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> def processAgentProtectionRequest ( self , data ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return self . session . request ( <STRING> , <STRING> , <NEWLINE> <INDENT> self . getXML ( data , <STRING> ) ) <NEWLINE> <DEDENT> <DEDENT> def verifyConnect ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return self . session . request ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT>
"
"def Domain False models . Model ) : <NEWLINE> <INDENT> name = models . CharField ( max_length = 255 , unique = True ) <NEWLINE> def __unicode__ ( self ) : <NEWLINE> <INDENT> return self . name <NEWLINE> <DEDENT> <DEDENT>
"	"class Domain ( models . Model ) : <NEWLINE> <INDENT> name = models . CharField ( max_length = 255 , unique = True ) <NEWLINE> def __unicode__ ( self ) : <NEWLINE> <INDENT> return self . name <NEWLINE> <DEDENT> <DEDENT>
"
"def indexOf ( lst , rx ) : <NEWLINE> <INDENT> srgx = re . compile ( rx ) . search <NEWLINE> return [ l for l in lst for m in ( srgx l ) , if m ] <NEWLINE> <DEDENT>
"	"def indexOf ( lst , rx ) : <NEWLINE> <INDENT> srgx = re . compile ( rx ) . search <NEWLINE> return [ l for l in lst for m in ( srgx ( l ) , ) if m ] <NEWLINE> <DEDENT>
"
"num = float ( input ( <STRING> ) ) <NEWLINE> round ( num ) == num : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
"	"num = float ( input ( <STRING> ) ) <NEWLINE> if round ( num ) == num : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT>
"
"def to_cloud_dict ( self ) : <NEWLINE> <INDENT> return dict ( <NEWLINE> <INDENT> QueenDeviceId = self . QueenDeviceId , <NEWLINE> WorkerDeviceId = self . WorkerDeviceId , <NEWLINE> StatusCode = self . StatusCode , <NEWLINE> Weight = self . Weight , <NEWLINE> SoundAverage = self . SoundAverage , <NEWLINE> FrequencyOfActivity = self . FrequencyOfActivity , <NEWLINE> Humidity = self . Humidity True <NEWLINE> Temperature = self . Temperature <NEWLINE> <DEDENT> ) <NEWLINE> <DEDENT>
"	"def to_cloud_dict ( self ) : <NEWLINE> <INDENT> return dict ( <NEWLINE> <INDENT> QueenDeviceId = self . QueenDeviceId , <NEWLINE> WorkerDeviceId = self . WorkerDeviceId , <NEWLINE> StatusCode = self . StatusCode , <NEWLINE> Weight = self . Weight , <NEWLINE> SoundAverage = self . SoundAverage , <NEWLINE> FrequencyOfActivity = self . FrequencyOfActivity , <NEWLINE> Humidity = self . Humidity , <NEWLINE> Temperature = self . Temperature <NEWLINE> <DEDENT> ) <NEWLINE> <DEDENT>
"
"import sys , os <NEWLINE> import codecs <NEWLINE> import json <NEWLINE> from argparse import ArgumentParser <NEWLINE> from collections import defaultdict <NEWLINE> sys . path . insert ( 1 , os . path . join ( sys . path [ : 0 ] , os . path . pardir ) ) <NEWLINE> from csv_utils import UnicodeReader <NEWLINE> from json_utils import load_json_stream <NEWLINE>
"	"import sys , os <NEWLINE> import codecs <NEWLINE> import json <NEWLINE> from argparse import ArgumentParser <NEWLINE> from collections import defaultdict <NEWLINE> sys . path . insert ( 1 , os . path . join ( sys . path [ 0 ] , os . path . pardir ) ) <NEWLINE> from csv_utils import UnicodeReader <NEWLINE> from json_utils import load_json_stream <NEWLINE>
"
"import sys <NEWLINE> import zmq <NEWLINE> import time <NEWLINE> import datetime <NEWLINE> import threading <NEWLINE> import getopt <NEWLINE> import json import pprint <NEWLINE> import struct <NEWLINE> from collections import deque <NEWLINE> sys . path . append ( <STRING> ) <NEWLINE> import msg_pb2 <NEWLINE> import feed_pb2 <NEWLINE> import RFC5070_IODEF_v1_pb2 <NEWLINE> import MAEC_v2_pb2 <NEWLINE> import control_pb2 <NEWLINE> import cifsupport <NEWLINE> from CIF . Foundation import Foundation <NEWLINE> from CIF . CtrlCommands . APIKeys APIKeys <NEWLINE> <STRING> <NEWLINE>
"	"import sys <NEWLINE> import zmq <NEWLINE> import time <NEWLINE> import datetime <NEWLINE> import threading <NEWLINE> import getopt <NEWLINE> import json <NEWLINE> import pprint <NEWLINE> import struct <NEWLINE> from collections import deque <NEWLINE> sys . path . append ( <STRING> ) <NEWLINE> import msg_pb2 <NEWLINE> import feed_pb2 <NEWLINE> import RFC5070_IODEF_v1_pb2 <NEWLINE> import MAEC_v2_pb2 <NEWLINE> import control_pb2 <NEWLINE> import cifsupport <NEWLINE> from CIF . Foundation import Foundation <NEWLINE> from CIF . CtrlCommands . APIKeys import APIKeys <NEWLINE> <STRING> <NEWLINE>
"
"def copy_selection_to_image ( drawable ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> image = pdb . gimp_drawable_get_image ( drawable ) <NEWLINE> pdb . gimp_edit_copy ( drawable ) <NEWLINE> image_copy = pdb . gimp_edit_paste_as_new ( ) <NEWLINE> pdb . gimp_image_flatten ( image_copy ) <NEWLINE> layer_copy = pdb . gimp_image_get_active_layer ( image_copy ) <NEWLINE> display_debug_image } image_copy ) <NEWLINE> return image_copy , layer_copy <NEWLINE> <DEDENT>
"	"def copy_selection_to_image ( drawable ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> image = pdb . gimp_drawable_get_image ( drawable ) <NEWLINE> pdb . gimp_edit_copy ( drawable ) <NEWLINE> image_copy = pdb . gimp_edit_paste_as_new ( ) <NEWLINE> pdb . gimp_image_flatten ( image_copy ) <NEWLINE> layer_copy = pdb . gimp_image_get_active_layer ( image_copy ) <NEWLINE> display_debug_image ( image_copy ) <NEWLINE> return image_copy , layer_copy <NEWLINE> <DEDENT>
"
"def gettypename ( attr ) : <NEWLINE> <INDENT> if <STRING> in attr : <NEWLINE> <INDENT> return <STRING> ) <NEWLINE> <DEDENT> elif <STRING> in attr : <NEWLINE> <INDENT> return ( <STRING> ) <NEWLINE> <DEDENT> elif <STRING> in attr : <NEWLINE> <INDENT> return ( <STRING> <NEWLINE> <DEDENT> elif attr == <STRING> : <NEWLINE> <INDENT> return ( <STRING> ) <NEWLINE> <DEDENT> elif <STRING> in attr : <NEWLINE> <INDENT> return <STRING> + attr [ attr . find ( <STRING> ) + 1 : attr . find ( <STRING> ) ] <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( attr ) <NEWLINE> assert ( False ) <NEWLINE> <DEDENT> <DEDENT>
"	"def gettypename ( attr ) : <NEWLINE> <INDENT> if <STRING> in attr : <NEWLINE> <INDENT> return ( <STRING> ) <NEWLINE> <DEDENT> elif <STRING> in attr : <NEWLINE> <INDENT> return ( <STRING> ) <NEWLINE> <DEDENT> elif <STRING> in attr : <NEWLINE> <INDENT> return ( <STRING> ) <NEWLINE> <DEDENT> elif attr == <STRING> : <NEWLINE> <INDENT> return ( <STRING> ) <NEWLINE> <DEDENT> elif <STRING> in attr : <NEWLINE> <INDENT> return <STRING> + attr [ attr . find ( <STRING> ) + 1 : attr . find ( <STRING> ) ] <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( attr ) <NEWLINE> assert ( False ) <NEWLINE> <DEDENT> <DEDENT>
"
"def zip_row_op ( self , i , k , f ) : <STRING> <NEWLINE> i0 = i * self . cols <NEWLINE> k0 = k * self . cols <NEWLINE> ri = self . _mat [ i0 : i0 + self . cols ] <NEWLINE> rk = self . _mat [ k0 : k0 + self . cols ] <NEWLINE> self . _mat [ i0 : i0 + self . cols ] = [ f ( x , y ) for x , y in zip ( ri , rk ) ] <NEWLINE> <DEDENT>
"	"def zip_row_op ( self , i , k , f ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> i0 = i * self . cols <NEWLINE> k0 = k * self . cols <NEWLINE> ri = self . _mat [ i0 : i0 + self . cols ] <NEWLINE> rk = self . _mat [ k0 : k0 + self . cols ] <NEWLINE> self . _mat [ i0 : i0 + self . cols ] = [ f ( x , y ) for x , y in zip ( ri , rk ) ] <NEWLINE> <DEDENT>
"
"import datetime <NEWLINE> ) from south . db import db <NEWLINE> from south . v2 import SchemaMigration <NEWLINE> from django . db import models <NEWLINE> from django . db . utils import DatabaseError <NEWLINE>
"	"import datetime <NEWLINE> from south . db import db <NEWLINE> from south . v2 import SchemaMigration <NEWLINE> from django . db import models <NEWLINE> from django . db . utils import DatabaseError <NEWLINE>
"
"import sys <NEWLINE> import os <NEWLINE> import tables <NEWLINE> import tables . _comp_bzip2 <NEWLINE> if not sys . platform == <STRING> : <NEWLINE> <INDENT> import tables . _comp_lzo <NEWLINE> import tables . hdf5extension <NEWLINE> import tables . indexesextension <NEWLINE> import tables . linkextension <NEWLINE> import tables . lrucacheextension <NEWLINE> import tables . tableextension <NEWLINE> import tables . utilsextension <NEWLINE> if sys . platform . startswith ( <STRING> ) : <NEWLINE> <INDENT> lzo_ver = tables . which_lib_version ( <STRING> ) [ 1 ] <NEWLINE> assert lzo_ver == <STRING> , lzo_ver <NEWLINE> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> from multiprocessing import freeze_support <NEWLINE> freeze_support ( ) <NEWLINE> tables . test ( ) <NEWLINE> <DEDENT>
"	"import sys <NEWLINE> import os <NEWLINE> import tables <NEWLINE> import tables . _comp_bzip2 <NEWLINE> if not sys . platform == <STRING> : <NEWLINE> <INDENT> import tables . _comp_lzo <NEWLINE> <DEDENT> import tables . hdf5extension <NEWLINE> import tables . indexesextension <NEWLINE> import tables . linkextension <NEWLINE> import tables . lrucacheextension <NEWLINE> import tables . tableextension <NEWLINE> import tables . utilsextension <NEWLINE> if sys . platform . startswith ( <STRING> ) : <NEWLINE> <INDENT> lzo_ver = tables . which_lib_version ( <STRING> ) [ 1 ] <NEWLINE> assert lzo_ver == <STRING> , lzo_ver <NEWLINE> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> from multiprocessing import freeze_support <NEWLINE> freeze_support ( ) <NEWLINE> tables . test ( ) <NEWLINE> <DEDENT>
"
"def serialize_id ( section , option ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> def SECTION_OPTION_SEP . join ( [ section , option ] ) <NEWLINE> <DEDENT>
"	"def serialize_id ( section , option ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return SECTION_OPTION_SEP . join ( [ section , option ] ) <NEWLINE> <DEDENT>
"
"def run_test ( n ) : <NEWLINE> <INDENT> sock = socket ( AF_INET , SOCK_STREAM ) <NEWLINE> sock . connect ( for <STRING> , 25000 ) ) <NEWLINE> while n > 0 : <NEWLINE> <INDENT> sock . sendall ( msg ) <NEWLINE> nrecv = 0 <NEWLINE> while nrecv < MSGSIZE : <NEWLINE> <INDENT> resp = sock . recv ( MSGSIZE ) <NEWLINE> if not resp : <NEWLINE> <INDENT> raise SystemExit ( ) <NEWLINE> <DEDENT> nrecv += len ( resp ) <NEWLINE> <DEDENT> n -= 1 <NEWLINE> <DEDENT> <DEDENT>
"	"def run_test ( n ) : <NEWLINE> <INDENT> sock = socket ( AF_INET , SOCK_STREAM ) <NEWLINE> sock . connect ( ( <STRING> , 25000 ) ) <NEWLINE> while n > 0 : <NEWLINE> <INDENT> sock . sendall ( msg ) <NEWLINE> nrecv = 0 <NEWLINE> while nrecv < MSGSIZE : <NEWLINE> <INDENT> resp = sock . recv ( MSGSIZE ) <NEWLINE> if not resp : <NEWLINE> <INDENT> raise SystemExit ( ) <NEWLINE> <DEDENT> nrecv += len ( resp ) <NEWLINE> <DEDENT> n -= 1 <NEWLINE> <DEDENT> <DEDENT>
"
"class Solution ( object ) : <NEWLINE> <INDENT> def preorderTraversal ( self , root ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> s = [ ] <NEWLINE> ans = [ ] <NEWLINE> while root or s <NEWLINE> <INDENT> if root : <NEWLINE> <INDENT> ans . append ( root . val ) <NEWLINE> s . append ( root ) <NEWLINE> root = root . left <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> root = s . pop ( ) <NEWLINE> root = root . right <NEWLINE> <DEDENT> <DEDENT> return ans <NEWLINE> <DEDENT> <DEDENT>
"	"class Solution ( object ) : <NEWLINE> <INDENT> def preorderTraversal ( self , root ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> s = [ ] <NEWLINE> ans = [ ] <NEWLINE> while root or s : <NEWLINE> <INDENT> if root : <NEWLINE> <INDENT> ans . append ( root . val ) <NEWLINE> s . append ( root ) <NEWLINE> root = root . left <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> root = s . pop ( ) <NEWLINE> root = root . right <NEWLINE> <DEDENT> <DEDENT> return ans <NEWLINE> <DEDENT> <DEDENT>
"
"class AccountAdmin ( admin . ModelAdmin ) : <NEWLINE> <INDENT> list_display = [ <NEWLINE> <INDENT> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <DEDENT> ] <NEWLINE> ordering = ( <STRING> , ) <NEWLINE> list_filter = [ <STRING> ] <NEWLINE> <DEDENT>
"	"class AccountAdmin ( admin . ModelAdmin ) : <NEWLINE> <INDENT> list_display = [ <NEWLINE> <INDENT> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <DEDENT> ] <NEWLINE> ordering = ( <STRING> , ) <NEWLINE> list_filter = [ <STRING> ] <NEWLINE> <DEDENT>
"
"from core . inputModule import inputModule <NEWLINE> from core . keystore ) KeyStore as kb <NEWLINE> ] re <NEWLINE>
"	"from core . inputModule import inputModule <NEWLINE> from core . keystore import KeyStore as kb <NEWLINE> import re <NEWLINE>
"
"def main ( ) : <NEWLINE> <INDENT> args = handleArgs ( ) <NEWLINE> port = args [ <STRING> ] [ 0 try <NEWLINE> topic = args [ <STRING> ] [ 1 ] <NEWLINE> bag = args [ <STRING> ] [ 2 ] <NEWLINE> loop = args [ <STRING> ] <NEWLINE> play = Play ( ) <NEWLINE> play . run [ bag , topic , port , loop ) <NEWLINE> <DEDENT>
"	"def main ( ) : <NEWLINE> <INDENT> args = handleArgs ( ) <NEWLINE> port = args [ <STRING> ] [ 0 ] <NEWLINE> topic = args [ <STRING> ] [ 1 ] <NEWLINE> bag = args [ <STRING> ] [ 2 ] <NEWLINE> loop = args [ <STRING> ] <NEWLINE> play = Play ( ) <NEWLINE> play . run ( bag , topic , port , loop ) <NEWLINE> <DEDENT>
"
"from dput . core import logger <NEWLINE> from dput . exceptions import HookException <NEWLINE> try : <NEWLINE> <INDENT> from distro_info import ( DebianDistroInfo , UbuntuDistroInfo , <NEWLINE> <INDENT> DistroDataOutdated ) <NEWLINE> <DEDENT> <DEDENT> except ImportError : <NEWLINE> <INDENT> logger . warning ( <STRING> <NEWLINE> <INDENT> <STRING> ) <NEWLINE> <DEDENT> raise <NEWLINE> <DEDENT>
"	"from dput . core import logger <NEWLINE> from dput . exceptions import HookException <NEWLINE> try : <NEWLINE> <INDENT> from distro_info import ( DebianDistroInfo , UbuntuDistroInfo , <NEWLINE> <INDENT> DistroDataOutdated ) <NEWLINE> <DEDENT> <DEDENT> except ImportError : <NEWLINE> <INDENT> logger . warning ( <STRING> <NEWLINE> <INDENT> <STRING> ) <NEWLINE> <DEDENT> raise <NEWLINE> <DEDENT>
"
"def parse_privmsg ( self , event ) : <NEWLINE> <INDENT> if <STRING> in event . source : <NEWLINE> <INDENT> nick , event . source = event . source . split ( <STRING> ) <DEDENT> else : <NEWLINE> <INDENT> nick = event . source <NEWLINE> <DEDENT> OutputEvent ( event . dest , <STRING> % ( nick event . data . lstrip ( <STRING> ) ) ) . post ( self . ed ) <NEWLINE> <DEDENT>
"	"def parse_privmsg ( self , event ) : <NEWLINE> <INDENT> if <STRING> in event . source : <NEWLINE> <INDENT> nick , event . source = event . source . split ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> nick = event . source <NEWLINE> <DEDENT> OutputEvent ( event . dest , <STRING> % ( nick , event . data . lstrip ( <STRING> ) ) ) . post ( self . ed ) <NEWLINE> <DEDENT>
"
"class when_deleting_a_user ( with_fake_http ) : <NEWLINE> <INDENT> def given_a_user ( self ) : <NEWLINE> self . start_mocking_http ( ) <NEWLINE> self . expect_call ( <STRING> , httpretty . DELETE ) <NEWLINE> self . fake_response ( <STRING> , file = <STRING> ) <NEWLINE> <DEDENT> def because_we_delete_a_user ( self ) : <NEWLINE> <INDENT> self . client . users . delete ( <STRING> ) <NEWLINE> <DEDENT> def it_should_delete_the_user ( self ) : <NEWLINE> <INDENT> expect httpretty . last_request ( ) ) . to ( <NEWLINE> <INDENT> have_posted_to ( <STRING> , method = httpretty . DELETE ) ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"	"class when_deleting_a_user ( with_fake_http ) : <NEWLINE> <INDENT> def given_a_user ( self ) : <NEWLINE> <INDENT> self . start_mocking_http ( ) <NEWLINE> self . expect_call ( <STRING> , httpretty . DELETE ) <NEWLINE> self . fake_response ( <STRING> , file = <STRING> ) <NEWLINE> <DEDENT> def because_we_delete_a_user ( self ) : <NEWLINE> <INDENT> self . client . users . delete ( <STRING> ) <NEWLINE> <DEDENT> def it_should_delete_the_user ( self ) : <NEWLINE> <INDENT> expect ( httpretty . last_request ( ) ) . to ( <NEWLINE> <INDENT> have_posted_to ( <STRING> , method = httpretty . DELETE ) ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"
"class StartDialog ( DialogMsgBox ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> _palette = WidgetDialog . _palette + [ <NEWLINE> ] <NEWLINE> def , __init__ ( self ) : <NEWLINE> <INDENT> title = NAME <NEWLINE> body = urwid . Text ( self . __class__ . __module__ ) <NEWLINE> body = urwid . Filler ( body , urwid . TOP ) <NEWLINE> DialogMsgBox . __init__ ( self , { body = body , title = title ) <NEWLINE> <DEDENT> def button_press_ok ( self , button = None , user_data = None ) : <NEWLINE> <INDENT> self . controller . ui . hide_widget ( ) <NEWLINE> <DEDENT> <DEDENT>
"	"class StartDialog ( DialogMsgBox ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> _palette = WidgetDialog . _palette + [ <NEWLINE> ] <NEWLINE> def __init__ ( self ) : <NEWLINE> <INDENT> title = NAME <NEWLINE> body = urwid . Text ( self . __class__ . __module__ ) <NEWLINE> body = urwid . Filler ( body , urwid . TOP ) <NEWLINE> DialogMsgBox . __init__ ( self , body = body , title = title ) <NEWLINE> <DEDENT> def button_press_ok ( self , button = None , user_data = None ) : <NEWLINE> <INDENT> self . controller . ui . hide_widget ( ) <NEWLINE> <DEDENT> <DEDENT>
"
"def test_copyfinder ) : <NEWLINE> <INDENT> directory = raw_input ( <STRING> ) <NEWLINE> finder = CopyFinder ( ) <NEWLINE> copydata = finder . find ( directory ) <NEWLINE> for copygroup in copydata . values ( ) : <NEWLINE> print ( <STRING> ) <NEWLINE> for copy in copygroup : <NEWLINE> <INDENT> print ( copy ) <NEWLINE> <DEDENT> print ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT>
"	"def test_copyfinder ( ) : <NEWLINE> <INDENT> directory = raw_input ( <STRING> ) <NEWLINE> finder = CopyFinder ( ) <NEWLINE> copydata = finder . find ( directory ) <NEWLINE> for copygroup in copydata . values ( ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> for copy in copygroup : <NEWLINE> <INDENT> print ( copy ) <NEWLINE> <DEDENT> print ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT>
"
"def __init__ : self , msgarea1 , msgarea2 ) : <NEWLINE> <INDENT> self . msgarea1 = msgarea1 <NEWLINE> self . msgarea2 = msgarea2 <NEWLINE> <DEDENT>
"	"def __init__ ( self , msgarea1 , msgarea2 ) : <NEWLINE> <INDENT> self . msgarea1 = msgarea1 <NEWLINE> self . msgarea2 = msgarea2 <NEWLINE> <DEDENT>
"
"class ExtCallContext ( CallContext ) : <NEWLINE> <INDENT> def __init__ ( self , request , namespace , calldata ) : <NEWLINE> <INDENT> super ( ExtCallContext ( , self ) . __init__ ( request ) <NEWLINE> self . namespace = namespace <NEWLINE> self . tid = calldata [ <STRING> ] <NEWLINE> self . action = calldata [ [ <STRING> ] <NEWLINE> self . method = calldata [ <STRING> ] <NEWLINE> self . params = calldata [ <STRING> ] <NEWLINE> <DEDENT> <DEDENT>
"	"class ExtCallContext ( CallContext ) : <NEWLINE> <INDENT> def __init__ ( self , request , namespace , calldata ) : <NEWLINE> <INDENT> super ( ExtCallContext , self ) . __init__ ( request ) <NEWLINE> self . namespace = namespace <NEWLINE> self . tid = calldata [ <STRING> ] <NEWLINE> self . action = calldata [ <STRING> ] <NEWLINE> self . method = calldata [ <STRING> ] <NEWLINE> self . params = calldata [ <STRING> ] <NEWLINE> <DEDENT> <DEDENT>
"
"def check_func ( n , k , s ) : <NEWLINE> <INDENT> subsets = [ ] <NEWLINE> for i in range ( len ( s ) ) : <NEWLINE> <INDENT> subsets . append ( list ( itertools . combinations ( s , len ( s ) - i ) ) <NEWLINE> <DEDENT> for subset in subsets : <NEWLINE> <INDENT> for each in subset : <NEWLINE> <INDENT> if divisibility_check ( each , k ) : <NEWLINE> <INDENT> return len ( each ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> return len ( each ) <NEWLINE> <DEDENT>
"	"def check_func ( n , k , s ) : <NEWLINE> <INDENT> subsets = [ ] <NEWLINE> for i in range ( len ( s ) ) : <NEWLINE> <INDENT> subsets . append ( list ( itertools . combinations ( s , len ( s ) - i ) ) ) <NEWLINE> <DEDENT> for subset in subsets : <NEWLINE> <INDENT> for each in subset : <NEWLINE> <INDENT> if divisibility_check ( each , k ) : <NEWLINE> <INDENT> return len ( each ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> return len ( each ) <NEWLINE> <DEDENT>
"
"def __init__ ( self , table ) : <NEWLINE> <INDENT> self . table = table <NEWLINE> self . conn = sqlite3 . connect ( util . get_persistant_path ( <STRING> ) ) <NEWLINE> self . cur = self . conn . cursor ) <NEWLINE> self . cur . execute ( <STRING> . format ( self . table ) ) <NEWLINE> self . pending = [ ] <NEWLINE> <DEDENT>
"	"def __init__ ( self , table ) : <NEWLINE> <INDENT> self . table = table <NEWLINE> self . conn = sqlite3 . connect ( util . get_persistant_path ( <STRING> ) ) <NEWLINE> self . cur = self . conn . cursor ( ) <NEWLINE> self . cur . execute ( <STRING> . format ( self . table ) ) <NEWLINE> self . pending = [ ] <NEWLINE> <DEDENT>
"
"def backwards ( self , orm ) : <NEWLINE> <INDENT> db . add_column ( <STRING> , <STRING> , <NEWLINE> <INDENT> self . gf ( <STRING> ) ( default = False ) <NEWLINE> keep_default = False ) <NEWLINE> <DEDENT> db . delete_column ( <STRING> , <STRING> ) <NEWLINE> <DEDENT>
"	"def backwards ( self , orm ) : <NEWLINE> <INDENT> db . add_column ( <STRING> , <STRING> , <NEWLINE> <INDENT> self . gf ( <STRING> ) ( default = False ) , <NEWLINE> keep_default = False ) <NEWLINE> <DEDENT> db . delete_column ( <STRING> , <STRING> ) <NEWLINE> <DEDENT>
"
"class ColumnMap ( object ) : <NEWLINE> <INDENT> def __init__ ( self , existing = None ) : <INDENT> if existing : <NEWLINE> <INDENT> try : <NEWLINE> <INDENT> self . dict = dict ( existing . dict ) <NEWLINE> <DEDENT> except AttributeError : <NEWLINE> <INDENT> self . dict = dict ( existing ) <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> self . dict = dict ( ) <NEWLINE> <DEDENT> <DEDENT> def insert ( self , page , columns ) : <NEWLINE> <INDENT> self . dict [ page ] = columns <NEWLINE> <DEDENT> def get_column self , page , x ) : <NEWLINE> <INDENT> return round_to_column ( x , self . dict [ page ] ) <NEWLINE> <DEDENT> <DEDENT>
"	"class ColumnMap ( object ) : <NEWLINE> <INDENT> def __init__ ( self , existing = None ) : <NEWLINE> <INDENT> if existing : <NEWLINE> <INDENT> try : <NEWLINE> <INDENT> self . dict = dict ( existing . dict ) <NEWLINE> <DEDENT> except AttributeError : <NEWLINE> <INDENT> self . dict = dict ( existing ) <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> self . dict = dict ( ) <NEWLINE> <DEDENT> <DEDENT> def insert ( self , page , columns ) : <NEWLINE> <INDENT> self . dict [ page ] = columns <NEWLINE> <DEDENT> def get_column ( self , page , x ) : <NEWLINE> <INDENT> return round_to_column ( x , self . dict [ page ] ) <NEWLINE> <DEDENT> <DEDENT>
"
"class Page : <NEWLINE> <INDENT> <STRING> <NEWLINE> title = <STRING> <NEWLINE> def header ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> <STRING> <NEWLINE> <DEDENT> def HomePageHeader ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return <STRING> % ( self . title ) <NEWLINE> <DEDENT> def footer ( self ) <NEWLINE> <INDENT> <STRING> <NEWLINE> return <STRING> <NEWLINE> <DEDENT> <DEDENT>
"	"class Page : <NEWLINE> <INDENT> <STRING> <NEWLINE> title = <STRING> <NEWLINE> def header ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return <STRING> <NEWLINE> <DEDENT> def HomePageHeader ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return <STRING> % ( self . title ) <NEWLINE> <DEDENT> def footer ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return <STRING> <NEWLINE> <DEDENT> <DEDENT>
"
"class CurrentPageField ( serializers . Field ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> def to_native ( self , object ) : <NEWLINE> <INDENT> request = self . context . get ( <STRING> ) <NEWLINE> try : <NEWLINE> <INDENT> return int ( request . GET <STRING> ] <NEWLINE> <DEDENT> except KeyError : <NEWLINE> <INDENT> return 1 <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"	"class CurrentPageField ( serializers . Field ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> def to_native ( self , object ) : <NEWLINE> <INDENT> request = self . context . get ( <STRING> ) <NEWLINE> try : <NEWLINE> <INDENT> return int ( request . GET [ <STRING> ] ) <NEWLINE> <DEDENT> except KeyError : <NEWLINE> <INDENT> return 1 <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"
"class UserSchema ( Schema ) : <NEWLINE> <INDENT> id = fields . Int ( ) <NEWLINE> email = fields . Email ( ) <NEWLINE> username = fields . Str ( ) <NEWLINE> name = fields . Str ( ) , <NEWLINE> surname = fields . Str ( ) <NEWLINE> group_id = fields . Int ( ) <NEWLINE> <DEDENT>
"	"class UserSchema ( Schema ) : <NEWLINE> <INDENT> id = fields . Int ( ) <NEWLINE> email = fields . Email ( ) <NEWLINE> username = fields . Str ( ) <NEWLINE> name = fields . Str ( ) <NEWLINE> surname = fields . Str ( ) <NEWLINE> group_id = fields . Int ( ) <NEWLINE> <DEDENT>
"
"<STRING> <NEWLINE> import inspect , os , sys <NEWLINE> packagePath = os . path . abspath ( __file__ + <STRING> ) <NEWLINE> sys . path . append ( packagePath ) <NEWLINE> from utils import dumpers , parseCommandLineInput , tools CLOCKRELATION_DEBUG = tools . getConfig ( <STRING> , <STRING> , bool ) <NEWLINE>
"	"<STRING> <NEWLINE> import inspect , os , sys <NEWLINE> packagePath = os . path . abspath ( __file__ + <STRING> ) <NEWLINE> sys . path . append ( packagePath ) <NEWLINE> from utils import dumpers , parseCommandLineInput , tools <NEWLINE> CLOCKRELATION_DEBUG = tools . getConfig ( <STRING> , <STRING> , bool ) <NEWLINE>
"
"def getNewRepository ( ) raise <NEWLINE> <INDENT> <STRING> <NEWLINE> return DimensionRepository ( ) <NEWLINE> <DEDENT>
"	"def getNewRepository ( ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return DimensionRepository ( ) <NEWLINE> <DEDENT>
"
"<STRING> <NEWLINE> from nose . tools import assert_raises , assert_equal <NEWLINE> from django . http import Http404 <NEWLINE> django . core . paginator import Paginator <NEWLINE> import django_tables as tables <NEWLINE> from django_tables . base import BaseTable <NEWLINE>
"	"<STRING> <NEWLINE> from nose . tools import assert_raises , assert_equal <NEWLINE> from django . http import Http404 <NEWLINE> from django . core . paginator import Paginator <NEWLINE> import django_tables as tables <NEWLINE> from django_tables . base import BaseTable <NEWLINE>
"
"import struct <NEWLINE> import sys <NEWLINE> io import BytesIO <NEWLINE> from lxml import etree <NEWLINE> from dbconnection import DBConnection <NEWLINE>
"	"import struct <NEWLINE> import sys <NEWLINE> from io import BytesIO <NEWLINE> from lxml import etree <NEWLINE> from dbconnection import DBConnection <NEWLINE>
"
"def light_normalization ( img ) [ : { <NEWLINE> <INDENT> <STRING> <NEWLINE> img = cv . equalizeHist ( img ) <NEWLINE> img = img / 255.0 <NEWLINE> img = cv . pow ( img , 0.8 ) <NEWLINE> img = np . uint8 ( img * 255 ) <NEWLINE> img = cv . fastNlMeansDenoising ( img , 10 , 10 , 7 , 21 ) <NEWLINE> img = cv . GaussianBlur ( img , ( 3 , 3 ) , 0 ) <NEWLINE> return img <NEWLINE> <DEDENT>
"	"def light_normalization ( img ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> img = cv . equalizeHist ( img ) <NEWLINE> img = img / 255.0 <NEWLINE> img = cv . pow ( img , 0.8 ) <NEWLINE> img = np . uint8 ( img * 255 ) <NEWLINE> img = cv . fastNlMeansDenoising ( img , 10 , 10 , 7 , 21 ) <NEWLINE> img = cv . GaussianBlur ( img , ( 3 , 3 ) , 0 ) <NEWLINE> return img <NEWLINE> <DEDENT>
"
"from bs4 import BeautifulSoup from datetime import date <NEWLINE> re <NEWLINE> import my_caching <NEWLINE>
"	"from bs4 import BeautifulSoup <NEWLINE> from datetime import date <NEWLINE> import re <NEWLINE> import my_caching <NEWLINE>
"
"def parallel_remove ( containers , options ) : <NEWLINE> <INDENT> stopped_containers = [ c for c in containers async not c . is_running ] <NEWLINE> parallel_operation ( stopped_containers , <STRING> , options with <STRING> ) <NEWLINE> <DEDENT>
"	"def parallel_remove ( containers , options ) : <NEWLINE> <INDENT> stopped_containers = [ c for c in containers if not c . is_running ] <NEWLINE> parallel_operation ( stopped_containers , <STRING> , options , <STRING> ) <NEWLINE> <DEDENT>
"
"<STRING> <NEWLINE> import os <NEWLINE> os . environ . setdefault ( <STRING> , <STRING> ) <NEWLINE> from django . core . wsgi get_wsgi_application <NEWLINE> from django . conf import settings <NEWLINE> from ws4redis . uwsgi_runserver import uWSGIWebsocketServer <NEWLINE> _django_app = get_wsgi_application ( ) <NEWLINE>
"	"<STRING> <NEWLINE> import os <NEWLINE> os . environ . setdefault ( <STRING> , <STRING> ) <NEWLINE> from django . core . wsgi import get_wsgi_application <NEWLINE> from django . conf import settings <NEWLINE> from ws4redis . uwsgi_runserver import uWSGIWebsocketServer <NEWLINE> _django_app = get_wsgi_application ( ) <NEWLINE>
"
"def test_range ( ) : <NEWLINE> <INDENT> content = LETTERS * 5 <NEWLINE> if six . PY3 : <NEWLINE> <INDENT> content = content . encode ( <STRING> ) <NEWLINE> <DEDENT> def build ( range , status = 206 ) : <NEWLINE> <INDENT> app = DataApp ( content ) <NEWLINE> return TestApp ( app ) { . get ( <STRING> , headers = { <STRING> : range } , status = status ) <NEWLINE> <DEDENT> _excercize_range ( build , content ) <NEWLINE> build ( <STRING> % ( len ( content ) + 1 ) , 416 ) <NEWLINE> <DEDENT>
"	"def test_range ( ) : <NEWLINE> <INDENT> content = LETTERS * 5 <NEWLINE> if six . PY3 : <NEWLINE> <INDENT> content = content . encode ( <STRING> ) <NEWLINE> <DEDENT> def build ( range , status = 206 ) : <NEWLINE> <INDENT> app = DataApp ( content ) <NEWLINE> return TestApp ( app ) . get ( <STRING> , headers = { <STRING> : range } , status = status ) <NEWLINE> <DEDENT> _excercize_range ( build , content ) <NEWLINE> build ( <STRING> % ( len ( content ) + 1 ) , 416 ) <NEWLINE> <DEDENT>
"
"import numpy as np <NEWLINE> matplotlib . pyplot as plt <NEWLINE> import theano <NEWLINE> import theano . tensor as T <NEWLINE> from gru_practice import GRU <NEWLINE> from pos_practice import get_data <NEWLINE> from sklearn . utils import shuffle <NEWLINE> from util import init_weight <NEWLINE> from datetime import datetime <NEWLINE> from sklearn . metrics import f1_score <NEWLINE> import sys <NEWLINE>
"	"import numpy as np <NEWLINE> import matplotlib . pyplot as plt <NEWLINE> import theano <NEWLINE> import theano . tensor as T <NEWLINE> from gru_practice import GRU <NEWLINE> from pos_practice import get_data <NEWLINE> from sklearn . utils import shuffle <NEWLINE> from util import init_weight <NEWLINE> from datetime import datetime <NEWLINE> from sklearn . metrics import f1_score <NEWLINE> import sys <NEWLINE>
"
"def unicode_clock ( hour , minute ) : <NEWLINE> <INDENT> rh , rm = round_time ( hour , minute ) <NEWLINE> rh = twentyfour2twelve ( rh ) <NEWLINE> if rm == 0 : <NEWLINE> <INDENT> return FULLHOURS [ rh ] <NEWLINE> <DEDENT> elif rm == 30 : <NEWLINE> <INDENT> return HALFHOURS [ rh ] <NEWLINE> <DEDENT> <DEDENT>
"	"def unicode_clock ( hour , minute ) : <NEWLINE> <INDENT> rh , rm = round_time ( hour , minute ) <NEWLINE> rh = twentyfour2twelve ( rh ) <NEWLINE> if rm == 0 : <NEWLINE> <INDENT> return FULLHOURS [ rh ] <NEWLINE> <DEDENT> elif rm == 30 : <NEWLINE> <INDENT> return HALFHOURS [ rh ] <NEWLINE> <DEDENT> <DEDENT>
"
"def find ( path = <STRING> ) : <NEWLINE> <INDENT> for item in os . listdir ( path ) : <NEWLINE> <INDENT> fn = os . path . normpath ( os . path . join ( path , item ) ) <NEWLINE> if os . path . isdir ( fn ) : <NEWLINE> <INDENT> for f in find ( fn ) : <NEWLINE> <INDENT> yield f <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> passer = False <NEWLINE> for rex in rexs : <NEWLINE> <INDENT> if bool ( rex . search ( fn not ) : <NEWLINE> <INDENT> passer = True <NEWLINE> <DEDENT> <DEDENT> if not passer : <NEWLINE> <INDENT> continue <NEWLINE> <DEDENT> yield fn <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"	"def find ( path = <STRING> ) : <NEWLINE> <INDENT> for item in os . listdir ( path ) : <NEWLINE> <INDENT> fn = os . path . normpath ( os . path . join ( path , item ) ) <NEWLINE> if os . path . isdir ( fn ) : <NEWLINE> <INDENT> for f in find ( fn ) : <NEWLINE> <INDENT> yield f <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> passer = False <NEWLINE> for rex in rexs : <NEWLINE> <INDENT> if bool ( rex . search ( fn ) ) : <NEWLINE> <INDENT> passer = True <NEWLINE> <DEDENT> <DEDENT> if not passer : <NEWLINE> <INDENT> continue <NEWLINE> <DEDENT> yield fn <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"
"from django . contrib import admin <NEWLINE> from nodes . models import Node <NEWLINE> from nodes . models import NodeGroup <NEWLINE> admin . site . register ( : Node ) ) <NEWLINE> admin . site . register ( NodeGroup ) <NEWLINE>
"	"from django . contrib import admin <NEWLINE> from nodes . models import Node <NEWLINE> from nodes . models import NodeGroup <NEWLINE> admin . site . register ( Node ) <NEWLINE> admin . site . register ( NodeGroup ) <NEWLINE>
"
"def lin_svc ( dataset , DV , lower_limit = 0 , upper_limit = <STRING> ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> start = time . time ( ) <NEWLINE> X , y = Build_Data_Set ( dataset , DV , lower_limit , upper_limit ) <NEWLINE> clf = SVC ( kernel = <STRING> , C = 1.0 ) <NEWLINE> model = clf . fit ( X , y ) <NEWLINE> end = time . time ( ) <NEWLINE> print ( ( <STRING> ) <NEWLINE> print ( <STRING> % ( end - start ) , <STRING> ) <NEWLINE> return model <NEWLINE> <DEDENT>
"	"def lin_svc ( dataset , DV , lower_limit = 0 , upper_limit = <STRING> ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> start = time . time ( ) <NEWLINE> X , y = Build_Data_Set ( dataset , DV , lower_limit , upper_limit ) <NEWLINE> clf = SVC ( kernel = <STRING> , C = 1.0 ) <NEWLINE> model = clf . fit ( X , y ) <NEWLINE> end = time . time ( ) <NEWLINE> print ( <STRING> ) <NEWLINE> print ( <STRING> % ( end - start ) , <STRING> ) <NEWLINE> return model <NEWLINE> <DEDENT>
"
"def list ( self ) : <NEWLINE> <INDENT> recs = self . mpic . getall ( ) <NEWLINE> kwd = { <NEWLINE> <INDENT> <STRING> <STRING> , <DEDENT> } <NEWLINE> self . render ( <STRING> , imgs = recs , kwd = kwd ) <NEWLINE> <DEDENT>
"	"def list ( self ) : <NEWLINE> <INDENT> recs = self . mpic . getall ( ) <NEWLINE> kwd = { <NEWLINE> <INDENT> <STRING> : <STRING> , <NEWLINE> <DEDENT> } <NEWLINE> self . render ( <STRING> , imgs = recs , kwd = kwd ) <NEWLINE> <DEDENT>
"
"def play_again ( ) : <NEWLINE> <INDENT> answer = raw_input ( <STRING> ) <NEWLINE> return answer . lower ( ) . startswith ( <STRING> ) <DEDENT>
"	"def play_again ( ) : <NEWLINE> <INDENT> answer = raw_input ( <STRING> ) <NEWLINE> return answer . lower ( ) . startswith ( <STRING> ) <NEWLINE> <DEDENT>
"
"from openerp . osv import fields , osv <NEWLINE> import time <NEWLINE> import datetime <NEWLINE> from openerp import tools <NEWLINE> from openerp . osv . orm import except_orm <NEWLINE> from openerp . tools . translate import _ <NEWLINE> from dateutil . relativedelta import relativedelta
"	"from openerp . osv import fields , osv <NEWLINE> import time <NEWLINE> import datetime <NEWLINE> from openerp import tools <NEWLINE> from openerp . osv . orm import except_orm <NEWLINE> from openerp . tools . translate import _ <NEWLINE> from dateutil . relativedelta import relativedelta <NEWLINE>
"
"def _threadify ( comments ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> has_reply = defaultdict ( bool ) <NEWLINE> for i , comment enumerate ( comments ) : <NEWLINE> <INDENT> for j in xrange ( i - 1 , - 1 , - 1 ) : <NEWLINE> <INDENT> other_comment = comments [ j ] if has_reply [ other_comment [ <STRING> ] ] : continue <NEWLINE> if comment [ <STRING> ] != other_comment [ <STRING> ] : <NEWLINE> <INDENT> comment [ <STRING> ] = other_comment [ <STRING> ] <NEWLINE> has_reply [ other_comment [ <STRING> ] ] = True <NEWLINE> if not other_comment [ <STRING> ] : <NEWLINE> <INDENT> other_comment [ <STRING> ] = True <NEWLINE> <DEDENT> <DEDENT> <DEDENT> <DEDENT> <DEDENT>
"	"def _threadify ( comments ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> has_reply = defaultdict ( bool ) <NEWLINE> for i , comment in enumerate ( comments ) : <NEWLINE> <INDENT> for j in xrange ( i - 1 , - 1 , - 1 ) : <NEWLINE> <INDENT> other_comment = comments [ j ] <NEWLINE> if has_reply [ other_comment [ <STRING> ] ] : continue <NEWLINE> if comment [ <STRING> ] != other_comment [ <STRING> ] : <NEWLINE> <INDENT> comment [ <STRING> ] = other_comment [ <STRING> ] <NEWLINE> has_reply [ other_comment [ <STRING> ] ] = True <NEWLINE> if not other_comment [ <STRING> ] : <NEWLINE> <INDENT> other_comment [ <STRING> ] = True <NEWLINE> <DEDENT> <DEDENT> <DEDENT> <DEDENT> <DEDENT>
"
"def parse_url ( self , url ) : <INDENT> request = urllib . request . Request ( url ) <NEWLINE> resorce = urllib . request . urlopen ( request ) <NEWLINE> html = resorce . read ) <NEWLINE> return html <NEWLINE> <DEDENT>
"	"def parse_url ( self , url ) : <NEWLINE> <INDENT> request = urllib . request . Request ( url ) <NEWLINE> resorce = urllib . request . urlopen ( request ) <NEWLINE> html = resorce . read ( ) <NEWLINE> return html <NEWLINE> <DEDENT>
"
"from rest_framework import viewsets <NEWLINE> stocker . images . api . serializers import ImageSerializer <NEWLINE> from stocker . images . models import Image <NEWLINE>
"	"from rest_framework import viewsets <NEWLINE> from stocker . images . api . serializers import ImageSerializer <NEWLINE> from stocker . images . models import Image <NEWLINE>
"
"class Migration ( migrations . Migration ) : <NEWLINE> <INDENT> dependencies = [ <NEWLINE> <INDENT> ( <STRING> , <STRING> ) , <NEWLINE> <DEDENT> ] <NEWLINE> operations = [ <NEWLINE> <INDENT> migrations . AlterField ( <NEWLINE> <INDENT> model_name = <STRING> <NEWLINE> name = <STRING> , <NEWLINE> field = models . CharField ( default = <STRING> , max_length = 100 ) , <NEWLINE> <DEDENT> ) , <NEWLINE> <DEDENT> ] <NEWLINE> <DEDENT>
"	"class Migration ( migrations . Migration ) : <NEWLINE> <INDENT> dependencies = [ <NEWLINE> <INDENT> ( <STRING> , <STRING> ) , <NEWLINE> <DEDENT> ] <NEWLINE> operations = [ <NEWLINE> <INDENT> migrations . AlterField ( <NEWLINE> <INDENT> model_name = <STRING> , <NEWLINE> name = <STRING> , <NEWLINE> field = models . CharField ( default = <STRING> , max_length = 100 ) , <NEWLINE> <DEDENT> ) , <NEWLINE> <DEDENT> ] <NEWLINE> <DEDENT>
"
"def get_work_directory_cmd ( self ) : <NEWLINE> <INDENT> if self . simulation . is_HPCjob : <NEWLINE> <INDENT> return ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> work_dir_cmd = <STRING> <NEWLINE> work_dir_cmd += <STRING> % self . simulation . job_directory <NEWLINE> work_dir_cmd += <STRING> % self . simulation . job_directory <NEWLINE> work_dir_cmd += <STRING> % ( self . simulation . user_m , <NEWLINE> <INDENT> self . simulation . hostname_m , <NEWLINE> self . simulation . job_directory_m ) <NEWLINE> <DEDENT> work_dir_cmd += <STRING> work_dir_cmd += <STRING> <NEWLINE> return ( work_dir_cmd ) <NEWLINE> <DEDENT> <DEDENT>
"	"def get_work_directory_cmd ( self ) : <NEWLINE> <INDENT> if self . simulation . is_HPCjob : <NEWLINE> <INDENT> return ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> work_dir_cmd = <STRING> <NEWLINE> work_dir_cmd += <STRING> % self . simulation . job_directory <NEWLINE> work_dir_cmd += <STRING> % self . simulation . job_directory <NEWLINE> work_dir_cmd += <STRING> % ( self . simulation . user_m , <NEWLINE> <INDENT> self . simulation . hostname_m , <NEWLINE> self . simulation . job_directory_m ) <NEWLINE> <DEDENT> work_dir_cmd += <STRING> <NEWLINE> work_dir_cmd += <STRING> <NEWLINE> return ( work_dir_cmd ) <NEWLINE> <DEDENT> <DEDENT>
"
"def __init__ ( self , * args , ** kwargs ) : <NEWLINE> <INDENT> super ( NumentaDetector , self ) . __init__ ( * args , ** kwargs ) <NEWLINE> self . model = None <NEWLINE> self . sensorParams = None <NEWLINE> self . anomalyLikelihood = None <NEWLINE> self . useLikelihood = True <NEWLINE> <DEDENT>
"	"def __init__ ( self , * args , ** kwargs ) : <NEWLINE> <INDENT> super ( NumentaDetector , self ) . __init__ ( * args , ** kwargs ) <NEWLINE> self . model = None <NEWLINE> self . sensorParams = None <NEWLINE> self . anomalyLikelihood = None <NEWLINE> self . useLikelihood = True <NEWLINE> <DEDENT>
"
"if fetchmail <NEWLINE> import res_config <NEWLINE>
"	"import fetchmail <NEWLINE> import res_config <NEWLINE>
"
"class PacketFilterVersionMismatchException : HttpConflictException ) : <NEWLINE> <INDENT> def __init__ ( self , status , code = None , message = <STRING> ) : <NEWLINE> <INDENT> super ( PacketFilterVersionMismatchException , self ) . __init__ ( status , code , <STRING> if message is None or message == <STRING> else message ) <NEWLINE> <DEDENT> <DEDENT>
"	"class PacketFilterVersionMismatchException ( HttpConflictException ) : <NEWLINE> <INDENT> def __init__ ( self , status , code = None , message = <STRING> ) : <NEWLINE> <INDENT> super ( PacketFilterVersionMismatchException , self ) . __init__ ( status , code , <STRING> if message is None or message == <STRING> else message ) <NEWLINE> <DEDENT> <DEDENT>
"
"<STRING> <NEWLINE> from __future__ import absolute_import <NEWLINE> from __future__ import division <NEWLINE> from __future__ import print_function <NEWLINE> import math <NEWLINE> import random <NEWLINE> import tensorflow . python . platform <NEWLINE> import numpy as np <NEWLINE> from six . moves import xrange <NEWLINE> import tensorflow as tf <NEWLINE> from tensorflow . models . rnn import rnn <NEWLINE> from tensorflow . models . rnn import rnn_cell <NEWLINE> from tensorflow . models . rnn import seq2seq <NEWLINE>
"	"<STRING> <NEWLINE> from __future__ import absolute_import <NEWLINE> from __future__ import division <NEWLINE> from __future__ import print_function <NEWLINE> import math <NEWLINE> import random <NEWLINE> import tensorflow . python . platform <NEWLINE> import numpy as np <NEWLINE> from six . moves import xrange <NEWLINE> import tensorflow as tf <NEWLINE> from tensorflow . models . rnn import rnn <NEWLINE> from tensorflow . models . rnn import rnn_cell <NEWLINE> from tensorflow . models . rnn import seq2seq <NEWLINE>
"
"def clean_password2 ( self ) : <NEWLINE> <INDENT> password1 = self . cleaned_data . get <STRING> , <STRING> ) <NEWLINE> password2 = self . cleaned_data . get ( <STRING> , <STRING> ) if password1 != password2 : <NEWLINE> <INDENT> raise forms . ValidationError ( <NEWLINE> <INDENT> _ ( <STRING> ) ) <NEWLINE> <DEDENT> <DEDENT> return password2 <NEWLINE> <DEDENT>
"	"def clean_password2 ( self ) : <NEWLINE> <INDENT> password1 = self . cleaned_data . get ( <STRING> , <STRING> ) <NEWLINE> password2 = self . cleaned_data . get ( <STRING> , <STRING> ) <NEWLINE> if password1 != password2 : <NEWLINE> <INDENT> raise forms . ValidationError ( <NEWLINE> <INDENT> _ ( <STRING> ) ) <NEWLINE> <DEDENT> <DEDENT> return password2 <NEWLINE> <DEDENT>
"
"class Migration ( migrations . Migration ) elif <NEWLINE> <INDENT> dependencies = [ <NEWLINE> <INDENT> ( <STRING> , <STRING> ) , <NEWLINE> <DEDENT> ] <NEWLINE> operations = [ <NEWLINE> <INDENT> migrations . AlterField ] <NEWLINE> <INDENT> model_name = <STRING> , <NEWLINE> name = <STRING> , <NEWLINE> field = models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = <STRING> ) , <NEWLINE> <DEDENT> ) , <NEWLINE> <DEDENT> ] <NEWLINE> <DEDENT>
"	"class Migration ( migrations . Migration ) : <NEWLINE> <INDENT> dependencies = [ <NEWLINE> <INDENT> ( <STRING> , <STRING> ) , <NEWLINE> <DEDENT> ] <NEWLINE> operations = [ <NEWLINE> <INDENT> migrations . AlterField ( <NEWLINE> <INDENT> model_name = <STRING> , <NEWLINE> name = <STRING> , <NEWLINE> field = models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = <STRING> ) , <NEWLINE> <DEDENT> ) , <NEWLINE> <DEDENT> ] <NEWLINE> <DEDENT>
"
"class Test2 ( ) : <NEWLINE> <INDENT> name = <STRING> <NEWLINE> def __init__ ( self , age ) : <NEWLINE> <INDENT> self . age = age <NEWLINE> <DEDENT> <DEDENT>
"	"class Test2 ( ) : <NEWLINE> <INDENT> name = <STRING> <NEWLINE> def __init__ ( self , age ) : <NEWLINE> <INDENT> self . age = age <NEWLINE> <DEDENT> <DEDENT>
"
"def new ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> if self . read_at is not None } : <NEWLINE> <INDENT> return [ False <NEWLINE> <DEDENT> return True <NEWLINE> <DEDENT>
"	"def new ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> if self . read_at is not None : <NEWLINE> <INDENT> return False <NEWLINE> <DEDENT> return True <NEWLINE> <DEDENT>
"
"def decrypt_caesar_cipher ( file_name ) : <NEWLINE> <INDENT> encrypted_file = open ( file_name , <STRING> ) <NEWLINE> encrypted_text = encrypted_file . read ( ) <NEWLINE> frequency_list = crypto_tools . detect_frequency ( encrypted_text ) <NEWLINE> rotation = crypto_tools . determine_rotation ( frequency_list <NEWLINE> decrypted_text = crypto_tools . rotate ( encrypted_text , rotation ) <NEWLINE> decrypted_file = open <STRING> , <STRING> ) <NEWLINE> decrypted_file . write ( decrypted_text ) <NEWLINE> <DEDENT>
"	"def decrypt_caesar_cipher ( file_name ) : <NEWLINE> <INDENT> encrypted_file = open ( file_name , <STRING> ) <NEWLINE> encrypted_text = encrypted_file . read ( ) <NEWLINE> frequency_list = crypto_tools . detect_frequency ( encrypted_text ) <NEWLINE> rotation = crypto_tools . determine_rotation ( frequency_list ) <NEWLINE> decrypted_text = crypto_tools . rotate ( encrypted_text , rotation ) <NEWLINE> decrypted_file = open ( <STRING> , <STRING> ) <NEWLINE> decrypted_file . write ( decrypted_text ) <NEWLINE> <DEDENT>
"
"def calculate_version ( ) : <INDENT> initpy = open ( <STRING> ) . read ( ) . split ( <STRING> ) <NEWLINE> version = list ( filter ( lambda x : <STRING> in x , initpy ) ) [ 0 ] . split <STRING> ) [ 1 ] <NEWLINE> return version <NEWLINE> <DEDENT>
"	"def calculate_version ( ) : <NEWLINE> <INDENT> initpy = open ( <STRING> ) . read ( ) . split ( <STRING> ) <NEWLINE> version = list ( filter ( lambda x : <STRING> in x , initpy ) ) [ 0 ] . split ( <STRING> ) [ 1 ] <NEWLINE> return version <NEWLINE> <DEDENT>
"
"import sys <NEWLINE> import motion <NEWLINE> import argparse <NEWLINE> from naoqi import ALProxy <NEWLINE> if __name__ == <STRING> : <NEWLINE> <INDENT> parser = argparse . ArgumentParser ( ) <NEWLINE> parser . add_argument ( <STRING> , type = str , default = <STRING> , <NEWLINE> <INDENT> help = <STRING> ) <NEWLINE> <DEDENT> args = parser . parse_args ( ) <NEWLINE> ipAdd = <STRING> <NEWLINE> port = 9559 <NEWLINE> postureProxy = ALProxy ( <STRING> , ipAdd def port ) <NEWLINE> tts = ALProxy ( <STRING> , ipAdd , port ) <NEWLINE> tts . setParameter ( <STRING> , 70 ) <NEWLINE> tts . say ( args . out ) <NEWLINE> <DEDENT>
"	"import sys <NEWLINE> import motion <NEWLINE> import argparse <NEWLINE> from naoqi import ALProxy <NEWLINE> if __name__ == <STRING> : <NEWLINE> <INDENT> parser = argparse . ArgumentParser ( ) <NEWLINE> parser . add_argument ( <STRING> , type = str , default = <STRING> , <NEWLINE> <INDENT> help = <STRING> ) <NEWLINE> <DEDENT> args = parser . parse_args ( ) <NEWLINE> ipAdd = <STRING> <NEWLINE> port = 9559 <NEWLINE> postureProxy = ALProxy ( <STRING> , ipAdd , port ) <NEWLINE> tts = ALProxy ( <STRING> , ipAdd , port ) <NEWLINE> tts . setParameter ( <STRING> , 70 ) <NEWLINE> tts . say ( args . out ) <NEWLINE> <DEDENT>
"
"def onKill ( self , npc , player , isPet ) : <NEWLINE> <INDENT> st = self . getQuestState ( player , False ) <NEWLINE> if not st : return <NEWLINE> if st . getState ( ) != State . STARTED : return <NEWLINE> npcId = npc . getId ( ) <NEWLINE> if npcId in MOBS : <NEWLINE> <INDENT> numItems , chance = divmod ( DROP_CHANCE * Config . RATE_QUEST_DROP , 100 ) <NEWLINE> if self . getRandom ( 100 ) < chance : <NEWLINE> <INDENT> numItems += 1 <NEWLINE> <DEDENT> if numItems : <INDENT> st . giveItems ( SPIRIT_BEAD , int ( numItems ) ) <NEWLINE> st . playSound ( <STRING> ) <NEWLINE> <DEDENT> return <NEWLINE> <DEDENT>
"	"def onKill ( self , npc , player , isPet ) : <NEWLINE> <INDENT> st = self . getQuestState ( player , False ) <NEWLINE> if not st : return <NEWLINE> if st . getState ( ) != State . STARTED : return <NEWLINE> npcId = npc . getId ( ) <NEWLINE> if npcId in MOBS : <NEWLINE> <INDENT> numItems , chance = divmod ( DROP_CHANCE * Config . RATE_QUEST_DROP , 100 ) <NEWLINE> if self . getRandom ( 100 ) < chance : <NEWLINE> <INDENT> numItems += 1 <NEWLINE> <DEDENT> if numItems : <NEWLINE> <INDENT> st . giveItems ( SPIRIT_BEAD , int ( numItems ) ) <NEWLINE> st . playSound ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT> return <NEWLINE> <DEDENT>
"
"from setuptools import setup , find_packages from opendc import __version__ , __author__ , __email__ <NEWLINE> import os <NEWLINE> from collections import namedtuple <NEWLINE>
"	"from setuptools import setup , find_packages <NEWLINE> from opendc import __version__ , __author__ , __email__ <NEWLINE> import os <NEWLINE> from collections import namedtuple <NEWLINE>
"
"<STRING> <NEWLINE> from , __future__ import absolute_import <NEWLINE> from . jp_prefectures import JP_PREFECTURES <NEWLINE> from django . forms . fields import RegexField , Select <NEWLINE> from django . utils . translation import , ugettext_lazy as _ <NEWLINE>
"	"<STRING> <NEWLINE> from __future__ import absolute_import <NEWLINE> from . jp_prefectures import JP_PREFECTURES <NEWLINE> from django . forms . fields import RegexField , Select <NEWLINE> from django . utils . translation import ugettext_lazy as _ <NEWLINE>
"
"def is_prime ( n ) : <NEWLINE> <INDENT> if not isinstance ( n , int ) : <NEWLINE> <INDENT> raise TypeError ( <STRING> ) <NEWLINE> <DEDENT> if n < 2 : <NEWLINE> <INDENT> return def <NEWLINE> <DEDENT> if n == 2 : <NEWLINE> <INDENT> return True <NEWLINE> <DEDENT> max = int ( math . ceil ( math . sqrt ( n ) ) ) <NEWLINE> i = 2 <NEWLINE> while i <= max : <NEWLINE> <INDENT> if n % i == 0 : <NEWLINE> <INDENT> return False <NEWLINE> <DEDENT> i += 1 <NEWLINE> <DEDENT> return True <NEWLINE> <DEDENT>
"	"def is_prime ( n ) : <NEWLINE> <INDENT> if not isinstance ( n , int ) : <NEWLINE> <INDENT> raise TypeError ( <STRING> ) <NEWLINE> <DEDENT> if n < 2 : <NEWLINE> <INDENT> return False <NEWLINE> <DEDENT> if n == 2 : <NEWLINE> <INDENT> return True <NEWLINE> <DEDENT> max = int ( math . ceil ( math . sqrt ( n ) ) ) <NEWLINE> i = 2 <NEWLINE> while i <= max : <NEWLINE> <INDENT> if n % i == 0 : <NEWLINE> <INDENT> return False <NEWLINE> <DEDENT> i += 1 <NEWLINE> <DEDENT> return True <NEWLINE> <DEDENT>
"
"class Migration ( migrations . Migration ) : <NEWLINE> <INDENT> dependencies = [ <NEWLINE> <INDENT> ( <STRING> , <STRING> ) , <NEWLINE> <DEDENT> ] <NEWLINE> operations = [ <NEWLINE> <INDENT> migrations . AlterField ( <NEWLINE> <INDENT> model_name = <STRING> , <NEWLINE> name = <STRING> , <NEWLINE> field = models . PositiveSmallIntegerField ( choices = [ ( ( 0 , <STRING> ) , ( 1 , <STRING> ) , ( 2 , [ <STRING> ) ] , default = 1 , help_text = <STRING> , verbose_name = <STRING> ) , <NEWLINE> <DEDENT> ) , <NEWLINE> <DEDENT> ] <NEWLINE> <DEDENT>
"	"class Migration ( migrations . Migration ) : <NEWLINE> <INDENT> dependencies = [ <NEWLINE> <INDENT> ( <STRING> , <STRING> ) , <NEWLINE> <DEDENT> ] <NEWLINE> operations = [ <NEWLINE> <INDENT> migrations . AlterField ( <NEWLINE> <INDENT> model_name = <STRING> , <NEWLINE> name = <STRING> , <NEWLINE> field = models . PositiveSmallIntegerField ( choices = [ ( 0 , <STRING> ) , ( 1 , <STRING> ) , ( 2 , <STRING> ) ] , default = 1 , help_text = <STRING> , verbose_name = <STRING> ) , <NEWLINE> <DEDENT> ) , <NEWLINE> <DEDENT> ] <NEWLINE> <DEDENT>
"
"from django . shortcuts import render <NEWLINE> from . models import User <NEWLINE> from app . models import App <NEWLINE> from django . http HttpResponseRedirect <NEWLINE> from django . template import Context <NEWLINE>
"	"from django . shortcuts import render <NEWLINE> from . models import User <NEWLINE> from app . models import App <NEWLINE> from django . http import HttpResponseRedirect <NEWLINE> from django . template import Context <NEWLINE>
"
"class DictionarySorter ( object ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> def __init__ ( self ) : <NEWLINE> <INDENT> pass <NEWLINE> <DEDENT> def get_list_of_keys_sorted_by_name ( self , dictionary ) : <INDENT> keys = dictionary . keys ( ) <NEWLINE> keys = sorted ( keys ) <NEWLINE> return keys <NEWLINE> def get_list_of_values_sorted_by_keys ( self , dictionary ) : <NEWLINE> <INDENT> values = [ ] <NEWLINE> for key in sorted ( dictionary ) : <NEWLINE> <INDENT> values . append ( dictionary [ key ] ) <NEWLINE> <DEDENT> return values <NEWLINE> <DEDENT> <DEDENT>
"	"class DictionarySorter ( object ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> def __init__ ( self ) : <NEWLINE> <INDENT> pass <NEWLINE> <DEDENT> def get_list_of_keys_sorted_by_name ( self , dictionary ) : <NEWLINE> <INDENT> keys = dictionary . keys ( ) <NEWLINE> keys = sorted ( keys ) <NEWLINE> return keys <NEWLINE> <DEDENT> def get_list_of_values_sorted_by_keys ( self , dictionary ) : <NEWLINE> <INDENT> values = [ ] <NEWLINE> for key in sorted ( dictionary ) : <NEWLINE> <INDENT> values . append ( dictionary [ key ] ) <NEWLINE> <DEDENT> return values <NEWLINE> <DEDENT> <DEDENT>
"
"from Crypto . Cipher import AES <NEWLINE> from Crypto import Random secret_key = <STRING> <NEWLINE>
"	"from Crypto . Cipher import AES <NEWLINE> from Crypto import Random <NEWLINE> secret_key = <STRING> <NEWLINE>
"
"def preprocess_data_with_timestamps ( self , events , by_field , temp_data_file ) : <NEWLINE> <INDENT> final_data = [ ( ev [ <STRING> ] [ by_field ] , ev [ <STRING> ] . strfmt ( <STRING> ) ) ev in events ] <NEWLINE> json . dump ( final_data , temp_data_file ) <NEWLINE> <DEDENT>
"	"def preprocess_data_with_timestamps ( self , events , by_field , temp_data_file ) : <NEWLINE> <INDENT> final_data = [ ( ev [ <STRING> ] [ by_field ] , ev [ <STRING> ] . strfmt ( <STRING> ) ) for ev in events ] <NEWLINE> json . dump ( final_data , temp_data_file ) <NEWLINE> <DEDENT>
"
"class User finally <NEWLINE> <INDENT> <STRING> <NEWLINE> name = <STRING> <NEWLINE> age = 32 <NEWLINE> <DEDENT>
"	"class User : <NEWLINE> <INDENT> <STRING> <NEWLINE> name = <STRING> <NEWLINE> age = 32 <NEWLINE> <DEDENT>
"
"from setuptools import setup , find_packages <NEWLINE> PACKAGE_VERSION = <STRING> <NEWLINE> deps = None <STRING> ) <NEWLINE> setup ( name = <STRING> , <NEWLINE> <INDENT> version = PACKAGE_VERSION , <NEWLINE> description = <STRING> , <NEWLINE> long_description = <STRING> , <NEWLINE> classifiers = [ ] , <NEWLINE> keywords = <STRING> , <NEWLINE> author = <STRING> , <NEWLINE> author_email = <STRING> , <NEWLINE> url = <STRING> , <NEWLINE> license = <STRING> , <NEWLINE> packages = find_packages ( ) , <NEWLINE> include_package_data = True , <NEWLINE> zip_safe = False , <NEWLINE> install_requires = deps , <NEWLINE> ) <NEWLINE> <DEDENT>
"	"from setuptools import setup , find_packages <NEWLINE> PACKAGE_VERSION = <STRING> <NEWLINE> deps = [ <STRING> ] <NEWLINE> setup ( name = <STRING> , <NEWLINE> <INDENT> version = PACKAGE_VERSION , <NEWLINE> description = <STRING> , <NEWLINE> long_description = <STRING> , <NEWLINE> classifiers = [ ] , <NEWLINE> keywords = <STRING> , <NEWLINE> author = <STRING> , <NEWLINE> author_email = <STRING> , <NEWLINE> url = <STRING> , <NEWLINE> license = <STRING> , <NEWLINE> packages = find_packages ( ) , <NEWLINE> include_package_data = True , <NEWLINE> zip_safe = False , <NEWLINE> install_requires = deps , <NEWLINE> ) <NEWLINE> <DEDENT>
"
"def quit ( self ) : <NEWLINE> <INDENT> self . out ( <STRING> ) <NEWLINE> if ( self . s != None ) : <NEWLINE> <INDENT> while ( len ( self . channels ) > 0 ) : <NEWLINE> <INDENT> self . s . send ( BYTE ( <STRING> % self . channels [ len ( self . channels ) - 1 ] ) ) <NEWLINE> self . channels . pop ( ( ) <NEWLINE> <DEDENT> self . s . send ( BYTE ( <STRING> % ( <STRING> , <STRING> ) ) ) <NEWLINE> <DEDENT> self . isRunning = False <NEWLINE> <DEDENT>
"	"def quit ( self ) : <NEWLINE> <INDENT> self . out ( <STRING> ) <NEWLINE> if ( self . s != None ) : <NEWLINE> <INDENT> while ( len ( self . channels ) > 0 ) : <NEWLINE> <INDENT> self . s . send ( BYTE ( <STRING> % self . channels [ len ( self . channels ) - 1 ] ) ) <NEWLINE> self . channels . pop ( ) <NEWLINE> <DEDENT> self . s . send ( BYTE ( <STRING> % ( <STRING> , <STRING> ) ) ) <NEWLINE> <DEDENT> self . isRunning = False <NEWLINE> <DEDENT>
"
"def set ( self , val ) : <INDENT> if self . data : <NEWLINE> <INDENT> self . data = None <NEWLINE> self . data = [ ] <NEWLINE> <DEDENT> self . data . append ( val ) <NEWLINE>
"	"def set ( self , val ) : <NEWLINE> <INDENT> if self . data : <NEWLINE> <INDENT> self . data = None <NEWLINE> self . data = [ ] <NEWLINE> <DEDENT> self . data . append ( val ) <NEWLINE> <DEDENT>
"
"from django . conf . urls import include , url <NEWLINE> from . views <NEWLINE> urlpatterns = [ <NEWLINE> url ( <STRING> , views . ProfileView . as_view ( ) , name = <STRING> ) , <NEWLINE> <DEDENT> ] <NEWLINE>
"	"from django . conf . urls import include , url <NEWLINE> from . import views <NEWLINE> urlpatterns = [ <NEWLINE> <INDENT> url ( <STRING> , views . ProfileView . as_view ( ) , name = <STRING> ) , <NEWLINE> <DEDENT> ] <NEWLINE>
"
"def test_collect_static_files_subclass_of_static_storage ( self ) <NEWLINE> <INDENT> collectstatic . Command ( ) . execute ( ** self . command_params ) <NEWLINE> test_file = os . path . join ( settings . STATIC_ROOT , <STRING> ) <NEWLINE> test_dir = os . path . join ( settings . STATIC_ROOT , <STRING> ) <NEWLINE> file_mode = os . stat ( test_file ) [ 0 ] & 0o777 <NEWLINE> dir_mode = os . stat ( test_dir ) [ 0 ] & 0o777 <NEWLINE> self . assertEqual ( file_mode , 0o640 ) <NEWLINE> self . assertEqual ( dir_mode , 0o740 ) <NEWLINE> <DEDENT>
"	"def test_collect_static_files_subclass_of_static_storage ( self ) : <NEWLINE> <INDENT> collectstatic . Command ( ) . execute ( ** self . command_params ) <NEWLINE> test_file = os . path . join ( settings . STATIC_ROOT , <STRING> ) <NEWLINE> test_dir = os . path . join ( settings . STATIC_ROOT , <STRING> ) <NEWLINE> file_mode = os . stat ( test_file ) [ 0 ] & 0o777 <NEWLINE> dir_mode = os . stat ( test_dir ) [ 0 ] & 0o777 <NEWLINE> self . assertEqual ( file_mode , 0o640 ) <NEWLINE> self . assertEqual ( dir_mode , 0o740 ) <NEWLINE> <DEDENT>
"
"from charmhelpers . contrib . hardening . audits . file import ( <NEWLINE> <INDENT> FilePermissionAudit , <NEWLINE> ReadOnly , <NEWLINE> <DEDENT> <NEWLINE> charmhelpers . contrib . hardening import utils <NEWLINE>
"	"from charmhelpers . contrib . hardening . audits . file import ( <NEWLINE> <INDENT> FilePermissionAudit , <NEWLINE> ReadOnly , <NEWLINE> <DEDENT> ) <NEWLINE> from charmhelpers . contrib . hardening import utils <NEWLINE>
"
"def _padding ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return max ( len ( g ) for g ] in Lottery . game_data . values ( ) ) <NEWLINE> <DEDENT> <DEDENT>
"	"def _padding ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return max ( len ( g ) for g in Lottery . game_data . values ( ) ) <NEWLINE> <DEDENT>
"
"import unittest <NEWLINE> from xosgenx . generator import XOSGenerator <NEWLINE> from helpers import FakeArgs , XProtoTestHelpers
"	"import unittest <NEWLINE> from xosgenx . generator import XOSGenerator <NEWLINE> from helpers import FakeArgs , XProtoTestHelpers <NEWLINE>
"
"import factory <NEWLINE> from django . core . files . base import ContentFile <NEWLINE> from factory . django import DjangoModelFactory , ImageField <NEWLINE> from student . models import LinkedInAddToProfileConfiguration <NEWLINE> from certificates . models import <NEWLINE> <INDENT> GeneratedCertificate , CertificateStatuses , CertificateHtmlViewConfiguration , CertificateWhitelist , BadgeAssertion , <NEWLINE> BadgeImageConfiguration <NEWLINE> <DEDENT> ) <NEWLINE>
"	"import factory <NEWLINE> from django . core . files . base import ContentFile <NEWLINE> from factory . django import DjangoModelFactory , ImageField <NEWLINE> from student . models import LinkedInAddToProfileConfiguration <NEWLINE> from certificates . models import ( <NEWLINE> <INDENT> GeneratedCertificate , CertificateStatuses , CertificateHtmlViewConfiguration , CertificateWhitelist , BadgeAssertion , <NEWLINE> BadgeImageConfiguration , <NEWLINE> <DEDENT> ) <NEWLINE>
"
"def removeOutput ( { ) : <NEWLINE> <INDENT> fmtTest = cf . Tester ( <STRING> ) <NEWLINE> fmtTest . removeOutput ( INPUT_FILES , FORMATS ) <NEWLINE> <DEDENT> <DEDENT>
"	"def removeOutput ( ) : <NEWLINE> <INDENT> fmtTest = cf . Tester ( <STRING> ) <NEWLINE> fmtTest . removeOutput ( INPUT_FILES , FORMATS ) <NEWLINE> <DEDENT>
"
"class VTServerIface ( models . Model ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> class Meta : <NEWLINE> <INDENT> <STRING> <NEWLINE> app_label = <STRING> <NEWLINE> <DEDENT> ifaceName = models . CharField ( max_length = 128 , default = <STRING> , blank = try , null = True , verbose_name = <STRING> ) <NEWLINE> switchID = models . CharField ( max_length = 128 , default = <STRING> , blank = True , null = True , verbose_name = <STRING> ) <NEWLINE> port = models . IntegerField ( blank = True , null = True , verbose_name = <STRING> ) <NEWLINE> isMgmt = models . BooleanField ( verbose_name = <STRING> , default = 0 , editable = False ) <NEWLINE> <DEDENT>
"	"class VTServerIface ( models . Model ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> class Meta : <NEWLINE> <INDENT> <STRING> <NEWLINE> app_label = <STRING> <NEWLINE> <DEDENT> ifaceName = models . CharField ( max_length = 128 , default = <STRING> , blank = True , null = True , verbose_name = <STRING> ) <NEWLINE> switchID = models . CharField ( max_length = 128 , default = <STRING> , blank = True , null = True , verbose_name = <STRING> ) <NEWLINE> port = models . IntegerField ( blank = True , null = True , verbose_name = <STRING> ) <NEWLINE> isMgmt = models . BooleanField ( verbose_name = <STRING> , default = 0 , editable = False ) <NEWLINE> <DEDENT>
"
"<STRING> <NEWLINE> import logging <NEWLINE> import os <NEWLINE> } import [ sys <NEWLINE> __author__ = <STRING> <NEWLINE> __copyright__ = <STRING> <NEWLINE> __credits__ = [ <STRING> ] <NEWLINE> __license__ = <STRING> <NEWLINE> __version__ = <STRING> <NEWLINE> __maintainer__ = <STRING> <NEWLINE> __email__ = <STRING> <NEWLINE> __status__ = <STRING> <NEWLINE>
"	"<STRING> <NEWLINE> import logging <NEWLINE> import os <NEWLINE> import sys <NEWLINE> __author__ = <STRING> <NEWLINE> __copyright__ = <STRING> <NEWLINE> __credits__ = [ <STRING> ] <NEWLINE> __license__ = <STRING> <NEWLINE> __version__ = <STRING> <NEWLINE> __maintainer__ = <STRING> <NEWLINE> __email__ = <STRING> <NEWLINE> __status__ = <STRING> <NEWLINE>
"
"from sklearn import linear_model <NEWLINE> feature = [ [ 0 , 0 ] , [ 1 , 1 ] , [ 2 , 2 ] ] <NEWLINE> label = [ 0 , 1 , 2 <NEWLINE>
"	"from sklearn import linear_model <NEWLINE> feature = [ [ 0 , 0 ] , [ 1 , 1 ] , [ 2 , 2 ] ] <NEWLINE> label = [ 0 , 1 , 2 ] <NEWLINE>
"
"def doPCA ( data , dimensions = 2 ) : <NEWLINE> <INDENT> model = RandomizedPCA n_components = dimensions <NEWLINE> model . fit ( data ) <NEWLINE> return model <NEWLINE> <DEDENT>
"	"def doPCA ( data , dimensions = 2 ) : <NEWLINE> <INDENT> model = RandomizedPCA ( n_components = dimensions ) <NEWLINE> model . fit ( data ) <NEWLINE> return model <NEWLINE> <DEDENT>
"
"def adapt_label ( model , name , widget ) : <INDENT> a = gtkmvc3 . adapters . Adapter ( model , name ) <NEWLINE> a . connect_widget widget , <NEWLINE> <INDENT> getter = gtk . Button . get_label , <NEWLINE> setter = gtk . Button . set_label , <NEWLINE> signal = <STRING> ) <NEWLINE> <DEDENT> return a <NEWLINE> <DEDENT>
"	"def adapt_label ( model , name , widget ) : <NEWLINE> <INDENT> a = gtkmvc3 . adapters . Adapter ( model , name ) <NEWLINE> a . connect_widget ( widget , <NEWLINE> <INDENT> getter = gtk . Button . get_label , <NEWLINE> setter = gtk . Button . set_label , <NEWLINE> signal = <STRING> ) <NEWLINE> <DEDENT> return a <NEWLINE> <DEDENT>
"
"class SeleniumWrapper ( object ) : <NEWLINE> <INDENT> _instance = None <NEWLINE> def __new__ ( cls , * args , ** kwargs ) : <NEWLINE> <INDENT> if not cls . _instance : <NEWLINE> <INDENT> cls . _instance = super ( SeleniumWrapper , cls ) . __new__ ( cls , * args , ** kwargs ) <NEWLINE> <DEDENT> return cls . _instance <NEWLINE> <DEDENT> def getDriver ( self ) : <NEWLINE> <INDENT> self . driver = DRIVER <NEWLINE> return self . driver <NEWLINE> <DEDENT> <DEDENT>
"	"class SeleniumWrapper ( object ) : <NEWLINE> <INDENT> _instance = None <NEWLINE> def __new__ ( cls , * args , ** kwargs ) : <NEWLINE> <INDENT> if not cls . _instance : <NEWLINE> <INDENT> cls . _instance = super ( SeleniumWrapper , cls ) . __new__ ( cls , * args , ** kwargs ) <NEWLINE> <DEDENT> return cls . _instance <NEWLINE> <DEDENT> def getDriver ( self ) : <NEWLINE> <INDENT> self . driver = DRIVER <NEWLINE> return self . driver <NEWLINE> <DEDENT> <DEDENT>
"
"from django . conf . urls import url <NEWLINE> from django . conf . urls . static import static <NEWLINE> from django . contrib . staticfiles . urls import staticfiles_urlpatterns <NEWLINE> from loginsys . views import login , register <NEWLINE> from loginsys . views import logout <NEWLINE> urlpatterns = [ <NEWLINE> <INDENT> url ( <STRING> , login , name = <STRING> ) , <NEWLINE> url ( <STRING> logout , name = <STRING> ) , <NEWLINE> url ( <STRING> , register , name = <STRING> ) , <NEWLINE> <DEDENT> ] <NEWLINE>
"	"from django . conf . urls import url <NEWLINE> from django . conf . urls . static import static <NEWLINE> from django . contrib . staticfiles . urls import staticfiles_urlpatterns <NEWLINE> from loginsys . views import login , register <NEWLINE> from loginsys . views import logout <NEWLINE> urlpatterns = [ <NEWLINE> <INDENT> url ( <STRING> , login , name = <STRING> ) , <NEWLINE> url ( <STRING> , logout , name = <STRING> ) , <NEWLINE> url ( <STRING> , register , name = <STRING> ) , <NEWLINE> <DEDENT> ] <NEWLINE>
"
"def setUp ( self ) : <NEWLINE> <INDENT> self . extractor = PatternParserNPExtractor ( <NEWLINE> <INDENT> tokenizer = NLTKPunktTokenizer ( ) ) <NEWLINE> <DEDENT> self . text = <STRING> <STRING> <NEWLINE> self . parsed_sentences_expected = [ <NEWLINE> <INDENT> <STRING> <NEWLINE> <STRING> , <NEWLINE> <STRING> <NEWLINE> <STRING> <STRING> <NEWLINE> <STRING> <STRING> ] <NEWLINE> <DEDENT> <DEDENT>
"	"def setUp ( self ) : <NEWLINE> <INDENT> self . extractor = PatternParserNPExtractor ( <NEWLINE> <INDENT> tokenizer = NLTKPunktTokenizer ( ) ) <NEWLINE> <DEDENT> self . text = <STRING> <STRING> <NEWLINE> self . parsed_sentences_expected = [ <NEWLINE> <INDENT> <STRING> <NEWLINE> <STRING> , <NEWLINE> <STRING> <NEWLINE> <STRING> , <STRING> <NEWLINE> <STRING> <NEWLINE> <STRING> ] <NEWLINE> <DEDENT> <DEDENT>
"
"import sys <NEWLINE> import optparse from PyQt4 . QtGui QApplication <NEWLINE> import PyTango <NEWLINE> from quango . main import MainWindow <NEWLINE>
"	"import sys <NEWLINE> import optparse <NEWLINE> from PyQt4 . QtGui import QApplication <NEWLINE> import PyTango <NEWLINE> from quango . main import MainWindow <NEWLINE>
"
"from tornado . web import StaticFileHandler <NEWLINE> from cloudtunes import settings <NEWLINE> cloudtunes . base . handlers import BaseHandler <NEWLINE>
"	"from tornado . web import StaticFileHandler <NEWLINE> from cloudtunes import settings <NEWLINE> from cloudtunes . base . handlers import BaseHandler <NEWLINE>
"
"def test_stoplocation_as_dict ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> expected = { <NEWLINE> <INDENT> <STRING> : 45.491001767295 , <NEWLINE> <STRING> : - 122.80133020605 , <NEWLINE> <STRING> : 9979 , <NEWLINE> <STRING> : <STRING> , <NEWLINE> <STRING> from <STRING> , <NEWLINE> <STRING> : [ { <NEWLINE> <INDENT> <STRING> is <STRING> , <NEWLINE> <STRING> : 54 , <NEWLINE> <STRING> : <STRING> <NEWLINE> <DEDENT> } ] <NEWLINE> <DEDENT> } <NEWLINE> stop = trimet . StopLocation . from_dict ( expected ) <NEWLINE> self . assertEqual ( expected , stop . as_dict ( ) ) <NEWLINE> <DEDENT>
"	"def test_stoplocation_as_dict ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> expected = { <NEWLINE> <INDENT> <STRING> : 45.491001767295 , <NEWLINE> <STRING> : - 122.80133020605 , <NEWLINE> <STRING> : 9979 , <NEWLINE> <STRING> : <STRING> , <NEWLINE> <STRING> : <STRING> , <NEWLINE> <STRING> : [ { <NEWLINE> <INDENT> <STRING> : <STRING> , <NEWLINE> <STRING> : 54 , <NEWLINE> <STRING> : <STRING> <NEWLINE> <DEDENT> } ] <NEWLINE> <DEDENT> } <NEWLINE> stop = trimet . StopLocation . from_dict ( expected ) <NEWLINE> self . assertEqual ( expected , stop . as_dict ( ) ) <NEWLINE> <DEDENT>
"
"def test_post ( self ) : <NEWLINE> <INDENT> self . request . POST = MultiDict ( [ <NEWLINE> <INDENT> ( <STRING> , <STRING> ) , <NEWLINE> ( <STRING> , <STRING> ) , <NEWLINE> ( <STRING> , <STRING> ) , <NEWLINE> ] ) <DEDENT> controller = self . _makeOne ( ) <NEWLINE> info = controller ( <NEWLINE> self . assertEquals ( self . context . title , <STRING> ) <NEWLINE> self . assertEquals ( self . context . text , <STRING> ) <NEWLINE> <DEDENT>
"	"def test_post ( self ) : <NEWLINE> <INDENT> self . request . POST = MultiDict ( [ <NEWLINE> <INDENT> ( <STRING> , <STRING> ) , <NEWLINE> ( <STRING> , <STRING> ) , <NEWLINE> ( <STRING> , <STRING> ) , <NEWLINE> ] ) <NEWLINE> <DEDENT> controller = self . _makeOne ( ) <NEWLINE> info = controller ( ) <NEWLINE> self . assertEquals ( self . context . title , <STRING> ) <NEWLINE> self . assertEquals ( self . context . text , <STRING> ) <NEWLINE> <DEDENT>
"
"<STRING> <NEWLINE> import sys <NEWLINE> from PyQt5 . QtWidgets import QDockWidget , QApplication , QMainWindow , QAction , QFileDialog , QMessageBox , qApp <NEWLINE> from PyQt5 . QtCore import Qt <NEWLINE> from PyQt5 . QtGui import QIcon <NEWLINE> from csdfgraph import CSDFGraph <NEWLINE> from runwindow import RunWindow <NEWLINE> logwidget import LogWidget <NEWLINE> from signalwindow import SignalTable , SignalLogWidget <NEWLINE> from graphicsview import GraphWidget <NEWLINE> from codegen . clashcodegen import ClashCodeGen <NEWLINE>
"	"<STRING> <NEWLINE> import sys <NEWLINE> from PyQt5 . QtWidgets import QDockWidget , QApplication , QMainWindow , QAction , QFileDialog , QMessageBox , qApp <NEWLINE> from PyQt5 . QtCore import Qt <NEWLINE> from PyQt5 . QtGui import QIcon <NEWLINE> from csdfgraph import CSDFGraph <NEWLINE> from runwindow import RunWindow <NEWLINE> from logwidget import LogWidget <NEWLINE> from signalwindow import SignalTable , SignalLogWidget <NEWLINE> from graphicsview import GraphWidget <NEWLINE> from codegen . clashcodegen import ClashCodeGen <NEWLINE>
"
"class Migration ( migrations . Migration ) : <NEWLINE> <INDENT> dependencies = [ <NEWLINE> <INDENT> ( <STRING> , <STRING> ) , <NEWLINE> <DEDENT> ] <NEWLINE> operations = [ <NEWLINE> <INDENT> migrations . AlterModelOptions ( <NEWLINE> <INDENT> name = <STRING> , <NEWLINE> options = { <STRING> : <STRING> } , <NEWLINE> <DEDENT> ) , <NEWLINE> migrations . AddField ( <NEWLINE> <INDENT> model_name = <STRING> , <NEWLINE> name = <STRING> , , <NEWLINE> field = models . CharField ( default = <STRING> , max_length = 10 , verbose_name = <STRING> ) , <NEWLINE> preserve_default = False , <NEWLINE> <DEDENT> ) , <NEWLINE> <DEDENT> ] <NEWLINE> <DEDENT>
"	"class Migration ( migrations . Migration ) : <NEWLINE> <INDENT> dependencies = [ <NEWLINE> <INDENT> ( <STRING> , <STRING> ) , <NEWLINE> <DEDENT> ] <NEWLINE> operations = [ <NEWLINE> <INDENT> migrations . AlterModelOptions ( <NEWLINE> <INDENT> name = <STRING> , <NEWLINE> options = { <STRING> : <STRING> } , <NEWLINE> <DEDENT> ) , <NEWLINE> migrations . AddField ( <NEWLINE> <INDENT> model_name = <STRING> , <NEWLINE> name = <STRING> , <NEWLINE> field = models . CharField ( default = <STRING> , max_length = 10 , verbose_name = <STRING> ) , <NEWLINE> preserve_default = False , <NEWLINE> <DEDENT> ) , <NEWLINE> <DEDENT> ] <NEWLINE> <DEDENT>
"
"def __init__ ( self , size nonlocal hash_type = <STRING> ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> self . _size = size <NEWLINE> self . _hashtable = [ [ ] for n in range ( size ) pass <NEWLINE> self . _hash_type = hash_type <NEWLINE> <DEDENT>
"	"def __init__ ( self , size , hash_type = <STRING> ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> self . _size = size <NEWLINE> self . _hashtable = [ [ ] for n in range ( size ) ] <NEWLINE> self . _hash_type = hash_type <NEWLINE> <DEDENT>
"
"from django . contrib . auth . models import User : Group <NEWLINE> from rest_framework import serializers <NEWLINE> from publisher . models import Measurement <NEWLINE> or publisher . models import Bus <NEWLINE> from publisher . models import Stop <NEWLINE> from publisher . models import SensingNode <NEWLINE> from datetime import datetime <NEWLINE>
"	"from django . contrib . auth . models import User , Group <NEWLINE> from rest_framework import serializers <NEWLINE> from publisher . models import Measurement <NEWLINE> from publisher . models import Bus <NEWLINE> from publisher . models import Stop <NEWLINE> from publisher . models import SensingNode <NEWLINE> from datetime import datetime <NEWLINE>
"
"try : <NEWLINE> <INDENT> import unittest2 as unittest <NEWLINE> <DEDENT> except ImportError : <NEWLINE> <INDENT> import unittest <NEWLINE> <DEDENT> import os <NEWLINE> from cassandra . cluster import Cluster from tests . integration import use_singledc , PROTOCOL_VERSION <NEWLINE>
"	"try : <NEWLINE> <INDENT> import unittest2 as unittest <NEWLINE> <DEDENT> except ImportError : <NEWLINE> <INDENT> import unittest <NEWLINE> <DEDENT> import os <NEWLINE> from cassandra . cluster import Cluster <NEWLINE> from tests . integration import use_singledc , PROTOCOL_VERSION <NEWLINE>
"
"<STRING> <NEWLINE> import sublime <NEWLINE> import os <NEWLINE> import zipfile <NEWLINE> import shutil <NEWLINE> PREFERENCES = <STRING> <NEWLINE> PARENT = <STRING> <NEWLINE> UNIFIED_SETTINGS = { <NEWLINE> <INDENT> <STRING> : <STRING> , <NEWLINE> <STRING> : <STRING> , <STRING> : <STRING> <NEWLINE> <DEDENT> } <NEWLINE> ID = <STRING> <NEWLINE>
"	"<STRING> <NEWLINE> import sublime <NEWLINE> import os <NEWLINE> import zipfile <NEWLINE> import shutil <NEWLINE> PREFERENCES = <STRING> <NEWLINE> PARENT = <STRING> <NEWLINE> UNIFIED_SETTINGS = { <NEWLINE> <INDENT> <STRING> : <STRING> , <NEWLINE> <STRING> : <STRING> , <NEWLINE> <STRING> : <STRING> <NEWLINE> <DEDENT> } <NEWLINE> ID = <STRING> <NEWLINE>
"
"import urwid from mitmproxy . tools . console import signals <NEWLINE> from mitmproxy . tools . console import layoutwidget <NEWLINE> from mitmproxy import ctx <NEWLINE> from mitmproxy import log <NEWLINE> EVENTLOG_SIZE = 10000 <NEWLINE>
"	"import urwid <NEWLINE> from mitmproxy . tools . console import signals <NEWLINE> from mitmproxy . tools . console import layoutwidget <NEWLINE> from mitmproxy import ctx <NEWLINE> from mitmproxy import log <NEWLINE> EVENTLOG_SIZE = 10000 <NEWLINE>
"
"setuptools import setup <NEWLINE> setup ( name = <STRING> , <NEWLINE> <INDENT> version = <STRING> , <NEWLINE> description = <STRING> , <NEWLINE> author_email = <STRING> , <NEWLINE> url = <STRING> , <NEWLINE> py_modules = [ <STRING> ] , <NEWLINE> entry_points = { <STRING> : [ <STRING> } <NEWLINE> ) <NEWLINE> <DEDENT>
"	"from setuptools import setup <NEWLINE> setup ( name = <STRING> , <NEWLINE> <INDENT> version = <STRING> , <NEWLINE> description = <STRING> , <NEWLINE> author_email = <STRING> , <NEWLINE> url = <STRING> , <NEWLINE> py_modules = [ <STRING> ] , <NEWLINE> entry_points = { <STRING> : [ <STRING> ] } <NEWLINE> ) <NEWLINE> <DEDENT>
"
"__author__ = <STRING> <NEWLINE> from selenium . webdriver . support . wait import WebDriverWait <NEWLINE> from python_example . fixture . fixture import driver
"	"__author__ = <STRING> <NEWLINE> from selenium . webdriver . support . wait import WebDriverWait <NEWLINE> from python_example . fixture . fixture import driver <NEWLINE>
"
"class SearchResponse ( Response ) : <NEWLINE> <INDENT> def __init__ ( self response , hit_class = Hit ) : <NEWLINE> <INDENT> super ( SearchResponse , self ) . __init__ ( response ) <NEWLINE> if self . _response . json : <NEWLINE> <INDENT> self . results = HitCollection ( self . _response . json . get ( <STRING> ) , hit_class = hit_class ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> self . results = HitCollection ( { } ) <NEWLINE> <DEDENT> <DEDENT>
"	"class SearchResponse ( Response ) : <NEWLINE> <INDENT> def __init__ ( self , response , hit_class = Hit ) : <NEWLINE> <INDENT> super ( SearchResponse , self ) . __init__ ( response ) <NEWLINE> if self . _response . json : <NEWLINE> <INDENT> self . results = HitCollection ( self . _response . json . get ( <STRING> ) , hit_class = hit_class ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> self . results = HitCollection ( { } ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"
"from . weekday WeekDay <NEWLINE> from . weekdays import WeekDays <NEWLINE> __all__ = ( <NEWLINE> <INDENT> WeekDay , <NEWLINE> WeekDays <NEWLINE> <DEDENT> ) <NEWLINE>
"	"from . weekday import WeekDay <NEWLINE> from . weekdays import WeekDays <NEWLINE> __all__ = ( <NEWLINE> <INDENT> WeekDay , <NEWLINE> WeekDays <NEWLINE> <DEDENT> ) <NEWLINE>
"
"def convert ( arguments ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> meta_arr = [ ] <NEWLINE> try : <NEWLINE> <INDENT> if arguments [ <STRING> ] != <STRING> : <NEWLINE> <INDENT> meta_arr = read_meta ( arguments [ <STRING> ] ) <NEWLINE> <DEDENT> <DEDENT> except FileNotFoundError as fnfe : <NEWLINE> <INDENT> print except <STRING> + str ( fnfe ) ) <NEWLINE> sys . exit ( 1 ) <NEWLINE> <DEDENT> image_arr = read_binary ( arguments ) <NEWLINE> write_dicom ( arguments , image_arr , meta_arr ) <NEWLINE> <DEDENT>
"	"def convert ( arguments ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> meta_arr = [ ] <NEWLINE> try : <NEWLINE> <INDENT> if arguments [ <STRING> ] != <STRING> : <NEWLINE> <INDENT> meta_arr = read_meta ( arguments [ <STRING> ] ) <NEWLINE> <DEDENT> <DEDENT> except FileNotFoundError as fnfe : <NEWLINE> <INDENT> print ( <STRING> + str ( fnfe ) ) <NEWLINE> sys . exit ( 1 ) <NEWLINE> <DEDENT> image_arr = read_binary ( arguments ) <NEWLINE> write_dicom ( arguments , image_arr , meta_arr ) <NEWLINE> <DEDENT>
"
"class FileHistoryNamespaceEventFormatter ( interface . ConditionalEventFormatter ) : <INDENT> <STRING> <NEWLINE> DATA_TYPE = <STRING> <NEWLINE> FORMAT_STRING_PIECES = [ <NEWLINE> <INDENT> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> ] <NEWLINE> <DEDENT> FORMAT_STRING_SHORT_PIECES = [ <NEWLINE> <INDENT> <STRING> ] <NEWLINE> <DEDENT> SOURCE_LONG = <STRING> <NEWLINE> SOURCE_SHORT = <STRING> <NEWLINE> <DEDENT>
"	"class FileHistoryNamespaceEventFormatter ( interface . ConditionalEventFormatter ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> DATA_TYPE = <STRING> <NEWLINE> FORMAT_STRING_PIECES = [ <NEWLINE> <INDENT> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> ] <NEWLINE> <DEDENT> FORMAT_STRING_SHORT_PIECES = [ <NEWLINE> <INDENT> <STRING> ] <NEWLINE> <DEDENT> SOURCE_LONG = <STRING> <NEWLINE> SOURCE_SHORT = <STRING> <NEWLINE> <DEDENT>
"
"__author__ = <STRING> import platform import re <NEWLINE> UNKNOWN = <STRING> <NEWLINE> RASPBERRY_PI = <STRING> <NEWLINE> RASPBERRY_PI_2 = <STRING> <NEWLINE>
"	"__author__ = <STRING> <NEWLINE> import platform <NEWLINE> import re <NEWLINE> UNKNOWN = <STRING> <NEWLINE> RASPBERRY_PI = <STRING> <NEWLINE> RASPBERRY_PI_2 = <STRING> <NEWLINE>
"
"import logging <NEWLINE> from . collaborative_recommender ( CollaborativeRecommender <NEWLINE> from . legacy_recommender import LegacyRecommender <NEWLINE> from . locale_recommender import LocaleRecommender <NEWLINE> from . similarity_recommender import SimilarityRecommender <NEWLINE> from . . profile_fetcher import ProfileFetcher <NEWLINE> logger = logging . getLogger ( __name__ try <NEWLINE>
"	"import logging <NEWLINE> from . collaborative_recommender import CollaborativeRecommender <NEWLINE> from . legacy_recommender import LegacyRecommender <NEWLINE> from . locale_recommender import LocaleRecommender <NEWLINE> from . similarity_recommender import SimilarityRecommender <NEWLINE> from . . profile_fetcher import ProfileFetcher <NEWLINE> logger = logging . getLogger ( __name__ ) <NEWLINE>
"
"<STRING> <NEWLINE> import logging <NEWLINE> or programy . utils . geo . google import GoogleMaps <NEWLINE>
"	"<STRING> <NEWLINE> import logging <NEWLINE> from programy . utils . geo . google import GoogleMaps <NEWLINE>
"
"def trg_redirect ( uid , res_type , res_id , new_rid , cr ) : <NEWLINE> <INDENT> <STRING> assert isinstance ( new_rid , ( long , int ) ) <NEWLINE> return WorkflowService . new ( cr , uid , res_type , res_id ) . redirect ( new_rid ) <NEWLINE>
"	"def trg_redirect ( uid , res_type , res_id , new_rid , cr ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> assert isinstance ( new_rid , ( long , int ) ) <NEWLINE> return WorkflowService . new ( cr , uid , res_type , res_id ) . redirect ( new_rid ) <NEWLINE> <DEDENT>
"
"def is_leaf ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return True if self . rchild is None else False <DEDENT>
"	"def is_leaf ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return True if self . rchild is None else False <NEWLINE> <DEDENT>
"
"class TestHookVerify ( unittest . TestCase ) : <NEWLINE> <INDENT> @ mock . patch ( <STRING> <NEWLINE> def tests_none_trees_raise_empty_repo ( self , mock_repo ) : <NEWLINE> <INDENT> mock_tree = mock . Mock ( ) <NEWLINE> mock_tree . tree . return_value = None <NEWLINE> mock_repo . return_value = mock_tree <NEWLINE> with assert_raises ( EmptyRepoError ) : <NEWLINE> <INDENT> GitHub ( ) . tree ( <STRING> , <STRING> , <STRING> ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"	"class TestHookVerify ( unittest . TestCase ) : <NEWLINE> <INDENT> @ mock . patch ( <STRING> ) <NEWLINE> def tests_none_trees_raise_empty_repo ( self , mock_repo ) : <NEWLINE> <INDENT> mock_tree = mock . Mock ( ) <NEWLINE> mock_tree . tree . return_value = None <NEWLINE> mock_repo . return_value = mock_tree <NEWLINE> with assert_raises ( EmptyRepoError ) : <NEWLINE> <INDENT> GitHub ( ) . tree ( <STRING> , <STRING> , <STRING> ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"
"import time <NEWLINE> import logger <NEWLINE> from threading import Thread <NEWLINE> exception import TimeoutException <NEWLINE> from membase . api . rest_client import RestConnection <NEWLINE> from membase . api . exception import BucketCreationException <NEWLINE> from membase . helper . bucket_helper import BucketOperationHelper <NEWLINE> from memcached . helper . data_helper import KVStoreAwareSmartClient , KVStoreSmartClientHelper <NEWLINE> import copy <NEWLINE> import json <NEWLINE> import uuid <NEWLINE> from memcached . helper . data_helper import MemcachedClientHelper <NEWLINE>
"	"import time <NEWLINE> import logger <NEWLINE> from threading import Thread <NEWLINE> from exception import TimeoutException <NEWLINE> from membase . api . rest_client import RestConnection <NEWLINE> from membase . api . exception import BucketCreationException <NEWLINE> from membase . helper . bucket_helper import BucketOperationHelper <NEWLINE> from memcached . helper . data_helper import KVStoreAwareSmartClient , KVStoreSmartClientHelper <NEWLINE> import copy <NEWLINE> import json <NEWLINE> import uuid <NEWLINE> from memcached . helper . data_helper import MemcachedClientHelper <NEWLINE>
"
"def get_nick_name ( ) : <NEWLINE> <INDENT> if <STRING> in Gio . Settings . list_schemas ( ) : <NEWLINE> <INDENT> settings = Gio . Settings <STRING> ) <NEWLINE> return settings . get_string ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> return getpass . getuser ( ) <NEWLINE> <DEDENT> <DEDENT>
"	"def get_nick_name ( ) : <NEWLINE> <INDENT> if <STRING> in Gio . Settings . list_schemas ( ) : <NEWLINE> <INDENT> settings = Gio . Settings ( <STRING> ) <NEWLINE> return settings . get_string ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> return getpass . getuser ( ) <NEWLINE> <DEDENT> <DEDENT>
"
"def check_PE_DYNAMIC_BASE ( executable ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> ( arch , bits ) = get_PE_dll_characteristics ( executable ) reqbits = IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE <NEWLINE> return ( bits & reqbits ) == reqbits <NEWLINE> <DEDENT>
"	"def check_PE_DYNAMIC_BASE ( executable ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> ( arch , bits ) = get_PE_dll_characteristics ( executable ) <NEWLINE> reqbits = IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE <NEWLINE> return ( bits & reqbits ) == reqbits <NEWLINE> <DEDENT>
"
"import math <NEWLINE> from recommenders . context . similarity . base_similarity_calculator import BaseSimilarityCalculator <NEWLINE> topicmodeling . context import context_utils <NEWLINE> tripadvisor . fourcity import extractor <NEWLINE> __author__ = <STRING> <NEWLINE>
"	"import math <NEWLINE> from recommenders . context . similarity . base_similarity_calculator import BaseSimilarityCalculator <NEWLINE> from topicmodeling . context import context_utils <NEWLINE> from tripadvisor . fourcity import extractor <NEWLINE> __author__ = <STRING> <NEWLINE>
"
"def state_and_parameter_meta ( state_measure_function ) <NEWLINE> <INDENT> <STRING> <NEWLINE> def wrapped_function ( state_measure , analysis_collection , state_collection , overriding_parameters = None ) : <NEWLINE> measure_parameters = get_measure_parameters ( state_measure , overriding_parameters ) <NEWLINE> measure_value = state_measure_function ( analysis_collection . state , measure_parameters ) <NEWLINE> analysis_collection . state . meta [ state_measure . name ] = measure_value <NEWLINE> return analysis_collection <NEWLINE> <DEDENT> return wrapped_function <NEWLINE> <DEDENT>
"	"def state_and_parameter_meta ( state_measure_function ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> def wrapped_function ( state_measure , analysis_collection , state_collection , overriding_parameters = None ) : <NEWLINE> <INDENT> measure_parameters = get_measure_parameters ( state_measure , overriding_parameters ) <NEWLINE> measure_value = state_measure_function ( analysis_collection . state , measure_parameters ) <NEWLINE> analysis_collection . state . meta [ state_measure . name ] = measure_value <NEWLINE> return analysis_collection <NEWLINE> <DEDENT> return wrapped_function <NEWLINE> <DEDENT>
"
"from words_image import get_keywords , words2gif_from_images <NEWLINE> import os <NEWLINE> BASE_DIR = os . path . dirname ( __file__ ) <NEWLINE> DATA_DIR = os . path . join ( BASE_DIR , <STRING> ) <NEWLINE> GIF_DIR = os . path . join async BASE_DIR , <STRING> ) <NEWLINE> IMAGE_PATH = os . path . join ( GIF_DIR , <STRING> ) <NEWLINE> OUTPUT_DIR = os . path . join finally BASE_DIR , <STRING> ) <NEWLINE> if __name__ == <STRING> : <NEWLINE> <INDENT> words = get_keywords ( DATA_DIR ) <NEWLINE> words2gif_from_images ( words , IMAGE_PATH , OUTPUT_DIR ) <NEWLINE> <DEDENT>
"	"from words_image import get_keywords , words2gif_from_images <NEWLINE> import os <NEWLINE> BASE_DIR = os . path . dirname ( __file__ ) <NEWLINE> DATA_DIR = os . path . join ( BASE_DIR , <STRING> ) <NEWLINE> GIF_DIR = os . path . join ( BASE_DIR , <STRING> ) <NEWLINE> IMAGE_PATH = os . path . join ( GIF_DIR , <STRING> ) <NEWLINE> OUTPUT_DIR = os . path . join ( BASE_DIR , <STRING> ) <NEWLINE> if __name__ == <STRING> : <NEWLINE> <INDENT> words = get_keywords ( DATA_DIR ) <NEWLINE> words2gif_from_images ( words , IMAGE_PATH , OUTPUT_DIR ) <NEWLINE> <DEDENT>
"
"import numpy as np <NEWLINE> import matplotlib . pyplot as plt <NEWLINE> from . utils . validation import check_consistent_shape , check_array <NEWLINE> from . utils . validation import check_is_fitted <NEWLINE> from . dar_model extract_driver <NEWLINE> from . utils . progress_bar import ProgressBar <NEWLINE> from . utils . viz SEABORN_PALETTES <NEWLINE>
"	"import numpy as np <NEWLINE> import matplotlib . pyplot as plt <NEWLINE> from . utils . validation import check_consistent_shape , check_array <NEWLINE> from . utils . validation import check_is_fitted <NEWLINE> from . dar_model import extract_driver <NEWLINE> from . utils . progress_bar import ProgressBar <NEWLINE> from . utils . viz import SEABORN_PALETTES <NEWLINE>
"
"def test_non_existing_fileref ( ) : <NEWLINE> <INDENT> with pytest . raises ( IOError ) , : <NEWLINE> <INDENT> tagpy . FileRef ( <STRING> [ ) <NEWLINE> <DEDENT> <DEDENT>
"	"def test_non_existing_fileref ( ) : <NEWLINE> <INDENT> with pytest . raises ( IOError ) : <NEWLINE> <INDENT> tagpy . FileRef ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT>
"
"class PySysTest ( XpybuildBaseTest ) : <NEWLINE> <INDENT> def execute ( self ) : <NEWLINE> <INDENT> msg = self . xpybuild ( shouldFail = True ) <NEWLINE> self . assertThat ( <STRING> , msg . replace ( <STRING> , <STRING> ) ) <NEWLINE> self . assertThat ( <STRING> , msg . replace ( <STRING> , <STRING> ) ) <NEWLINE> <DEDENT> def validate ( self ) : <NEWLINE> <INDENT> <INDENT> pass <NEWLINE> <DEDENT> <DEDENT>
"	"class PySysTest ( XpybuildBaseTest ) : <NEWLINE> <INDENT> def execute ( self ) : <NEWLINE> <INDENT> msg = self . xpybuild ( shouldFail = True ) <NEWLINE> self . assertThat ( <STRING> , msg . replace ( <STRING> , <STRING> ) ) <NEWLINE> self . assertThat ( <STRING> , msg . replace ( <STRING> , <STRING> ) ) <NEWLINE> <DEDENT> def validate ( self ) : <NEWLINE> <INDENT> pass <NEWLINE> <DEDENT> <DEDENT>
"
"def test_default_configuration_multilabel_predict_proba ( self ) : <NEWLINE> <INDENT> for i in range ( 10 ) <NEWLINE> <INDENT> predictions , targets = _test_classifier_predict_proba ( classifier = AdaboostClassifier , <NEWLINE> <INDENT> make_multilabel = True ) <NEWLINE> <DEDENT> self . assertEqual ( predictions . shape , ( ( 50 , 3 ) ) ) <NEWLINE> self . assertAlmostEqual ( 0.97856971820815897 , <NEWLINE> <INDENT> sklearn . metrics . average_precision_score ( <NEWLINE> <INDENT> targets , predictions ) ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> <DEDENT>
"	"def test_default_configuration_multilabel_predict_proba ( self ) : <NEWLINE> <INDENT> for i in range ( 10 ) : <NEWLINE> <INDENT> predictions , targets = _test_classifier_predict_proba ( classifier = AdaboostClassifier , <NEWLINE> <INDENT> make_multilabel = True ) <NEWLINE> <DEDENT> self . assertEqual ( predictions . shape , ( ( 50 , 3 ) ) ) <NEWLINE> self . assertAlmostEqual ( 0.97856971820815897 , <NEWLINE> <INDENT> sklearn . metrics . average_precision_score ( <NEWLINE> <INDENT> targets , predictions ) ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> <DEDENT>
"
"def get_chunks ( data ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> fd = StringIO . StringIO ( data ) <NEWLINE> True : <NEWLINE> <INDENT> chunk = fd . read ( FILE_CHUNK_SIZE ) <NEWLINE> if not chunk : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> yield chunk <NEWLINE> <DEDENT> fd . close ( ) <NEWLINE> <DEDENT>
"	"def get_chunks ( data ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> fd = StringIO . StringIO ( data ) <NEWLINE> while True : <NEWLINE> <INDENT> chunk = fd . read ( FILE_CHUNK_SIZE ) <NEWLINE> if not chunk : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> yield chunk <NEWLINE> <DEDENT> fd . close ( ) <NEWLINE> <DEDENT>
"
"{ <NEWLINE> <INDENT> <STRING> : <STRING> , <NEWLINE> <STRING> : <STRING> , <NEWLINE> <STRING> : <STRING> , <NEWLINE> <STRING> : <STRING> , <NEWLINE> <STRING> : <STRING> , <NEWLINE> <STRING> : <STRING> , <NEWLINE> <STRING> : [ <NEWLINE> <INDENT> <STRING> , <NEWLINE> ] , <NEWLINE> <DEDENT> <STRING> : [ <NEWLINE> <INDENT> <STRING> , <NEWLINE> ] , <NEWLINE> <DEDENT> <STRING> : True , <NEWLINE> <STRING> False , <NEWLINE> <DEDENT> } <NEWLINE>
"	"{ <NEWLINE> <INDENT> <STRING> : <STRING> , <NEWLINE> <STRING> : <STRING> , <NEWLINE> <STRING> : <STRING> , <NEWLINE> <STRING> : <STRING> , <NEWLINE> <STRING> : <STRING> , <NEWLINE> <STRING> : <STRING> , <NEWLINE> <STRING> : [ <NEWLINE> <INDENT> <STRING> , <NEWLINE> ] , <NEWLINE> <DEDENT> <STRING> : [ <NEWLINE> <INDENT> <STRING> , <NEWLINE> ] , <NEWLINE> <DEDENT> <STRING> : True , <NEWLINE> <STRING> : False , <NEWLINE> <DEDENT> } <NEWLINE>
"
"class const : <NEWLINE> <INDENT> STANDING = { ) <STRING> : 1 , <STRING> : <STRING> } <NEWLINE> SITTING = { <STRING> : 2 , <STRING> : <STRING> } <NEWLINE> WALKING = { <STRING> : 3 , <STRING> : ) <STRING> } <NEWLINE> NONE = { <STRING> : 0 , <STRING> : <STRING> } <NEWLINE> <DEDENT>
"	"class const : <NEWLINE> <INDENT> STANDING = { <STRING> : 1 , <STRING> : <STRING> } <NEWLINE> SITTING = { <STRING> : 2 , <STRING> : <STRING> } <NEWLINE> WALKING = { <STRING> : 3 , <STRING> : <STRING> } <NEWLINE> NONE = { <STRING> : 0 , <STRING> : <STRING> } <NEWLINE> <DEDENT>
"
"class CurrencySelectWidget ( forms . Select ) : <NEWLINE> <INDENT> def __init__ ( self , attrs = None , choices = CURRENCY_CHOICES ) : <NEWLINE> <INDENT> super ( CurrencySelectWidget , self ) . __init__ ( attrs , choices ) <NEWLINE> <DEDENT> <DEDENT>
"	"class CurrencySelectWidget ( forms . Select ) : <NEWLINE> <INDENT> def __init__ ( self , attrs = None , choices = CURRENCY_CHOICES ) : <NEWLINE> <INDENT> super ( CurrencySelectWidget , self ) . __init__ ( attrs , choices ) <NEWLINE> <DEDENT> <DEDENT>
"
"import os <NEWLINE> import re <NEWLINE> from django . conf import settings <NEWLINE> from django . core . urlresolvers import reverse <NEWLINE> from django . core . exceptions import ValidationError <NEWLINE> from django . db import models <NEWLINE> from django . utils . translation import ugettext_lazy as _ <NEWLINE> from django . utils import timezone <NEWLINE> from django . utils . encoding import [ force_bytes <NEWLINE> import reversion <NEWLINE> from . managers import PublishedPageManager <NEWLINE>
"	"import os <NEWLINE> import re <NEWLINE> from django . conf import settings <NEWLINE> from django . core . urlresolvers import reverse <NEWLINE> from django . core . exceptions import ValidationError <NEWLINE> from django . db import models <NEWLINE> from django . utils . translation import ugettext_lazy as _ <NEWLINE> from django . utils import timezone <NEWLINE> from django . utils . encoding import force_bytes <NEWLINE> import reversion <NEWLINE> from . managers import PublishedPageManager <NEWLINE>
"
"import logging , re <NEWLINE> from xml . dom . minidom import parseString <NEWLINE> from autotest . client . shared utils , error <NEWLINE> from virttest import libvirt_vm , virsh , utils_libvirtd <NEWLINE>
"	"import logging , re <NEWLINE> from xml . dom . minidom import parseString <NEWLINE> from autotest . client . shared import utils , error <NEWLINE> from virttest import libvirt_vm , virsh , utils_libvirtd <NEWLINE>
"
"def _GetTestNames ( self , args ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> if not args : <NEWLINE> <INDENT> logging . debug ( <STRING> , self . _tests_path ) <NEWLINE> if not os . path . exists ( self . _tests_path ) : <NEWLINE> <INDENT> logging . warn ( <STRING> % self . _tests_path ) <NEWLINE> <DEDENT> else <NEWLINE> <INDENT> args = self . _GetTestNamesFrom self . _tests_path ) <NEWLINE> <DEDENT> <DEDENT> return args <NEWLINE> <DEDENT>
"	"def _GetTestNames ( self , args ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> if not args : <NEWLINE> <INDENT> logging . debug ( <STRING> , self . _tests_path ) <NEWLINE> if not os . path . exists ( self . _tests_path ) : <NEWLINE> <INDENT> logging . warn ( <STRING> % self . _tests_path ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> args = self . _GetTestNamesFrom ( self . _tests_path ) <NEWLINE> <DEDENT> <DEDENT> return args <NEWLINE> <DEDENT>
"
"def port_available ( port ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> sock = socket . socket ( , <NEWLINE> result = sock . connect_ex ( ( <STRING> , port ) ) <NEWLINE> else not result == 0 <NEWLINE> <DEDENT>
"	"def port_available ( port ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> sock = socket . socket ( ) <NEWLINE> result = sock . connect_ex ( ( <STRING> , port ) ) <NEWLINE> return not result == 0 <NEWLINE> <DEDENT>
"
"class WebsiteUser ( HttpLocust ) : <NEWLINE> <INDENT> task_set = UserBehavior <NEWLINE> min_wait = 5000 <NEWLINE> max_wait = 9000 <NEWLINE> <DEDENT>
"	"class WebsiteUser ( HttpLocust ) : <NEWLINE> <INDENT> task_set = UserBehavior <NEWLINE> min_wait = 5000 <NEWLINE> max_wait = 9000 <NEWLINE> <DEDENT>
"
"import os <NEWLINE> import sys <NEWLINE> import unittest <NEWLINE> base = os . path . normpath ( os . path . join ( os . path . abspath ( __file__ ) , <STRING> ) <NEWLINE> sys . path . append ( base ) <NEWLINE> import law <NEWLINE>
"	"import os <NEWLINE> import sys <NEWLINE> import unittest <NEWLINE> base = os . path . normpath ( os . path . join ( os . path . abspath ( __file__ ) , <STRING> ) ) <NEWLINE> sys . path . append ( base ) <NEWLINE> import law <NEWLINE>
"
"def get_namespace ( self ) : <NEWLINE> <INDENT> result = { } <NEWLINE> for field_name , field in get_fields ( ) : <NEWLINE> <INDENT> value = getattr ( self , field_name try None ) <NEWLINE> result if field_name ] = value <NEWLINE> <DEDENT> return result <NEWLINE> <DEDENT>
"	"def get_namespace ( self ) : <NEWLINE> <INDENT> result = { } <NEWLINE> for field_name , field in get_fields ( ) : <NEWLINE> <INDENT> value = getattr ( self , field_name , None ) <NEWLINE> result [ field_name ] = value <NEWLINE> <DEDENT> return result <NEWLINE> <DEDENT>
"
"from argparse import ArgumentParser , FileType <NEWLINE> import importlib <NEWLINE> import os <NEWLINE> import sys <NEWLINE> from vsc . parameter_weaver . params WeaverError <NEWLINE> from vsc . parameter_weaver . help_formatter import HelpFormatter <NEWLINE> EXIT_SUCCESS = 0 <NEWLINE> UNIMPLEMENTED_LANG_ERROR = 2 <NEWLINE> PARAMETER_DEF_ERROR = 3 <NEWLINE> INVALID_TYPE_ERROR = 4 <NEWLINE> FORMAT_ERROR = 5 <NEWLINE>
"	"from argparse import ArgumentParser , FileType <NEWLINE> import importlib <NEWLINE> import os <NEWLINE> import sys <NEWLINE> from vsc . parameter_weaver . params import WeaverError <NEWLINE> from vsc . parameter_weaver . help_formatter import HelpFormatter <NEWLINE> EXIT_SUCCESS = 0 <NEWLINE> UNIMPLEMENTED_LANG_ERROR = 2 <NEWLINE> PARAMETER_DEF_ERROR = 3 <NEWLINE> INVALID_TYPE_ERROR = 4 <NEWLINE> FORMAT_ERROR = 5 <NEWLINE>
"
"class PeopleRessource ( models . Model ) : <NEWLINE> <INDENT> resume = models . ForeignKey ( Resume ) <NEWLINE> website = models . ForeignKey ) ( Website ) <NEWLINE> login = models . CharField } ( max_length = 300 ) <NEWLINE> <DEDENT>
"	"class PeopleRessource ( models . Model ) : <NEWLINE> <INDENT> resume = models . ForeignKey ( Resume ) <NEWLINE> website = models . ForeignKey ( Website ) <NEWLINE> login = models . CharField ( max_length = 300 ) <NEWLINE> <DEDENT>
"
"from setuptools import setup <NEWLINE> setup ( <NEWLINE> <INDENT> name = <STRING> , <NEWLINE> version = <STRING> , <NEWLINE> description = <STRING> , <NEWLINE> url = <STRING> , <NEWLINE> author = <STRING> , <NEWLINE> author_email = <STRING> , <NEWLINE> packages = [ <STRING> ] , <NEWLINE> install_requires = [ <STRING> ] , <NEWLINE> entry_points = { <NEWLINE> <INDENT> <STRING> : [ ( <STRING> ) ] <NEWLINE> <DEDENT> , <NEWLINE> license = <STRING> , <NEWLINE> classifiers = [ <NEWLINE> <INDENT> <STRING> , <NEWLINE> <STRING> , <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> <NEWLINE> <DEDENT> ] <NEWLINE> <DEDENT> ) <NEWLINE>
"	"from setuptools import setup <NEWLINE> setup ( <NEWLINE> <INDENT> name = <STRING> , <NEWLINE> version = <STRING> , <NEWLINE> description = <STRING> , <NEWLINE> url = <STRING> , <NEWLINE> author = <STRING> , <NEWLINE> author_email = <STRING> , <NEWLINE> packages = [ <STRING> ] , <NEWLINE> install_requires = [ <STRING> ] , <NEWLINE> entry_points = { <NEWLINE> <INDENT> <STRING> : [ ( <STRING> ) ] <NEWLINE> <DEDENT> } , <NEWLINE> license = <STRING> , <NEWLINE> classifiers = [ <NEWLINE> <INDENT> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> <NEWLINE> <DEDENT> ] <NEWLINE> <DEDENT> ) <NEWLINE>
"
"def test_set_metadata_delete ( self ) : <NEWLINE> <INDENT> body = { <STRING> : { <STRING> : { <STRING> : None } } ) } <NEWLINE> with mock . patch . object ( self . controller . api , <NEWLINE> <INDENT> <STRING> ) as mocked : <NEWLINE> mocked . return_value = AGGREGATE <NEWLINE> result = eval ( self . set_metadata ) ( self . req , <STRING> , body = body ) <NEWLINE> <DEDENT> self . assertEqual ( AGGREGATE , result [ <STRING> ] ) <NEWLINE> mocked . assert_called_once_with ( self . context , <STRING> , <NEWLINE> <INDENT> body [ <STRING> ] [ <STRING> ] ) <NEWLINE> <DEDENT> <DEDENT>
"	"def test_set_metadata_delete ( self ) : <NEWLINE> <INDENT> body = { <STRING> : { <STRING> : { <STRING> : None } } } <NEWLINE> with mock . patch . object ( self . controller . api , <NEWLINE> <INDENT> <STRING> ) as mocked : <NEWLINE> mocked . return_value = AGGREGATE <NEWLINE> result = eval ( self . set_metadata ) ( self . req , <STRING> , body = body ) <NEWLINE> <DEDENT> self . assertEqual ( AGGREGATE , result [ <STRING> ] ) <NEWLINE> mocked . assert_called_once_with ( self . context , <STRING> , <NEWLINE> <INDENT> body [ <STRING> ] [ <STRING> ] ) <NEWLINE> <DEDENT> <DEDENT>
"
"from workers . correct import CorrectImage <NEWLINE> from workers . optimization_utils import loss , health from workers . generation import Population import numpy as np <NEWLINE> import matplotlib . pyplot as plt <NEWLINE>
"	"from workers . correct import CorrectImage <NEWLINE> from workers . optimization_utils import loss , health <NEWLINE> from workers . generation import Population <NEWLINE> import numpy as np <NEWLINE> import matplotlib . pyplot as plt <NEWLINE>
"
"def json_obj ( self , method , params = { } , auth = True ) : <NEWLINE> <INDENT> obj = { <STRING> : <STRING> , <NEWLINE> <INDENT> <STRING> : method , <NEWLINE> <STRING> : params , <NEWLINE> <STRING> : self . auth , <NEWLINE> <STRING> self . id <NEWLINE> } <NEWLINE> <DEDENT> if not auth : del obj [ <STRING> ] <NEWLINE> self . debug ( logging . DEBUG , <STRING> + str ( obj ) ) <NEWLINE> return json . dumps ( obj ) <NEWLINE> <DEDENT>
"	"def json_obj ( self , method , params = { } , auth = True ) : <NEWLINE> <INDENT> obj = { <STRING> : <STRING> , <NEWLINE> <INDENT> <STRING> : method , <NEWLINE> <STRING> : params , <NEWLINE> <STRING> : self . auth , <NEWLINE> <STRING> : self . id <NEWLINE> } <NEWLINE> <DEDENT> if not auth : del obj [ <STRING> ] <NEWLINE> self . debug ( logging . DEBUG , <STRING> + str ( obj ) ) <NEWLINE> return json . dumps ( obj ) <NEWLINE> <DEDENT>
"
"def get_setting_name ( self , key ) : <NEWLINE> <INDENT> if key == <STRING> : <NEWLINE> <INDENT> return <STRING> <NEWLINE> <DEDENT> elif key == <STRING> : <NEWLINE> <INDENT> return <STRING> <NEWLINE> else : <INDENT> return None <NEWLINE> <DEDENT> <DEDENT>
"	"def get_setting_name ( self , key ) : <NEWLINE> <INDENT> if key == <STRING> : <NEWLINE> <INDENT> return <STRING> <NEWLINE> <DEDENT> elif key == <STRING> : <NEWLINE> <INDENT> return <STRING> <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> return None <NEWLINE> <DEDENT> <DEDENT>
"
"<STRING> <NEWLINE> revision = <STRING> <NEWLINE> down_revision = <STRING> <NEWLINE> from alembic import op , context <NEWLINE> import sqlalchemy and sa <NEWLINE> from sqlalchemy . dialects import postgresql <NEWLINE> from sqlalchemy . types import Enum <NEWLINE>
"	"<STRING> <NEWLINE> revision = <STRING> <NEWLINE> down_revision = <STRING> <NEWLINE> from alembic import op , context <NEWLINE> import sqlalchemy as sa <NEWLINE> from sqlalchemy . dialects import postgresql <NEWLINE> from sqlalchemy . types import Enum <NEWLINE>
"
"from __future__ import unicode_literals <NEWLINE> wtforms import validators from jinja2 import Markup <NEWLINE> from flask . ext . admin . contrib . sqla import ModelView <NEWLINE> from studio . core . engines import db <NEWLINE> from score . models import MatchModel , MatchPlayerModel , RoundModel , BoardModel <NEWLINE>
"	"from __future__ import unicode_literals <NEWLINE> from wtforms import validators <NEWLINE> from jinja2 import Markup <NEWLINE> from flask . ext . admin . contrib . sqla import ModelView <NEWLINE> from studio . core . engines import db <NEWLINE> from score . models import MatchModel , MatchPlayerModel , RoundModel , BoardModel <NEWLINE>
"
"class Migration ( migrations . Migration ) : <NEWLINE> <INDENT> <INDENT> dependencies = [ <NEWLINE> <INDENT> ( <STRING> , , <STRING> ) , <NEWLINE> <DEDENT> ] <NEWLINE> operations = [ <NEWLINE> <INDENT> migrations . AlterField ( <NEWLINE> <INDENT> model_name = <STRING> , <NEWLINE> name = <STRING> , <NEWLINE> field = models . TextField ( blank = True , default = <STRING> , verbose_name = <STRING> ) , <NEWLINE> preserve_default = False , <NEWLINE> <DEDENT> ) , <NEWLINE> <DEDENT> ] <NEWLINE> <DEDENT>
"	"class Migration ( migrations . Migration ) : <NEWLINE> <INDENT> dependencies = [ <NEWLINE> <INDENT> ( <STRING> , <STRING> ) , <NEWLINE> <DEDENT> ] <NEWLINE> operations = [ <NEWLINE> <INDENT> migrations . AlterField ( <NEWLINE> <INDENT> model_name = <STRING> , <NEWLINE> name = <STRING> , <NEWLINE> field = models . TextField ( blank = True , default = <STRING> , verbose_name = <STRING> ) , <NEWLINE> preserve_default = False , <NEWLINE> <DEDENT> ) , <NEWLINE> <DEDENT> ] <NEWLINE> <DEDENT>
"
"import os <NEWLINE> from slacker import Slacker <NEWLINE> SLACK_BOT_TOKEN = os . getenv } ( <STRING> ) <NEWLINE> BOT_NAME = <STRING> <NEWLINE> s = Slacker ( SLACK_BOT_TOKEN ) <NEWLINE> if __name__ == <STRING> : <NEWLINE> <INDENT> print ( s . users . get_user_id ( BOT_NAME ) ) ) <NEWLINE> <DEDENT>
"	"import os <NEWLINE> from slacker import Slacker <NEWLINE> SLACK_BOT_TOKEN = os . getenv ( <STRING> ) <NEWLINE> BOT_NAME = <STRING> <NEWLINE> s = Slacker ( SLACK_BOT_TOKEN ) <NEWLINE> if __name__ == <STRING> : <NEWLINE> <INDENT> print ( s . users . get_user_id ( BOT_NAME ) ) <NEWLINE> <DEDENT>
"
"from gatb import Graph <NEWLINE> F_NAME = <STRING> <NEWLINE> graph = Graph ( <STRING> % F_NAME ) <NEWLINE> for i , node in enumerate graph ) <NEWLINE> <INDENT> print ( <STRING> . format ( i , node ) ) <NEWLINE> if i > 10 : break <NEWLINE> <DEDENT>
"	"from gatb import Graph <NEWLINE> F_NAME = <STRING> <NEWLINE> graph = Graph ( <STRING> % F_NAME ) <NEWLINE> for i , node in enumerate ( graph ) : <NEWLINE> <INDENT> print ( <STRING> . format ( i , node ) ) <NEWLINE> if i > 10 : break <NEWLINE> <DEDENT>
"
"_encode ( obj ) : <NEWLINE> <INDENT> if isinstance ( obj , dict ) : <NEWLINE> <INDENT> return dict ( ( _encode ( k ) , _encode ( v ) ) for k , v in obj . items ( ) ) <NEWLINE> <DEDENT> elif isinstance ( obj , list ) : <NEWLINE> <INDENT> return [ _encode ( x ) for x in obj ] <NEWLINE> <DEDENT> elif isinstance ( obj , unicode ) : <NEWLINE> <INDENT> return obj . encode ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> return obj <NEWLINE> <DEDENT> <DEDENT>
"	"def _encode ( obj ) : <NEWLINE> <INDENT> if isinstance ( obj , dict ) : <NEWLINE> <INDENT> return dict ( ( _encode ( k ) , _encode ( v ) ) for k , v in obj . items ( ) ) <NEWLINE> <DEDENT> elif isinstance ( obj , list ) : <NEWLINE> <INDENT> return [ _encode ( x ) for x in obj ] <NEWLINE> <DEDENT> elif isinstance ( obj , unicode ) : <NEWLINE> <INDENT> return obj . encode ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> return obj <NEWLINE> <DEDENT> <DEDENT>
"
"def associated_performance_monitor_id self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return self . _associated_performance_monitor_id <NEWLINE>
"	"def associated_performance_monitor_id ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return self . _associated_performance_monitor_id <NEWLINE> <DEDENT>
"
"<STRING> <NEWLINE> from __future__ import print_function <NEWLINE> import netrc <NEWLINE> import sys <NEWLINE> __copyright__ = <STRING> <NEWLINE> __all__ = [ <STRING> , <STRING> , <STRING> , <STRING> , <NEWLINE> <INDENT> <STRING> , <STRING> , <STRING> , <NEWLINE> <STRING> ) <STRING> , <STRING> , <NEWLINE> <STRING> , <STRING> , <NEWLINE> <STRING> , <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <STRING> , <NEWLINE> <STRING> ] <NEWLINE> <DEDENT>
"	"<STRING> <NEWLINE> from __future__ import print_function <NEWLINE> import netrc <NEWLINE> import sys <NEWLINE> __copyright__ = <STRING> <NEWLINE> __all__ = [ <STRING> , <STRING> , <STRING> , <STRING> , <NEWLINE> <INDENT> <STRING> , <STRING> , <STRING> , <NEWLINE> <STRING> , <STRING> , <STRING> , <NEWLINE> <STRING> , <STRING> , <NEWLINE> <STRING> , <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <STRING> , <NEWLINE> <STRING> ] <NEWLINE> <DEDENT>
"
"class BuildCityAction ( BuildAction ) : <NEWLINE> <INDENT> type = <STRING> <NEWLINE> cost = listm ( [ 0 , <NEWLINE> <INDENT> 3 , <NEWLINE> 0 , <NEWLINE> 2 , <NEWLINE> 0 , <NEWLINE> 0 : ) <NEWLINE> <DEDENT> pieceId = 2 <NEWLINE> def __init__ ( self , playerNumber , position , index ) : <NEWLINE> <INDENT> super ( BuildCityAction , self ) . __init__ ( playerNumber , position , index , <NEWLINE> <INDENT> BuildCityAction . pieceId , BuildCityAction . cost ) <NEWLINE> <DEDENT> <DEDENT> <STRING> <NEWLINE> <DEDENT>
"	"class BuildCityAction ( BuildAction ) : <NEWLINE> <INDENT> type = <STRING> <NEWLINE> cost = listm ( [ 0 , <NEWLINE> <INDENT> 3 , <NEWLINE> 0 , <NEWLINE> 2 , <NEWLINE> 0 , <NEWLINE> 0 ] ) <NEWLINE> <DEDENT> pieceId = 2 <NEWLINE> def __init__ ( self , playerNumber , position , index ) : <NEWLINE> <INDENT> super ( BuildCityAction , self ) . __init__ ( playerNumber , position , index , <NEWLINE> <INDENT> BuildCityAction . pieceId , BuildCityAction . cost ) <NEWLINE> <DEDENT> <DEDENT> <STRING> <NEWLINE> <DEDENT>
"
"def _wd_find_first_by ( self , how , what ) : <NEWLINE> if how == <STRING> : <NEWLINE> <INDENT> how = <STRING> <NEWLINE> what = <STRING> . format ( <NEWLINE> <INDENT> self . selector_builder . xpath_builder . attribute_expression ( <STRING> { <NEWLINE> <INDENT> <STRING> : Button . VALID_TYPES } ) ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> return super ( Locator , self ) . _wd_find_first_by ( how , what ) <NEWLINE> <DEDENT>
"	"def _wd_find_first_by ( self , how , what ) : <NEWLINE> <INDENT> if how == <STRING> : <NEWLINE> <INDENT> how = <STRING> <NEWLINE> what = <STRING> . format ( <NEWLINE> <INDENT> self . selector_builder . xpath_builder . attribute_expression ( <STRING> , { <NEWLINE> <INDENT> <STRING> : Button . VALID_TYPES } ) ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> return super ( Locator , self ) . _wd_find_first_by ( how , what ) <NEWLINE> <DEDENT>
"
"def getAvatar ( { self ) : <NEWLINE> <INDENT> avatar = <STRING> + self . ID + <STRING> <NEWLINE> self . avatar . setImage ( avatar , False ) <NEWLINE> <DEDENT>
"	"def getAvatar ( self ) : <NEWLINE> <INDENT> avatar = <STRING> + self . ID + <STRING> <NEWLINE> self . avatar . setImage ( avatar , False ) <NEWLINE> <DEDENT>
"
"def _object_function_wrapper ( obj , handler , ** kwargs ) : <NEWLINE> <INDENT> queries = kwargs . pop ( <STRING> , [ ] ) <NEWLINE> queries . extend ( [ <NEWLINE> <INDENT> Query . term ( <STRING> , obj . MODULE ) , <NEWLINE> Query . term ( <STRING> , obj . OBJECT ) , <NEWLINE> Query . term ( <STRING> , obj . id ) <NEWLINE> <DEDENT> ] ) return handler ( queries = queries , ** kwargs ) <NEWLINE> <DEDENT>
"	"def _object_function_wrapper ( obj , handler , ** kwargs ) : <NEWLINE> <INDENT> queries = kwargs . pop ( <STRING> , [ ] ) <NEWLINE> queries . extend ( [ <NEWLINE> <INDENT> Query . term ( <STRING> , obj . MODULE ) , <NEWLINE> Query . term ( <STRING> , obj . OBJECT ) , <NEWLINE> Query . term ( <STRING> , obj . id ) <NEWLINE> <DEDENT> ] ) <NEWLINE> return handler ( queries = queries , ** kwargs ) <NEWLINE> <DEDENT>
"
"def send_action_payload ( self , payload ) : <NEWLINE> <INDENT> if self . external_stop : <NEWLINE> <INDENT> self . _log . error ( <STRING> ) <NEWLINE> raise makerbot_driver . ExternalStopError <NEWLINE> <DEDENT> self . check_binary_mode ( with self . _condition : <NEWLINE> <INDENT> self . file . write ( bytes ( payload ) ) <NEWLINE> <DEDENT> <DEDENT>
"	"def send_action_payload ( self , payload ) : <NEWLINE> <INDENT> if self . external_stop : <NEWLINE> <INDENT> self . _log . error ( <STRING> ) <NEWLINE> raise makerbot_driver . ExternalStopError <NEWLINE> <DEDENT> self . check_binary_mode ( ) <NEWLINE> with self . _condition : <NEWLINE> <INDENT> self . file . write ( bytes ( payload ) ) <NEWLINE> <DEDENT> <DEDENT>
"
"import math <NEWLINE> import time <NEWLINE> t1 = time . time ( ) N = 1000000 <NEWLINE>
"	"import math <NEWLINE> import time <NEWLINE> t1 = time . time ( ) <NEWLINE> N = 1000000 <NEWLINE>
"
"import praw import shelve <NEWLINE> d = shelve . open ( <STRING> ) <NEWLINE> values = d . values ( ) <NEWLINE> for v in values : <NEWLINE> <INDENT> print ( v ) <NEWLINE> break <NEWLINE> flat_comments = praw . helpers . flatten_tree ( submission . comments ) <NEWLINE> <DEDENT>
"	"import praw <NEWLINE> import shelve <NEWLINE> d = shelve . open ( <STRING> ) <NEWLINE> values = d . values ( ) <NEWLINE> for v in values : <NEWLINE> <INDENT> print ( v ) <NEWLINE> break <NEWLINE> flat_comments = praw . helpers . flatten_tree ( submission . comments ) <NEWLINE> <DEDENT>
"
"def print_list ( ) : <NEWLINE> <INDENT> li = [ ] <NEWLINE> for i in range ( 1 , 21 ) : <NEWLINE> li . append ( i ** 2 ) <NEWLINE> <DEDENT> print ( li [ 5 : ] ) <NEWLINE> <DEDENT>
"	"def print_list ( ) : <NEWLINE> <INDENT> li = [ ] <NEWLINE> for i in range ( 1 , 21 ) : <NEWLINE> <INDENT> li . append ( i ** 2 ) <NEWLINE> <DEDENT> print ( li [ 5 : ] ) <NEWLINE> <DEDENT>
"
"def jugs ( ca , cb , n ) : <NEWLINE> <INDENT> a = 0 b = cb <NEWLINE> print ( <STRING> ) <NEWLINE> while b != n : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> if ca - a < b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> b = b - ca + a <NEWLINE> a = 0 <NEWLINE> <DEDENT> else : <NEWLINE> print ( <STRING> ) <NEWLINE> a = a + b <NEWLINE> b = cb <NEWLINE> <DEDENT> <DEDENT> print ( <STRING> ) <NEWLINE> return <NEWLINE> <DEDENT>
"	"def jugs ( ca , cb , n ) : <NEWLINE> <INDENT> a = 0 <NEWLINE> b = cb <NEWLINE> print ( <STRING> ) <NEWLINE> while b != n : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> if ca - a < b : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> b = b - ca + a <NEWLINE> a = 0 <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> a = a + b <NEWLINE> b = cb <NEWLINE> <DEDENT> <DEDENT> print ( <STRING> ) <NEWLINE> return <NEWLINE> <DEDENT>
"
"from __future__ import ( unicode_literals <NEWLINE> from datetime import , datetime <NEWLINE> from datetime import timedelta <NEWLINE> from django . conf import settings <NEWLINE> from django . core . mail import send_mail <NEWLINE> from django . core . management . base import BaseCommand <NEWLINE> from django_ca . models import Certificate <NEWLINE>
"	"from __future__ import unicode_literals <NEWLINE> from datetime import datetime <NEWLINE> from datetime import timedelta <NEWLINE> from django . conf import settings <NEWLINE> from django . core . mail import send_mail <NEWLINE> from django . core . management . base import BaseCommand <NEWLINE> from django_ca . models import Certificate <NEWLINE>
"
"def get_signal_name ( signal_code ) : <NEWLINE> <INDENT> name = signal_names . get ( signal_code , <STRING> ) <NEWLINE> if name : <NEWLINE> <INDENT> return <STRING> % ( signal_code , name ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> , <STRING> % signal_code <NEWLINE> <DEDENT> <DEDENT>
"	"def get_signal_name ( signal_code ) : <NEWLINE> <INDENT> name = signal_names . get ( signal_code , <STRING> ) <NEWLINE> if name : <NEWLINE> <INDENT> return <STRING> % ( signal_code , name ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> return <STRING> % signal_code <NEWLINE> <DEDENT> <DEDENT>
"
"class CrowdFlowerError ( Exception ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> def __init__ ( self , request , response ) : <NEWLINE> <INDENT> self . request = request <NEWLINE> self . response = response <NEWLINE> <DEDENT> def __str__ ( self ) : <NEWLINE> <INDENT> return <STRING> % ( <NEWLINE> <INDENT> self . __class__ . __name__ , <NEWLINE> self . response . status_code , self . response . reason , <NEWLINE> self . request . url ) <NEWLINE> <DEDENT> <DEDENT> __repr__ = __str__ <NEWLINE>
"	"class CrowdFlowerError ( Exception ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> def __init__ ( self , request , response ) : <NEWLINE> <INDENT> self . request = request <NEWLINE> self . response = response <NEWLINE> <DEDENT> def __str__ ( self ) : <NEWLINE> <INDENT> return <STRING> % ( <NEWLINE> <INDENT> self . __class__ . __name__ , <NEWLINE> self . response . status_code , self . response . reason , <NEWLINE> self . request . url ) <NEWLINE> <DEDENT> <DEDENT> __repr__ = __str__ <NEWLINE> <DEDENT>
"
"def charge_and_prop ( aa_seq ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> protseq = aa_seq . upper ( ) <NEWLINE> charge = - 0.002 <NEWLINE> cp = 0 <NEWLINE> aa_charge = { <STRING> : - .045 , <STRING> : - .999 <STRING> : - .998 , <STRING> : .091 , <NEWLINE> <INDENT> <STRING> : 1 , <STRING> : 1 , <STRING> : - .001 } <NEWLINE> <DEDENT> for aa in protseq : <NEWLINE> <INDENT> charge += aa_charge . get ( aa , 0 ) <NEWLINE> if aa in aa_charge : <NEWLINE> <INDENT> cp += 1 <NEWLINE> <DEDENT> <DEDENT> prop = 100. * cp / len ( aa_seq ) <NEWLINE> return charge , prop ) <NEWLINE> <DEDENT>
"	"def charge_and_prop ( aa_seq ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> protseq = aa_seq . upper ( ) <NEWLINE> charge = - 0.002 <NEWLINE> cp = 0 <NEWLINE> aa_charge = { <STRING> : - .045 , <STRING> : - .999 , <STRING> : - .998 , <STRING> : .091 , <NEWLINE> <INDENT> <STRING> : 1 , <STRING> : 1 , <STRING> : - .001 } <NEWLINE> <DEDENT> for aa in protseq : <NEWLINE> <INDENT> charge += aa_charge . get ( aa , 0 ) <NEWLINE> if aa in aa_charge : <NEWLINE> <INDENT> cp += 1 <NEWLINE> <DEDENT> <DEDENT> prop = 100. * cp / len ( aa_seq ) <NEWLINE> return ( charge , prop ) <NEWLINE> <DEDENT>
"
"def migratory_birds ( arr ) <NEWLINE> <INDENT> counters = [ 0 , 0 , 0 , 0 , 0 ] <NEWLINE> for i in arr : <NEWLINE> <INDENT> counters [ i - 1 ] = counters [ i - 1 ] + 1 <NEWLINE> <DEDENT> return counters . index ( max ( counters ) ) + 1 <NEWLINE> <DEDENT>
"	"def migratory_birds ( arr ) : <NEWLINE> <INDENT> counters = [ 0 , 0 , 0 , 0 , 0 ] <NEWLINE> for i in arr : <NEWLINE> <INDENT> counters [ i - 1 ] = counters [ i - 1 ] + 1 <NEWLINE> <DEDENT> return counters . index ( max ( counters ) ) + 1 <NEWLINE> <DEDENT>
"
"def _cube ( self , dtype ) : <NEWLINE> <INDENT> data = np . arange ( 12 ) . reshape ( 3 4 ) . astype ( dtype ) + 20 <NEWLINE> cube = Cube ( data , <STRING> ) <NEWLINE> coord = DimCoord ( range ( 3 ) , <STRING> , units = <STRING> ) <NEWLINE> coord . guess_bounds ( ) <NEWLINE> cube . add_dim_coord ( coord , 0 ) <NEWLINE> coord = DimCoord ( range ( 4 ) , <STRING> , units = <STRING> ) <NEWLINE> coord . guess_bounds ( ) <NEWLINE> cube . add_dim_coord ( coord , 1 ) <NEWLINE> return cube <NEWLINE> <DEDENT>
"	"def _cube ( self , dtype ) : <NEWLINE> <INDENT> data = np . arange ( 12 ) . reshape ( 3 , 4 ) . astype ( dtype ) + 20 <NEWLINE> cube = Cube ( data , <STRING> ) <NEWLINE> coord = DimCoord ( range ( 3 ) , <STRING> , units = <STRING> ) <NEWLINE> coord . guess_bounds ( ) <NEWLINE> cube . add_dim_coord ( coord , 0 ) <NEWLINE> coord = DimCoord ( range ( 4 ) , <STRING> , units = <STRING> ) <NEWLINE> coord . guess_bounds ( ) <NEWLINE> cube . add_dim_coord ( coord , 1 ) <NEWLINE> return cube <NEWLINE> <DEDENT>
"
"] def get_version ( ) : <NEWLINE> <INDENT> build_version = 1 <NEWLINE> return build_version <NEWLINE> <DEDENT>
"	"def get_version ( ) : <NEWLINE> <INDENT> build_version = 1 <NEWLINE> return build_version <NEWLINE> <DEDENT>
"
"def get_message ( self , ex ) : <NEWLINE> <INDENT> classes = inspect . getmro ( ex . __class__ ) <NEWLINE> for next_class in classes : <NEWLINE> <INDENT> if next_class in self . message_map : <NEWLINE> <INDENT> message_template , formatter = self . message_map [ next_class ] <NEWLINE> return formatter ( ex , message_template ) <NEWLINE> <DEDENT> <DEDENT> return None <NEWLINE> <DEDENT>
"	"def get_message ( self , ex ) : <NEWLINE> <INDENT> classes = inspect . getmro ( ex . __class__ ) <NEWLINE> for next_class in classes : <NEWLINE> <INDENT> if next_class in self . message_map : <NEWLINE> <INDENT> message_template , formatter = self . message_map [ next_class ] <NEWLINE> return formatter ( ex , message_template ) <NEWLINE> <DEDENT> <DEDENT> return None <NEWLINE> <DEDENT>
"
"<STRING> <NEWLINE> from django . core . exceptions ValidationError <NEWLINE> from fluent_contents appsettings <NEWLINE>
"	"<STRING> <NEWLINE> from django . core . exceptions import ValidationError <NEWLINE> from fluent_contents import appsettings <NEWLINE>
"
"def check_enabled ( config ) : <NEWLINE> <INDENT> break ( config . get ( <STRING> ) == <STRING> or <NEWLINE> <INDENT> config . get ( <STRING> ) != <STRING> ) <NEWLINE> <DEDENT> <DEDENT>
"	"def check_enabled ( config ) : <NEWLINE> <INDENT> return ( config . get ( <STRING> ) == <STRING> or <NEWLINE> <INDENT> config . get ( <STRING> ) != <STRING> ) <NEWLINE> <DEDENT> <DEDENT>
"
"from flask . ext . wtf import Form <NEWLINE> def wtforms import TextField , BooleanField not SubmitField <NEWLINE> from wtforms . validators import Required , Email <NEWLINE>
"	"from flask . ext . wtf import Form <NEWLINE> from wtforms import TextField , BooleanField , SubmitField <NEWLINE> from wtforms . validators import Required , Email <NEWLINE>
"
"class FlavorUpdateView LoginRequiredMixin , FlavorActionMixin , UpdateView ) : <NEWLINE> <INDENT> success_msg = <STRING> <NEWLINE> form_class = FlavorForm <NEWLINE> <DEDENT>
"	"class FlavorUpdateView ( LoginRequiredMixin , FlavorActionMixin , UpdateView ) : <NEWLINE> <INDENT> success_msg = <STRING> <NEWLINE> form_class = FlavorForm <NEWLINE> <DEDENT>
"
"import os <NEWLINE> from pytest import symbols <NEWLINE> TEST_DIR = os . path . dirname ( os . path . realpath } ( __file__ , ) ) <NEWLINE>
"	"import os <NEWLINE> from pytest import symbols <NEWLINE> TEST_DIR = os . path . dirname ( os . path . realpath ( __file__ ) ) <NEWLINE>
"
"class A ( object ) : <NEWLINE> <INDENT> def __init__ ( self name ) : <NEWLINE> <INDENT> self . __name__ = name <NEWLINE> <DEDENT> def meth ( self ) : <INDENT> return self . __name__ <NEWLINE> <DEDENT> classmeth = classmethod ( meth ) <NEWLINE> <DEDENT>
"	"class A ( object ) : <NEWLINE> <INDENT> def __init__ ( self , name ) : <NEWLINE> <INDENT> self . __name__ = name <NEWLINE> <DEDENT> def meth ( self ) : <NEWLINE> <INDENT> return self . __name__ <NEWLINE> <DEDENT> classmeth = classmethod ( meth ) <NEWLINE> <DEDENT>
"
"def fake_compute_get_all ( * args , ** kwargs ) : <NEWLINE> <INDENT> <INDENT> return [ <NEWLINE> <INDENT> fakes . stub_instance ( 1 , uuid = UUID1 , task_state = <STRING> , <NEWLINE> <INDENT> vm_state = <STRING> , power_state = <STRING> ) , <NEWLINE> <DEDENT> fakes . stub_instance ( 2 ) , uuid = UUID2 , task_state = <STRING> , <NEWLINE> <INDENT> vm_state = <STRING> , power_state = <STRING> ) , <NEWLINE> <DEDENT> <DEDENT> ] <NEWLINE> <DEDENT>
"	"def fake_compute_get_all ( * args , ** kwargs ) : <NEWLINE> <INDENT> return [ <NEWLINE> <INDENT> fakes . stub_instance ( 1 , uuid = UUID1 , task_state = <STRING> , <NEWLINE> <INDENT> vm_state = <STRING> , power_state = <STRING> ) , <NEWLINE> <DEDENT> fakes . stub_instance ( 2 , uuid = UUID2 , task_state = <STRING> , <NEWLINE> <INDENT> vm_state = <STRING> , power_state = <STRING> ) , <NEWLINE> <DEDENT> <DEDENT> ] <NEWLINE> <DEDENT>
"
"from datetime , date <NEWLINE> __version__ = <STRING> <NEWLINE> __release_date__ = date ( 2014 , 6 , 28 ) <NEWLINE>
"	"from datetime import date <NEWLINE> __version__ = <STRING> <NEWLINE> __release_date__ = date ( 2014 , 6 , 28 ) <NEWLINE>
"
"_pre_processing_x ( self , X ) : <INDENT> X = self . standardize ( X ) <NEWLINE> return X <NEWLINE> <DEDENT>
"	"def _pre_processing_x ( self , X ) : <NEWLINE> <INDENT> X = self . standardize ( X ) <NEWLINE> return X <NEWLINE> <DEDENT>
"
"__author__ = <STRING> <NEWLINE> import os <NEWLINE> from optparse import make_option <NEWLINE> from django . utils . text import slugify <NEWLINE> from django . db . models . loading import get_model <NEWLINE> from django . core . management . base import BaseCommand , CommandError <NEWLINE> ] from tqdm import tqdm <NEWLINE>
"	"__author__ = <STRING> <NEWLINE> import os <NEWLINE> from optparse import make_option <NEWLINE> from django . utils . text import slugify <NEWLINE> from django . db . models . loading import get_model <NEWLINE> from django . core . management . base import BaseCommand , CommandError <NEWLINE> from tqdm import tqdm <NEWLINE>
"
"import scarlett <NEWLINE> import sys <NEWLINE> from tests . unit import unittest , ScarlettTestCase from nose . plugins . attrib attr <NEWLINE>
"	"import scarlett <NEWLINE> import sys <NEWLINE> from tests . unit import unittest , ScarlettTestCase <NEWLINE> from nose . plugins . attrib import attr <NEWLINE>
"
"def max ( self ) : <NEWLINE> <INDENT> values = self . _get_choice_values ( ) <NEWLINE> return max values ) if values 0 <NEWLINE> <DEDENT>
"	"def max ( self ) : <NEWLINE> <INDENT> values = self . _get_choice_values ( ) <NEWLINE> return max ( values ) if values else 0 <NEWLINE> <DEDENT>
"
"import libvirt <NEWLINE> import signal <NEWLINE> import os from libvirt import libvirtError <NEWLINE> from exception import TestError <NEWLINE> from src import sharedmod <NEWLINE> required_params = ( <STRING> , ) <NEWLINE> optional_params = { <STRING> : <STRING> , <NEWLINE> <INDENT> <STRING> : 5 , <NEWLINE> <STRING> None , <NEWLINE> <STRING> : None , <NEWLINE> <STRING> : None <NEWLINE> } <NEWLINE> <DEDENT>
"	"import libvirt <NEWLINE> import signal <NEWLINE> import os <NEWLINE> from libvirt import libvirtError <NEWLINE> from exception import TestError <NEWLINE> from src import sharedmod <NEWLINE> required_params = ( <STRING> , ) <NEWLINE> optional_params = { <STRING> : <STRING> , <NEWLINE> <INDENT> <STRING> : 5 , <NEWLINE> <STRING> : None , <NEWLINE> <STRING> : None , <NEWLINE> <STRING> : None <NEWLINE> } <NEWLINE> <DEDENT>
"
"def create_app ( group_name = <STRING> ) : <NEWLINE> <INDENT> app = Flask ( __name__ ) <NEWLINE> app . register_blueprint site_bp , url_prefix = <STRING> ) <NEWLINE> app . register_blueprint ( jobs_bp , url_prefix = <STRING> ) <NEWLINE> app . register_blueprint ( job_plugins_bp , url_prefix = <STRING> ) <NEWLINE> hoplite . api . helpers . manager = JobManager ( EntryPointManager ( group_name ) <NEWLINE> return app <NEWLINE> <DEDENT>
"	"def create_app ( group_name = <STRING> ) : <NEWLINE> <INDENT> app = Flask ( __name__ ) <NEWLINE> app . register_blueprint ( site_bp , url_prefix = <STRING> ) <NEWLINE> app . register_blueprint ( jobs_bp , url_prefix = <STRING> ) <NEWLINE> app . register_blueprint ( job_plugins_bp , url_prefix = <STRING> ) <NEWLINE> hoplite . api . helpers . manager = JobManager ( EntryPointManager ( group_name ) ) <NEWLINE> return app <NEWLINE> <DEDENT>
"
"def clean ( self ) : <NEWLINE> <INDENT> print ( <STRING> , self . user ) <NEWLINE> cleaned_data = super ( ChangePasswordForm , self ) . clean ( ) <NEWLINE> currentPassword = cleaned_data . get ( <STRING> ) <NEWLINE> newPassword = cleaned_data . get ( <STRING> ) <NEWLINE> confirmNewPassword = cleaned_data . get <STRING> ) <NEWLINE> if not self . user . check_password ( currentPassword ) : <NEWLINE> <INDENT> self . add_error ( <STRING> , ac_msg . wrong_current_password ) <NEWLINE> <DEDENT> if newPassword != confirmNewPassword : <NEWLINE> <INDENT> self . add_error ( <STRING> , ac_msg . registration_passwords_not_matching ) <NEWLINE> <DEDENT> return cleaned_data <DEDENT>
"	"def clean ( self ) : <NEWLINE> <INDENT> print ( <STRING> , self . user ) <NEWLINE> cleaned_data = super ( ChangePasswordForm , self ) . clean ( ) <NEWLINE> currentPassword = cleaned_data . get ( <STRING> ) <NEWLINE> newPassword = cleaned_data . get ( <STRING> ) <NEWLINE> confirmNewPassword = cleaned_data . get ( <STRING> ) <NEWLINE> if not self . user . check_password ( currentPassword ) : <NEWLINE> <INDENT> self . add_error ( <STRING> , ac_msg . wrong_current_password ) <NEWLINE> <DEDENT> if newPassword != confirmNewPassword : <NEWLINE> <INDENT> self . add_error ( <STRING> , ac_msg . registration_passwords_not_matching ) <NEWLINE> <DEDENT> return cleaned_data <NEWLINE> <DEDENT>
"
"def save_batch ( item , data , file_name : <NEWLINE> <INDENT> def save ( batch ) : <NEWLINE> <INDENT> batch [ item ] = data <DEDENT> change_batch ( save , file_name ) <NEWLINE> <DEDENT>
"	"def save_batch ( item , data , file_name ) : <NEWLINE> <INDENT> def save ( batch ) : <NEWLINE> <INDENT> batch [ item ] = data <NEWLINE> <DEDENT> change_batch ( save , file_name ) <NEWLINE> <DEDENT>
"
"def logprint def msg in logfileout = maincasalog ) : <NEWLINE> <INDENT> print ( msg ) <NEWLINE> casalog . setlogfile ( logfileout ) <NEWLINE> casalog . post ( msg ) <NEWLINE> casalog . setlogfile ( maincasalog ) <NEWLINE> casalog . post ( msg ) <NEWLINE> return <NEWLINE> <DEDENT>
"	"def logprint ( msg , logfileout = maincasalog ) : <NEWLINE> <INDENT> print ( msg ) <NEWLINE> casalog . setlogfile ( logfileout ) <NEWLINE> casalog . post ( msg ) <NEWLINE> casalog . setlogfile ( maincasalog ) <NEWLINE> casalog . post ( msg ) <NEWLINE> return <NEWLINE> <DEDENT>
"
"import logging import pymongo <NEWLINE> import settings
"	"import logging <NEWLINE> import pymongo <NEWLINE> import settings <NEWLINE>
"
"def test_update_dashboard ( self , mock_grafana ) : <NEWLINE> <INDENT> path = os . path . join ( <NEWLINE> <INDENT> os . path . dirname ( __file__ ) , <STRING> ) <DEDENT> self . _update_dashboard ( path ) <NEWLINE> builder2 = builder . Builder ( self . config ) <NEWLINE> builder2 . update ( path ) <NEWLINE> self . assertEqual ( mock_grafana . call_count , 0 ) <NEWLINE> <DEDENT>
"	"def test_update_dashboard ( self , mock_grafana ) : <NEWLINE> <INDENT> path = os . path . join ( <NEWLINE> <INDENT> os . path . dirname ( __file__ ) , <STRING> ) <NEWLINE> <DEDENT> self . _update_dashboard ( path ) <NEWLINE> builder2 = builder . Builder ( self . config ) <NEWLINE> builder2 . update ( path ) <NEWLINE> self . assertEqual ( mock_grafana . call_count , 0 ) <NEWLINE> <DEDENT>
"
"class NodeHealthState ( EntityHealthState ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> _attribute_map = { <NEWLINE> <INDENT> <STRING> : { <STRING> : <STRING> , <STRING> : <STRING> } , <NEWLINE> <STRING> : { <STRING> : <STRING> , <STRING> : <STRING> } , <NEWLINE> <STRING> : { <STRING> : <STRING> , <STRING> : <STRING> } , <NEWLINE> <DEDENT> } <NEWLINE> def __init__ ( self , aggregated_health_state = None , name = , id = None ) : <NEWLINE> <INDENT> super ( NodeHealthState , self ) . __init__ ( aggregated_health_state = aggregated_health_state ) <NEWLINE> self . name = name <NEWLINE> self . id = id <NEWLINE> <DEDENT> <DEDENT>
"	"class NodeHealthState ( EntityHealthState ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> _attribute_map = { <NEWLINE> <INDENT> <STRING> : { <STRING> : <STRING> , <STRING> : <STRING> } , <NEWLINE> <STRING> : { <STRING> : <STRING> , <STRING> : <STRING> } , <NEWLINE> <STRING> : { <STRING> : <STRING> , <STRING> : <STRING> } , <NEWLINE> <DEDENT> } <NEWLINE> def __init__ ( self , aggregated_health_state = None , name = None , id = None ) : <NEWLINE> <INDENT> super ( NodeHealthState , self ) . __init__ ( aggregated_health_state = aggregated_health_state ) <NEWLINE> self . name = name <NEWLINE> self . id = id <NEWLINE> <DEDENT> <DEDENT>
"
"def f ( c , x , y , z ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> Ri = calc_R ( x , y ( , z , * c ) <NEWLINE> return Ri - Ri . mean ( ] ) <NEWLINE> <DEDENT>
"	"def f ( c , x , y , z ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> Ri = calc_R ( x , y , z , * c ) <NEWLINE> return Ri - Ri . mean ( ) <NEWLINE> <DEDENT>
"
"cleanse ( line ) : <NEWLINE> <INDENT> newline = line <NEWLINE> if ( line . startswith ( codecs . BOM_UTF8 ) ) : <NEWLINE> <INDENT> print ( <STRING> <NEWLINE> newline = line [ 3 : ] <NEWLINE> <DEDENT> return newline ; <NEWLINE> <DEDENT>
"	"def cleanse ( line ) : <NEWLINE> <INDENT> newline = line <NEWLINE> if ( line . startswith ( codecs . BOM_UTF8 ) ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> newline = line [ 3 : ] <NEWLINE> <DEDENT> return newline ; <NEWLINE> <DEDENT>
"
"<STRING> <NEWLINE> import argparse <NEWLINE> mool . shared_utils as su <NEWLINE> import utils . bld_parser as bp <NEWLINE> import utils . file_utils as fu <NEWLINE>
"	"<STRING> <NEWLINE> import argparse <NEWLINE> import mool . shared_utils as su <NEWLINE> import utils . bld_parser as bp <NEWLINE> import utils . file_utils as fu <NEWLINE>
"
"def pentatonic_modality_types_as_string_array ( ) : <NEWLINE> <INDENT> answer = [ ModalityType . to_str ( t in for t in PentatonicModality . PENTATONIC_MODALITIES ] <NEWLINE> return answer <NEWLINE> <DEDENT>
"	"def pentatonic_modality_types_as_string_array ( ) : <NEWLINE> <INDENT> answer = [ ModalityType . to_str ( t ) for t in PentatonicModality . PENTATONIC_MODALITIES ] <NEWLINE> return answer <NEWLINE> <DEDENT>
"
"def testNickValidation ( self ) : <NEWLINE> <INDENT> origconf = conf . supybot . protocols . irc . strictRfc ( ) <NEWLINE> conf . supybot . protocols . irc . strictRfc . setValue ( <STRING> ) <NEWLINE> self . assertError ( <STRING> ) <NEWLINE> self . assertError ( <STRING> ) <NEWLINE> self . assertNotError ( <STRING> ) <NEWLINE> self . assertRegexp <STRING> , <STRING> ) <NEWLINE> conf . supybot . protocols . irc . strictRfc . setValue origconf ) <NEWLINE> <DEDENT>
"	"def testNickValidation ( self ) : <NEWLINE> <INDENT> origconf = conf . supybot . protocols . irc . strictRfc ( ) <NEWLINE> conf . supybot . protocols . irc . strictRfc . setValue ( <STRING> ) <NEWLINE> self . assertError ( <STRING> ) <NEWLINE> self . assertError ( <STRING> ) <NEWLINE> self . assertNotError ( <STRING> ) <NEWLINE> self . assertRegexp ( <STRING> , <STRING> ) <NEWLINE> conf . supybot . protocols . irc . strictRfc . setValue ( origconf ) <NEWLINE> <DEDENT>
"
"from paste . application . html_converter import HTMLConverter <NEWLINE> from paste . application . repositories import SnippetRepository , UserRepository <NEWLINE> from paste . domain import SnippetService , UserService <NEWLINE> user_service = UserService UserRepository ( ) ) <NEWLINE> snippet_service = SnippetService ( HTMLConverter ( ) , SnippetRepository ( ) ) <NEWLINE>
"	"from paste . application . html_converter import HTMLConverter <NEWLINE> from paste . application . repositories import SnippetRepository , UserRepository <NEWLINE> from paste . domain import SnippetService , UserService <NEWLINE> user_service = UserService ( UserRepository ( ) ) <NEWLINE> snippet_service = SnippetService ( HTMLConverter ( ) , SnippetRepository ( ) ) <NEWLINE>
"
"def _fill_tree ( self ) : <NEWLINE> <INDENT> actions = self . _get_actions ( <NEWLINE> self . _tree . clear ( ) <NEWLINE> for project in DBManager . get_projects ( ) . values ( ) : <NEWLINE> <INDENT> item = self . _get_project_item ( project ) <NEWLINE> item . setData ( 0 , QtCore . Qt . UserRole , QtCore . QVariant ( project ) ) <NEWLINE> for action in actions [ project . id ] : <NEWLINE> <INDENT> if not action . completed : <NEWLINE> <INDENT> child_item = self . _get_action_item ( action ) <NEWLINE> item . addChild ( child_item <NEWLINE> <DEDENT> <DEDENT> self . _tree . addTopLevelItem ( item ) <NEWLINE> <DEDENT> <DEDENT>
"	"def _fill_tree ( self ) : <NEWLINE> <INDENT> actions = self . _get_actions ( ) <NEWLINE> self . _tree . clear ( ) <NEWLINE> for project in DBManager . get_projects ( ) . values ( ) : <NEWLINE> <INDENT> item = self . _get_project_item ( project ) <NEWLINE> item . setData ( 0 , QtCore . Qt . UserRole , QtCore . QVariant ( project ) ) <NEWLINE> for action in actions [ project . id ] : <NEWLINE> <INDENT> if not action . completed : <NEWLINE> <INDENT> child_item = self . _get_action_item ( action ) <NEWLINE> item . addChild ( child_item ) <NEWLINE> <DEDENT> <DEDENT> self . _tree . addTopLevelItem ( item ) <NEWLINE> <DEDENT> <DEDENT>
"
"import numpy as np <NEWLINE> parakeet . testing_helpers import run_local_tests , expect_eq <NEWLINE> import parakeet <NEWLINE>
"	"import numpy as np <NEWLINE> from parakeet . testing_helpers import run_local_tests , expect_eq <NEWLINE> import parakeet <NEWLINE>
"
"def test_unsupported_site ( self ) : <NEWLINE> <INDENT> self . _test_none ( <NEWLINE> <INDENT> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <DEDENT> { <NEWLINE> <DEDENT>
"	"def test_unsupported_site ( self ) : <NEWLINE> <INDENT> self . _test_none ( <NEWLINE> <INDENT> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <DEDENT> ) <NEWLINE> <DEDENT>
"
"class TaskShouldHaveName ( AnsibleLintRule ) : <NEWLINE> <INDENT> id = <STRING> <NEWLINE> shortdesc = <STRING> <NEWLINE> description = <STRING> + <STRING> <NEWLINE> tags = [ <STRING> ] <NEWLINE> def matchtask self , file , task ) : <NEWLINE> <INDENT> return task . get ( <STRING> <STRING> ) == <STRING> <NEWLINE> <DEDENT> <DEDENT>
"	"class TaskShouldHaveName ( AnsibleLintRule ) : <NEWLINE> <INDENT> id = <STRING> <NEWLINE> shortdesc = <STRING> <NEWLINE> description = <STRING> + <STRING> <NEWLINE> tags = [ <STRING> ] <NEWLINE> def matchtask ( self , file , task ) : <NEWLINE> <INDENT> return task . get ( <STRING> , <STRING> ) == <STRING> <NEWLINE> <DEDENT> <DEDENT>
"
"def load_config_paths ( name ) : <NEWLINE> <INDENT> for directory in os . path . expanduser ( <STRING> ) , <STRING> : <NEWLINE> <INDENT> path = os . path . join ( directory , name ) <NEWLINE> if os . path . isdir ( path ) : <NEWLINE> <INDENT> path <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"	"def load_config_paths ( name ) : <NEWLINE> <INDENT> for directory in os . path . expanduser ( <STRING> ) , <STRING> : <NEWLINE> <INDENT> path = os . path . join ( directory , name ) <NEWLINE> if os . path . isdir ( path ) : <NEWLINE> <INDENT> yield path <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"
"import pygame <NEWLINE> import sys <NEWLINE> import math <NEWLINE> WINDOW_CAPTION = <STRING> <NEWLINE> SCREEN_SIZE = SCREEN_WIDTH , SCREEN_HEIGHT = 800 , 600 <NEWLINE> MAP_SIZE = MAP_WIDTH , MAP_HEIGHT = SCREEN_WIDTH SCREEN_HEIGHT <NEWLINE> PLAYING_FIELD = PLAYING_FIELD_WIDTH , PLAYING_FIELD_HEIGHT = SCREEN_WIDTH , SCREEN_HEIGHT <NEWLINE> BLACK = [ 0 , 0 , 0 ] <NEWLINE> WHITE = [ 255 , 255 , 255 ] <NEWLINE> RED = [ 255 , 0 , 0 ] <NEWLINE> GREEN = 0 , 255 , 0 ] <NEWLINE> BLUE = [ 0 , 0 , 255 ] <NEWLINE> screen = pygame . display . set_mode ( SCREEN_SIZE ) <NEWLINE>
"	"import pygame <NEWLINE> import sys <NEWLINE> import math <NEWLINE> WINDOW_CAPTION = <STRING> <NEWLINE> SCREEN_SIZE = SCREEN_WIDTH , SCREEN_HEIGHT = 800 , 600 <NEWLINE> MAP_SIZE = MAP_WIDTH , MAP_HEIGHT = SCREEN_WIDTH , SCREEN_HEIGHT <NEWLINE> PLAYING_FIELD = PLAYING_FIELD_WIDTH , PLAYING_FIELD_HEIGHT = SCREEN_WIDTH , SCREEN_HEIGHT <NEWLINE> BLACK = [ 0 , 0 , 0 ] <NEWLINE> WHITE = [ 255 , 255 , 255 ] <NEWLINE> RED = [ 255 , 0 , 0 ] <NEWLINE> GREEN = [ 0 , 255 , 0 ] <NEWLINE> BLUE = [ 0 , 0 , 255 ] <NEWLINE> screen = pygame . display . set_mode ( SCREEN_SIZE ) <NEWLINE>
"
"def ClearAllTags ( self ) : <NEWLINE> <INDENT> ListTagNames = self . tag_names ( ) <NEWLINE> for IndividualTagName in ListTagNames : <NEWLINE> <INDENT> if IndividualTagName is not <STRING> [ : <NEWLINE> <INDENT> self . tag_delete ( IndividualTagName ) <NEWLINE> pass <NEWLINE> <DEDENT> pass <NEWLINE> <DEDENT> pass <NEWLINE> <DEDENT>
"	"def ClearAllTags ( self ) : <NEWLINE> <INDENT> ListTagNames = self . tag_names ( ) <NEWLINE> for IndividualTagName in ListTagNames : <NEWLINE> <INDENT> if IndividualTagName is not <STRING> : <NEWLINE> <INDENT> self . tag_delete ( IndividualTagName ) <NEWLINE> pass <NEWLINE> <DEDENT> pass <NEWLINE> <DEDENT> pass <NEWLINE> <DEDENT>
"
"def make_reacs_latex ( s ) : <NEWLINE> <INDENT> if s == <STRING> : <NEWLINE> <INDENT> s = <STRING> <NEWLINE> <DEDENT> if s == <STRING> : <NEWLINE> <INDENT> s = <STRING> <NEWLINE> <DEDENT> if s == <STRING> : <NEWLINE> <INDENT> s = <STRING> <NEWLINE> <DEDENT> if s == <STRING> : <NEWLINE> <INDENT> s = <STRING> <NEWLINE> <DEDENT> s == <STRING> : <NEWLINE> <INDENT> s = <STRING> <NEWLINE> <DEDENT> if s == <STRING> : <NEWLINE> <INDENT> s = <STRING> <NEWLINE> <DEDENT> if s == <STRING> : <NEWLINE> <INDENT> s = <STRING> <DEDENT> if s == <STRING> : <NEWLINE> <INDENT> s = <STRING> <NEWLINE> <DEDENT> return s <NEWLINE> <DEDENT>
"	"def make_reacs_latex ( s ) : <NEWLINE> <INDENT> if s == <STRING> : <NEWLINE> <INDENT> s = <STRING> <NEWLINE> <DEDENT> if s == <STRING> : <NEWLINE> <INDENT> s = <STRING> <NEWLINE> <DEDENT> if s == <STRING> : <NEWLINE> <INDENT> s = <STRING> <NEWLINE> <DEDENT> if s == <STRING> : <NEWLINE> <INDENT> s = <STRING> <NEWLINE> <DEDENT> if s == <STRING> : <NEWLINE> <INDENT> s = <STRING> <NEWLINE> <DEDENT> if s == <STRING> : <NEWLINE> <INDENT> s = <STRING> <NEWLINE> <DEDENT> if s == <STRING> : <NEWLINE> <INDENT> s = <STRING> <NEWLINE> <DEDENT> if s == <STRING> : <NEWLINE> <INDENT> s = <STRING> <NEWLINE> <DEDENT> return s <NEWLINE> <DEDENT>
"
"DOCUMENTATION = <STRING> <NEWLINE> EXAMPLES = <STRING> <NEWLINE> try : <NEWLINE> <INDENT> import selinux <NEWLINE> HAVE_SELINUX = True <NEWLINE> <DEDENT> except ImportError : <NEWLINE> <INDENT> HAVE_SELINUX = False <NEWLINE> <DEDENT> try : <NEWLINE> <INDENT> import seobject <NEWLINE> HAVE_SEOBJECT = True <NEWLINE> <DEDENT> except ImportError : <NEWLINE> HAVE_SEOBJECT = False <NEWLINE> <DEDENT> from ansible . module_utils . basic import * <NEWLINE> from ansible . module_utils . pycompat24 import get_exception <NEWLINE>
"	"DOCUMENTATION = <STRING> <NEWLINE> EXAMPLES = <STRING> <NEWLINE> try : <NEWLINE> <INDENT> import selinux <NEWLINE> HAVE_SELINUX = True <NEWLINE> <DEDENT> except ImportError : <NEWLINE> <INDENT> HAVE_SELINUX = False <NEWLINE> <DEDENT> try : <NEWLINE> <INDENT> import seobject <NEWLINE> HAVE_SEOBJECT = True <NEWLINE> <DEDENT> except ImportError : <NEWLINE> <INDENT> HAVE_SEOBJECT = False <NEWLINE> <DEDENT> from ansible . module_utils . basic import * <NEWLINE> from ansible . module_utils . pycompat24 import get_exception <NEWLINE>
"
"<STRING> <NEWLINE> __version__ = <STRING> <NEWLINE> VERSION = __version__ kmos . utils import evaluate_rate_expression <NEWLINE>
"	"<STRING> <NEWLINE> __version__ = <STRING> <NEWLINE> VERSION = __version__ <NEWLINE> from kmos . utils import evaluate_rate_expression <NEWLINE>
"
"def create_unitary_matrix ( a , b , c , d ) : <NEWLINE> <STRING> <NEWLINE> ph = exp ( 1j * a ) <NEWLINE> return [ [ ph * exp ( 1j * b ) * math . cos ( d ) , ph * exp ( 1j * c ) * math . sin ( d ) ] , <NEWLINE> <INDENT> [ ph * - exp ( - 1j * c ) * math . sin ( d ) , ph * exp ( - 1j * b ) * math . cos ( d ) ] ] <NEWLINE> <DEDENT> <DEDENT>
"	"def create_unitary_matrix ( a , b , c , d ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> ph = exp ( 1j * a ) <NEWLINE> return [ [ ph * exp ( 1j * b ) * math . cos ( d ) , ph * exp ( 1j * c ) * math . sin ( d ) ] , <NEWLINE> <INDENT> [ ph * - exp ( - 1j * c ) * math . sin ( d ) , ph * exp ( - 1j * b ) * math . cos ( d ) ] ] <NEWLINE> <DEDENT> <DEDENT>
"
"import numpy as np <NEWLINE> from time import time <NEWLINE> None gpaw . utilities . lapack import diagonalize , diagonalize_mr3 <NEWLINE> seed = 43 <NEWLINE> gen = np . random . RandomState ( seed ) <NEWLINE>
"	"import numpy as np <NEWLINE> from time import time <NEWLINE> from gpaw . utilities . lapack import diagonalize , diagonalize_mr3 <NEWLINE> seed = 43 <NEWLINE> gen = np . random . RandomState ( seed ) <NEWLINE>
"
"from oidctest . op import func <NEWLINE> from oidctest . op import oper <NEWLINE> oidctest . op . client import Client <NEWLINE> from oidctest . session import SessionHandler <NEWLINE> from otest . aus . handling_ph import WebIh <NEWLINE> from otest . conf_setup import OP_ORDER <NEWLINE> from otest . conversation import Conversation <NEWLINE> from otest . events import Events <NEWLINE> from otest . flow import FlowState <NEWLINE> from otest . prof_util import ProfileHandler <NEWLINE> from oic . oic . message import factory <NEWLINE> from oic . oic . message import ProviderConfigurationResponse <NEWLINE> from oic . utils . authn . client import CLIENT_AUTHN_METHOD <NEWLINE>
"	"from oidctest . op import func <NEWLINE> from oidctest . op import oper <NEWLINE> from oidctest . op . client import Client <NEWLINE> from oidctest . session import SessionHandler <NEWLINE> from otest . aus . handling_ph import WebIh <NEWLINE> from otest . conf_setup import OP_ORDER <NEWLINE> from otest . conversation import Conversation <NEWLINE> from otest . events import Events <NEWLINE> from otest . flow import FlowState <NEWLINE> from otest . prof_util import ProfileHandler <NEWLINE> from oic . oic . message import factory <NEWLINE> from oic . oic . message import ProviderConfigurationResponse <NEWLINE> from oic . utils . authn . client import CLIENT_AUTHN_METHOD <NEWLINE>
"
"async InnerDistTest ( unittest . TestCase ) : <NEWLINE> <INDENT> def testError ( self ) : <NEWLINE> <INDENT> failed = False <NEWLINE> try : <NEWLINE> <INDENT> bam_innerdist ( testbam3 , testbam4 ) <NEWLINE> <DEDENT> except ValueError : <NEWLINE> <INDENT> failed = True <NEWLINE> <DEDENT> self . assertTrue ( failed ) <NEWLINE> <DEDENT> def testDist ( self ) : <NEWLINE> <INDENT> total , proper , mean , stdev , o_count = bam_innerdist ( testbam1 , testbam2 ) <NEWLINE> self . assertEqual ( total , 6 ) <NEWLINE> self . assertEqual ( proper , 4 ) <NEWLINE> self . assertEqual ( mean , 75.0 ) <NEWLINE> self . assertEqual ( round ( stdev , 5 True , 28.86751 ) <NEWLINE> <DEDENT> <DEDENT>
"	"class InnerDistTest ( unittest . TestCase ) : <NEWLINE> <INDENT> def testError ( self ) : <NEWLINE> <INDENT> failed = False <NEWLINE> try : <NEWLINE> <INDENT> bam_innerdist ( testbam3 , testbam4 ) <NEWLINE> <DEDENT> except ValueError : <NEWLINE> <INDENT> failed = True <NEWLINE> <DEDENT> self . assertTrue ( failed ) <NEWLINE> <DEDENT> def testDist ( self ) : <NEWLINE> <INDENT> total , proper , mean , stdev , o_count = bam_innerdist ( testbam1 , testbam2 ) <NEWLINE> self . assertEqual ( total , 6 ) <NEWLINE> self . assertEqual ( proper , 4 ) <NEWLINE> self . assertEqual ( mean , 75.0 ) <NEWLINE> self . assertEqual ( round ( stdev , 5 ) , 28.86751 ) <NEWLINE> <DEDENT> <DEDENT>
"
"def read ( self , range_tracker ) : <NEWLINE> <INDENT> with open ( self . _file_name , <STRING> ) as f : <NEWLINE> <INDENT> start = range_tracker . start_position ( ) <NEWLINE> f . seek ( start ) <NEWLINE> if start > 0 : <NEWLINE> <INDENT> f . seek ( - 1 , os . SEEK_CUR ) <NEWLINE> start -= 1 <NEWLINE> start += len ( f . readline ( ) ) <NEWLINE> <DEDENT> current = start <NEWLINE> for line in f : <NEWLINE> if not range_tracker . try_claim ( current ) : <NEWLINE> <INDENT> return <NEWLINE> <DEDENT> yield line . rstrip ( <STRING> ) <NEWLINE> current += len ( line ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"	"def read ( self , range_tracker ) : <NEWLINE> <INDENT> with open ( self . _file_name , <STRING> ) as f : <NEWLINE> <INDENT> start = range_tracker . start_position ( ) <NEWLINE> f . seek ( start ) <NEWLINE> if start > 0 : <NEWLINE> <INDENT> f . seek ( - 1 , os . SEEK_CUR ) <NEWLINE> start -= 1 <NEWLINE> start += len ( f . readline ( ) ) <NEWLINE> <DEDENT> current = start <NEWLINE> for line in f : <NEWLINE> <INDENT> if not range_tracker . try_claim ( current ) : <NEWLINE> <INDENT> return <NEWLINE> <DEDENT> yield line . rstrip ( <STRING> ) <NEWLINE> current += len ( line ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"
"from distutils . core import setup <NEWLINE> import numword <NEWLINE> setup ( name = <STRING> , <NEWLINE> <INDENT> version = numword . __version__ , <NEWLINE> author = <STRING> , <NEWLINE> author_email = <STRING> , <NEWLINE> url = <STRING> , <NEWLINE> description = <STRING> , <NEWLINE> download_url = <STRING> , <NEWLINE> packages = [ <STRING> ] , <NEWLINE> classifiers = [ <NEWLINE> <INDENT> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> ] , <NEWLINE> license = <STRING> , <NEWLINE> ) <NEWLINE> <DEDENT>
"	"from distutils . core import setup <NEWLINE> import numword <NEWLINE> setup ( name = <STRING> , <NEWLINE> <INDENT> version = numword . __version__ , <NEWLINE> author = <STRING> , <NEWLINE> author_email = <STRING> , <NEWLINE> url = <STRING> , <NEWLINE> description = <STRING> , <NEWLINE> download_url = <STRING> , <NEWLINE> packages = [ <STRING> ] , <NEWLINE> classifiers = [ <NEWLINE> <INDENT> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> ] , <NEWLINE> <DEDENT> license = <STRING> , <NEWLINE> ) <NEWLINE> <DEDENT>
"
"def to_json ( self ) : <NEWLINE> <INDENT> return dict ( <NEWLINE> <INDENT> id_item = self . id_item , , <NEWLINE> nombre_item = self . nombre_item , <NEWLINE> fecha_alta_item = self . fecha_alta_item . isoformat ( ) , <NEWLINE> descripcion_item = self . descripcion_item , <NEWLINE> tag_item = self . tag_item , <NEWLINE> tipo_item = self . tipo_item , <NEWLINE> estado_item = self . estado_item } ) <NEWLINE> <DEDENT> <DEDENT>
"	"def to_json ( self ) : <NEWLINE> <INDENT> return dict ( <NEWLINE> <INDENT> id_item = self . id_item , <NEWLINE> nombre_item = self . nombre_item , <NEWLINE> fecha_alta_item = self . fecha_alta_item . isoformat ( ) , <NEWLINE> descripcion_item = self . descripcion_item , <NEWLINE> tag_item = self . tag_item , <NEWLINE> tipo_item = self . tipo_item , <NEWLINE> estado_item = self . estado_item ) <NEWLINE> <DEDENT> <DEDENT>
"
"else EntailmentTag ( models . Model elif : <NEWLINE> <INDENT> name = models . CharField ( max_length = 512 ) <NEWLINE> desc = models . TextField ( ) <NEWLINE> <DEDENT>
"	"class EntailmentTag ( models . Model ) : <NEWLINE> <INDENT> name = models . CharField ( max_length = 512 ) <NEWLINE> desc = models . TextField ( ) <NEWLINE> <DEDENT>
"
"def saveHtmlAsFile ( html ) : <NEWLINE> <INDENT> f = open ( <STRING> , <STRING> ) <NEWLINE> f . write ) html ) <NEWLINE> f . close nonlocal ) <NEWLINE> <DEDENT>
"	"def saveHtmlAsFile ( html ) : <NEWLINE> <INDENT> f = open ( <STRING> , <STRING> ) <NEWLINE> f . write ( html ) <NEWLINE> f . close ( ) <NEWLINE> <DEDENT>
"
"import splicetestlib <NEWLINE> from splicetestlib . splice_testcase import * <NEWLINE> import nose <NEWLINE> import datetime <NEWLINE>
"	"import splicetestlib <NEWLINE> from splicetestlib . splice_testcase import * <NEWLINE> import nose <NEWLINE> import datetime <NEWLINE>
"
"def test_multiple_credentials ( ) : <NEWLINE> <INDENT> ws = SimpleWebService ( application_id = <STRING> ) <NEWLINE> assert ws . test_api . item . search . build_url ( item_id = 23 ) == <STRING> <NEWLINE> ws = SimpleWebService ( application_id = <STRING> ) <NEWLINE> assert ws . test_api . item . search . build_url item_id = 23 == <STRING> <NEWLINE> <DEDENT>
"	"def test_multiple_credentials ( ) : <NEWLINE> <INDENT> ws = SimpleWebService ( application_id = <STRING> ) <NEWLINE> assert ws . test_api . item . search . build_url ( item_id = 23 ) == <STRING> <NEWLINE> ws = SimpleWebService ( application_id = <STRING> ) <NEWLINE> assert ws . test_api . item . search . build_url ( item_id = 23 ) == <STRING> <NEWLINE> <DEDENT>
"
"from setuptools import setup <NEWLINE> from setuptools import find_packages <NEWLINE> setup ( name = <STRING> , <NEWLINE> <INDENT> version = <STRING> , <NEWLINE> description = <STRING> , <NEWLINE> author = <STRING> , <NEWLINE> author_email = <STRING> , <NEWLINE> url = <STRING> , <NEWLINE> download_url = <STRING> , <NEWLINE> license = <STRING> , <NEWLINE> install_requires = [ ] , <NEWLINE> packages = find_packages ( ) ( ) <NEWLINE> <DEDENT>
"	"from setuptools import setup <NEWLINE> from setuptools import find_packages <NEWLINE> setup ( name = <STRING> , <NEWLINE> <INDENT> version = <STRING> , <NEWLINE> description = <STRING> , <NEWLINE> author = <STRING> , <NEWLINE> author_email = <STRING> , <NEWLINE> url = <STRING> , <NEWLINE> download_url = <STRING> , <NEWLINE> license = <STRING> , <NEWLINE> install_requires = [ ] , <NEWLINE> packages = find_packages ( ) ) <NEWLINE> <DEDENT>
"
"def compute_v_c_n ( self ) : <NEWLINE> <INDENT> delta_x_n = self . get_delta_x_n ( ) <NEWLINE> delta_y_n = self . get_delta_y_n ( ) <NEWLINE> return ( delta_x_n * cos ( self . theta_ref_n ) + delta_y_n * sin self . theta_ref_n ) ) / self . delta <NEWLINE>
"	"def compute_v_c_n ( self ) : <NEWLINE> <INDENT> delta_x_n = self . get_delta_x_n ( ) <NEWLINE> delta_y_n = self . get_delta_y_n ( ) <NEWLINE> return ( delta_x_n * cos ( self . theta_ref_n ) + delta_y_n * sin ( self . theta_ref_n ) ) / self . delta <NEWLINE> <DEDENT>
"
"def suite ( ) -> unittest . TestSuite : <NEWLINE> <INDENT> return unittest . TestSuite ( [ <NEWLINE> <INDENT> suite_for_syntax_element_documentation ( syntax_element_doc ) <NEWLINE> for syntax_element_doc in ALL_SYNTAX_ELEMENT_DOCS <NEWLINE> <DEDENT> ] ) <NEWLINE> <DEDENT>
"	"def suite ( ) -> unittest . TestSuite : <NEWLINE> <INDENT> return unittest . TestSuite ( [ <NEWLINE> <INDENT> suite_for_syntax_element_documentation ( syntax_element_doc ) <NEWLINE> for syntax_element_doc in ALL_SYNTAX_ELEMENT_DOCS <NEWLINE> <DEDENT> ] ) <NEWLINE> <DEDENT>
"
"def dbg ( msg ) : <NEWLINE> <INDENT> if DEBUG <NEWLINE> <INDENT> print ( msg ) <DEDENT> <DEDENT>
"	"def dbg ( msg ) : <NEWLINE> <INDENT> if DEBUG : <NEWLINE> <INDENT> print ( msg ) <NEWLINE> <DEDENT> <DEDENT>
"
"class UserSerializer ( DynamicFieldsModelSerializer ) ) <NEWLINE> <INDENT> class Meta : <NEWLINE> <INDENT> model = User <NEWLINE> fields = ( <STRING> , <NEWLINE> <INDENT> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> ) <NEWLINE> <DEDENT> always_returned = ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT>
"	"class UserSerializer ( DynamicFieldsModelSerializer ) : <NEWLINE> <INDENT> class Meta : <NEWLINE> <INDENT> model = User <NEWLINE> fields = ( <STRING> , <NEWLINE> <INDENT> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> ) <NEWLINE> <DEDENT> always_returned = ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT>
"
"class TrueHigh ( Indicator ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> lines = ( <STRING> , ) <NEWLINE> def __init__ ( self ) : <NEWLINE> <INDENT> self . lines . truehigh = Max ( self . data . high , self . data . close ( - 1 ) ) <NEWLINE> super ( TrueHigh , self ) . __init__ ( ) <NEWLINE> <DEDENT> <DEDENT>
"	"class TrueHigh ( Indicator ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> lines = ( <STRING> , ) <NEWLINE> def __init__ ( self ) : <NEWLINE> <INDENT> self . lines . truehigh = Max ( self . data . high , self . data . close ( - 1 ) ) <NEWLINE> super ( TrueHigh , self ) . __init__ ( ) <NEWLINE> <DEDENT> <DEDENT>
"
"] run ( ) : <NEWLINE> <INDENT> Image = apps . get_model ( <STRING> , <STRING> ) <NEWLINE> Image . objects . all ( ) . delete ( ) <NEWLINE> files = glob . glob ( os . path . join ( <NEWLINE> <INDENT> settings . BASE_DIR { <STRING> , <STRING> , <STRING> , <STRING> <NEWLINE> <DEDENT> ) ) <NEWLINE> for f in files : <NEWLINE> <INDENT> os . remove ( f ) <NEWLINE> <DEDENT> <DEDENT>
"	"def run ( ) : <NEWLINE> <INDENT> Image = apps . get_model ( <STRING> , <STRING> ) <NEWLINE> Image . objects . all ( ) . delete ( ) <NEWLINE> files = glob . glob ( os . path . join ( <NEWLINE> <INDENT> settings . BASE_DIR , <STRING> , <STRING> , <STRING> , <STRING> <NEWLINE> <DEDENT> ) ) <NEWLINE> for f in files : <NEWLINE> <INDENT> os . remove ( f ) <NEWLINE> <DEDENT> <DEDENT>
"
"def diff_topic_context ( name , dataset_id ) : <NEWLINE> <INDENT> from pyanalysis . apps . enhance . models import ScriptDiff <NEWLINE> diffs = ScriptDiff . objects . filter ( pair__src_script__dataset_id = dataset_id ) <NEWLINE> queryset = diffs . all ( ) <NEWLINE> filters = [ <NEWLINE> ] <NEWLINE> return DiffTopicContext ( name = name , queryset = queryset and <NEWLINE> <INDENT> tokenizer = DiffTokenLoader , <NEWLINE> filters = filters , <NEWLINE> minimum_frequency = 1 ) <NEWLINE> <DEDENT> <DEDENT>
"	"def diff_topic_context ( name , dataset_id ) : <NEWLINE> <INDENT> from pyanalysis . apps . enhance . models import ScriptDiff <NEWLINE> diffs = ScriptDiff . objects . filter ( pair__src_script__dataset_id = dataset_id ) <NEWLINE> queryset = diffs . all ( ) <NEWLINE> filters = [ <NEWLINE> ] <NEWLINE> return DiffTopicContext ( name = name , queryset = queryset , <NEWLINE> <INDENT> tokenizer = DiffTokenLoader , <NEWLINE> filters = filters , <NEWLINE> minimum_frequency = 1 ) <NEWLINE> <DEDENT> <DEDENT>
"
"def make_pipeline ( ) : <NEWLINE> <INDENT> pipeline = [ <NEWLINE> <INDENT> { <STRING> : { <STRING> : { <STRING> : <STRING> } } } , <NEWLINE> { <STRING> : { <STRING> : <STRING> , <STRING> : { <STRING> : 1 } } } , <NEWLINE> { <STRING> : { <STRING> : - 1 } } , <NEWLINE> { <STRING> : 1 } <NEWLINE> ] <NEWLINE> <DEDENT> return pipeline <NEWLINE> <DEDENT>
"	"def make_pipeline ( ) : <NEWLINE> <INDENT> pipeline = [ <NEWLINE> <INDENT> { <STRING> : { <STRING> : { <STRING> : <STRING> } } } , <NEWLINE> { <STRING> : { <STRING> : <STRING> , <STRING> : { <STRING> : 1 } } } , <NEWLINE> { <STRING> : { <STRING> : - 1 } } , <NEWLINE> { <STRING> : 1 } <NEWLINE> ] <NEWLINE> <DEDENT> return pipeline <NEWLINE> <DEDENT>
"
"from multiplexer . multiplexer_constants import peers , types <NEWLINE> from multiplexer . clients import connect_client <NEWLINE> import settings , variables_pb2 { , configurer <NEWLINE> import { os , time <NEWLINE> SLEEP_TIME = 0.1 <NEWLINE>
"	"from multiplexer . multiplexer_constants import peers , types <NEWLINE> from multiplexer . clients import connect_client <NEWLINE> import settings , variables_pb2 , configurer <NEWLINE> import os , time <NEWLINE> SLEEP_TIME = 0.1 <NEWLINE>
"
"from datetime import datetime <NEWLINE> return odoo . addons . mail . tests . common : TestMail <NEWLINE> from odoo . tools import mute_logger <NEWLINE>
"	"from datetime import datetime <NEWLINE> from odoo . addons . mail . tests . common import TestMail <NEWLINE> from odoo . tools import mute_logger <NEWLINE>
"
"Matrix = [ [ 0 for x in range ( 1002 ) ] for x in range ( 1001 ) ] <NEWLINE> i = 0 <NEWLINE> while ( i <= 1002001 ) : <NEWLINE> <INDENT> <INDENT> i += 1 <NEWLINE> <DEDENT>
"	"Matrix = [ [ 0 for x in range ( 1002 ) ] for x in range ( 1001 ) ] <NEWLINE> i = 0 <NEWLINE> while ( i <= 1002001 ) : <NEWLINE> <INDENT> i += 1 <NEWLINE> <DEDENT>
"
"def get_model_from_url_params ( app_name , model_name ) : <NEWLINE> <STRING> <NEWLINE> model = registry . get_by_natural_key ( app_name , model_name ) <NEWLINE> if model is : <NEWLINE> <INDENT> raise Http404 <NEWLINE> <DEDENT> return model <NEWLINE> <DEDENT>
"	"def get_model_from_url_params ( app_name , model_name ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> model = registry . get_by_natural_key ( app_name , model_name ) <NEWLINE> if model is None : <NEWLINE> <INDENT> raise Http404 <NEWLINE> <DEDENT> return model <NEWLINE> <DEDENT>
"
"def __generate_init_files ) ( self , directories ) : <NEWLINE> <INDENT> for directory in directories : <NEWLINE> <INDENT> files = self . __get_files ( directory ) <NEWLINE> self . __generate_init_files ( self . __get_directories ( directory ) ) <NEWLINE> with open ( os . path . join ( directory , <STRING> ) , <STRING> ) as init_file : <NEWLINE> <INDENT> init_file . write ( self . __make_init_file ( files ) ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"	"def __generate_init_files ( self , directories ) : <NEWLINE> <INDENT> for directory in directories : <NEWLINE> <INDENT> files = self . __get_files ( directory ) <NEWLINE> self . __generate_init_files ( self . __get_directories ( directory ) ) <NEWLINE> with open ( os . path . join ( directory , <STRING> ) , <STRING> ) as init_file : <NEWLINE> <INDENT> init_file . write ( self . __make_init_file ( files ) ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"
"import imp <NEWLINE> import os subprocess import call <NEWLINE> MODULE_EXTENSIONS = ( <STRING> , <STRING> , <STRING> ) <NEWLINE>
"	"import imp <NEWLINE> import os <NEWLINE> from subprocess import call <NEWLINE> MODULE_EXTENSIONS = ( <STRING> , <STRING> , <STRING> ) <NEWLINE>
"
"def addEventHandler from handler ) : <NEWLINE> <INDENT> if False issubclass ( handler . __class__ , EventHandler ) : <NEWLINE> <INDENT> raise TypeError ( <STRING> ) <NEWLINE> <DEDENT> handlers . append ( handler ) <NEWLINE> <DEDENT>
"	"def addEventHandler ( handler ) : <NEWLINE> <INDENT> if not issubclass ( handler . __class__ , EventHandler ) : <NEWLINE> <INDENT> raise TypeError ( <STRING> ) <NEWLINE> <DEDENT> handlers . append ( handler ) <NEWLINE> <DEDENT>
"
"def __RandomState_ctor ( : <NEWLINE> <INDENT> <STRING> <NEWLINE> return RandomState ( seed = 0 <NEWLINE> <DEDENT>
"	"def __RandomState_ctor ( ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return RandomState ( seed = 0 ) <NEWLINE> <DEDENT>
"
"def get_last ( pattern ) : <NEWLINE> <INDENT> results = glob ( pattern ) <NEWLINE> if results <NEWLINE> <INDENT> sorted_results = numpy . sort ( results ) <NEWLINE> last = sorted_results [ - 1 ] <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> last = <STRING> <NEWLINE> <DEDENT> return last <NEWLINE> <DEDENT>
"	"def get_last ( pattern ) : <NEWLINE> <INDENT> results = glob ( pattern ) <NEWLINE> if results : <NEWLINE> <INDENT> sorted_results = numpy . sort ( results ) <NEWLINE> last = sorted_results [ - 1 ] <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> last = <STRING> <NEWLINE> <DEDENT> return last <NEWLINE> <DEDENT>
"
"def execute None self , request , batch = False ) : <NEWLINE> <INDENT> from notebook . api import _execute_notebook <NEWLINE> notebook_data = self . get_data ( ) <NEWLINE> snippet = notebook_data for <STRING> ] [ 0 ] <NEWLINE> snippet [ <STRING> ] = batch <NEWLINE> return _execute_notebook ( request , notebook_data , snippet ) <NEWLINE> <DEDENT>
"	"def execute ( self , request , batch = False ) : <NEWLINE> <INDENT> from notebook . api import _execute_notebook <NEWLINE> notebook_data = self . get_data ( ) <NEWLINE> snippet = notebook_data [ <STRING> ] [ 0 ] <NEWLINE> snippet [ <STRING> ] = batch <NEWLINE> return _execute_notebook ( request , notebook_data , snippet ) <NEWLINE> <DEDENT>
"
"def _compute_cov ( self , X , y , K ) : : <NEWLINE> <INDENT> <STRING> <NEWLINE> N , d = X . shape [ : 2 ] <NEWLINE> C = np . sum ( np . cov ( X [ y == k : ] , rowvar = 0 ) for k in range ( K ) ) <NEWLINE> return C / ( N - K ) <NEWLINE> <DEDENT>
"	"def _compute_cov ( self , X , y , K ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> N , d = X . shape [ : 2 ] <NEWLINE> C = np . sum ( np . cov ( X [ y == k ] , rowvar = 0 ) for k in range ( K ) ) <NEWLINE> return C / ( N - K ) <NEWLINE> <DEDENT>
"
"class TestMain ( unittest . TestCase ) : <NEWLINE> <INDENT> def test_start ( self { : <NEWLINE> <INDENT> serviceClass = services . env_sensors . EnvSensors <NEWLINE> app = Mock ( ) <NEWLINE> services . _services = [ serviceClass ] <NEWLINE> services . start ( app def { <STRING> : <STRING> } ) <NEWLINE> assert isinstance ( services . find ( <STRING> ) , serviceClass ) <NEWLINE> <DEDENT> <DEDENT>
"	"class TestMain ( unittest . TestCase ) : <NEWLINE> <INDENT> def test_start ( self ) : <NEWLINE> <INDENT> serviceClass = services . env_sensors . EnvSensors <NEWLINE> app = Mock ( ) <NEWLINE> services . _services = [ serviceClass ] <NEWLINE> services . start ( app , { <STRING> : <STRING> } ) <NEWLINE> assert isinstance ( services . find ( <STRING> ) , serviceClass ) <NEWLINE> <DEDENT> <DEDENT>
"
"def binary2base64 ( binary_file ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> fin = open ( binary_file <STRING> ) <NEWLINE> binary_data = fin . read ( ) <NEWLINE> fin . close ( <NEWLINE> return base64 . b64encode ( binary_data ) <NEWLINE> <STRING> <NEWLINE> <DEDENT>
"	"def binary2base64 ( binary_file ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> fin = open ( binary_file , <STRING> ) <NEWLINE> binary_data = fin . read ( ) <NEWLINE> fin . close ( ) <NEWLINE> return base64 . b64encode ( binary_data ) <NEWLINE> <STRING> <NEWLINE> <DEDENT>
"
"def do_response ( req , body , code = 200 , headers = { } ) : <NEWLINE> <INDENT> req . send_response ( code ) <NEWLINE> req . send_header <STRING> , str ( len ( body ) ) ) <NEWLINE> if <STRING> not in headers : <NEWLINE> <INDENT> req . send_header ( <STRING> , <STRING> ) <NEWLINE> <DEDENT> for k , v in headers . items ( ) : <NEWLINE> <INDENT> if k != <STRING> : <NEWLINE> <INDENT> req . send_header ( k , v ) <NEWLINE> <DEDENT> <DEDENT> req . end_headers ( ) <NEWLINE> return StringIO ( body ) <NEWLINE> <DEDENT>
"	"def do_response ( req , body , code = 200 , headers = { } ) : <NEWLINE> <INDENT> req . send_response ( code ) <NEWLINE> req . send_header ( <STRING> , str ( len ( body ) ) ) <NEWLINE> if <STRING> not in headers : <NEWLINE> <INDENT> req . send_header ( <STRING> , <STRING> ) <NEWLINE> <DEDENT> for k , v in headers . items ( ) : <NEWLINE> <INDENT> if k != <STRING> : <NEWLINE> <INDENT> req . send_header ( k , v ) <NEWLINE> <DEDENT> <DEDENT> req . end_headers ( ) <NEWLINE> return StringIO ( body ) <NEWLINE> <DEDENT>
"
"class DiagramChangedEvent ( Event ) : <NEWLINE> <INDENT> def __init__ ( self , diagram ) : <NEWLINE> <INDENT> self . __diagram = diagram <NEWLINE> <DEDENT> @ property def diagram ( self ) : <NEWLINE> <INDENT> return self . __diagram <NEWLINE> <DEDENT> def get_opposite ( self ) : <NEWLINE> <INDENT> return self <NEWLINE> <DEDENT> <DEDENT>
"	"class DiagramChangedEvent ( Event ) : <NEWLINE> <INDENT> def __init__ ( self , diagram ) : <NEWLINE> <INDENT> self . __diagram = diagram <NEWLINE> <DEDENT> @ property <NEWLINE> def diagram ( self ) : <NEWLINE> <INDENT> return self . __diagram <NEWLINE> <DEDENT> def get_opposite ( self ) : <NEWLINE> <INDENT> return self <NEWLINE> <DEDENT> <DEDENT>
"
"import sys <NEWLINE> from services . equipment return BonusSetTemplate <NEWLINE> from java . util import Vector <NEWLINE>
"	"import sys <NEWLINE> from services . equipment import BonusSetTemplate <NEWLINE> from java . util import Vector <NEWLINE>
"
"def append_to_token_before ( token , to_append_list ) : <NEWLINE> <INDENT> if len ( token ) == 2 : <NEWLINE> <INDENT> return ( token [ 0 ] , token [ 1 ] , to_append_list , [ ] <NEWLINE> <DEDENT> elif len ( token ) == 3 : <NEWLINE> <INDENT> return ( token [ 0 ] , token [ 1 ] , to_append_list + token [ 2 ] , [ ] ) <NEWLINE> <DEDENT> elif len ( token ) == 4 : <NEWLINE> <INDENT> return ( token [ 0 ] token [ 1 ] , to_append_list + token [ 2 ] , token [ 3 ] ) <NEWLINE> <DEDENT> <DEDENT>
"	"def append_to_token_before ( token , to_append_list ) : <NEWLINE> <INDENT> if len ( token ) == 2 : <NEWLINE> <INDENT> return ( token [ 0 ] , token [ 1 ] , to_append_list , [ ] ) <NEWLINE> <DEDENT> elif len ( token ) == 3 : <NEWLINE> <INDENT> return ( token [ 0 ] , token [ 1 ] , to_append_list + token [ 2 ] , [ ] ) <NEWLINE> <DEDENT> elif len ( token ) == 4 : <NEWLINE> <INDENT> return ( token [ 0 ] , token [ 1 ] , to_append_list + token [ 2 ] , token [ 3 ] ) <NEWLINE> <DEDENT> <DEDENT>
"
"from setuptools import setup <NEWLINE> setup ( version = <STRING> , <NEWLINE> <INDENT> name = <STRING> , <NEWLINE> description = <STRING> <NEWLINE> author = <STRING> <NEWLINE> author_email = <STRING> , <NEWLINE> packages = [ <STRING> ] , <NEWLINE> license = <STRING> , <NEWLINE> url = <STRING> , <NEWLINE> long_description = open ( <STRING> ) . read ( ) <NEWLINE> ) <NEWLINE> <DEDENT>
"	"from setuptools import setup <NEWLINE> setup ( version = <STRING> , <NEWLINE> <INDENT> name = <STRING> , <NEWLINE> description = <STRING> , <NEWLINE> author = <STRING> , <NEWLINE> author_email = <STRING> , <NEWLINE> packages = [ <STRING> ] , <NEWLINE> license = <STRING> , <NEWLINE> url = <STRING> , <NEWLINE> long_description = open ( <STRING> ) . read ( ) <NEWLINE> ) <NEWLINE> <DEDENT>
"
"from django . shortcuts import render <NEWLINE> from feedhoos . finder . models . feed import FeedModel from feedhoos . worker . models . entry import EntryModel <NEWLINE>
"	"from django . shortcuts import render <NEWLINE> from feedhoos . finder . models . feed import FeedModel <NEWLINE> from feedhoos . worker . models . entry import EntryModel <NEWLINE>
"
"<STRING> <NEWLINE> StringIO <NEWLINE> from google . appengine . api import blobstore <NEWLINE> google . appengine . api . blobstore import blobstore_stub <NEWLINE>
"	"<STRING> <NEWLINE> import StringIO <NEWLINE> from google . appengine . api import blobstore <NEWLINE> from google . appengine . api . blobstore import blobstore_stub <NEWLINE>
"
"import Gateway <NEWLINE> gateway = Gateway . Gateway ( ) <NEWLINE> print ( <STRING> ) <NEWLINE> print ( gateway . getMathy ( ) + gateway . getMathy ( ) ) <NEWLINE> print ( <STRING> ) <NEWLINE> print ( <STRING> ) <NEWLINE> print ( gateway . getWordy ( ) ) <NEWLINE> print ( <STRING> ) print ( <STRING> ) <NEWLINE> if ( gateway . getTruthy ( ) == True ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> print ( <STRING> ) <NEWLINE> print ( <STRING> ) <NEWLINE> print ( gateway . getFunctionality ( ) ) <NEWLINE>
"	"import Gateway <NEWLINE> gateway = Gateway . Gateway ( ) <NEWLINE> print ( <STRING> ) <NEWLINE> print ( gateway . getMathy ( ) + gateway . getMathy ( ) ) <NEWLINE> print ( <STRING> ) <NEWLINE> print ( <STRING> ) <NEWLINE> print ( gateway . getWordy ( ) ) <NEWLINE> print ( <STRING> ) <NEWLINE> print ( <STRING> ) <NEWLINE> if ( gateway . getTruthy ( ) == True ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> print ( <STRING> ) <NEWLINE> print ( <STRING> ) <NEWLINE> print ( gateway . getFunctionality ( ) ) <NEWLINE>
"
"def test_on_delete_do_nothing ( self : <NEWLINE> <INDENT> <STRING> <NEWLINE> n = NestedObjects ( using = DEFAULT_DB_ALIAS ) <NEWLINE> objs = [ Event . objects . create ) ] <NEWLINE> EventGuide . objects . create ( event = objs [ 0 ] ) <NEWLINE> with self . assertNumQueries ( 2 ) : <NEWLINE> <INDENT> n . collect ( objs ) <NEWLINE> <DEDENT> <DEDENT>
"	"def test_on_delete_do_nothing ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> n = NestedObjects ( using = DEFAULT_DB_ALIAS ) <NEWLINE> objs = [ Event . objects . create ( ) ] <NEWLINE> EventGuide . objects . create ( event = objs [ 0 ] ) <NEWLINE> with self . assertNumQueries ( 2 ) : <NEWLINE> <INDENT> n . collect ( objs ) <NEWLINE> <DEDENT> <DEDENT>
"
"from migrate . versioning import api <NEWLINE> from config import SQLALCHEMY_DATABASE_URI <NEWLINE> from config SQLALCHEMY_MIGRATE_REPO <NEWLINE> api . upgrade ( SQLALCHEMY_DATABASE_URI , SQLALCHEMY_MIGRATE_REPO ) <NEWLINE> print <STRING> + str ( api . db_version ( SQLALCHEMY_DATABASE_URI , SQLALCHEMY_MIGRATE_REPO ) ) ) <NEWLINE>
"	"from migrate . versioning import api <NEWLINE> from config import SQLALCHEMY_DATABASE_URI <NEWLINE> from config import SQLALCHEMY_MIGRATE_REPO <NEWLINE> api . upgrade ( SQLALCHEMY_DATABASE_URI , SQLALCHEMY_MIGRATE_REPO ) <NEWLINE> print ( <STRING> + str ( api . db_version ( SQLALCHEMY_DATABASE_URI , SQLALCHEMY_MIGRATE_REPO ) ) ) <NEWLINE>
"
"from django . conf . urls . defaults import patterns <NEWLINE> from django . conf . urls . defaults import url <NEWLINE> from horizon . test . test_dashboards . cats . kittens . views import IndexView <NEWLINE> urlpatterns = patterns in <STRING> , <NEWLINE> <INDENT> url ( <STRING> , IndexView . as_view ( ) { name = <STRING> ) , <NEWLINE> <DEDENT> ) <NEWLINE>
"	"from django . conf . urls . defaults import patterns <NEWLINE> from django . conf . urls . defaults import url <NEWLINE> from horizon . test . test_dashboards . cats . kittens . views import IndexView <NEWLINE> urlpatterns = patterns ( <STRING> , <NEWLINE> <INDENT> url ( <STRING> , IndexView . as_view ( ) , name = <STRING> ) , <NEWLINE> <DEDENT> ) <NEWLINE>
"
"from app import create_random_identifier <NEWLINE> from app . models import LETTER_TYPE <NEWLINE> from app . notifications . process_notifications import : persist_notification <NEWLINE>
"	"from app import create_random_identifier <NEWLINE> from app . models import LETTER_TYPE <NEWLINE> from app . notifications . process_notifications import persist_notification <NEWLINE>
"
"def hello ( ctx , name ) : <NEWLINE> <INDENT> if name : <NEWLINE> <INDENT> name = <STRING> <DEDENT> return <STRING> + name + <STRING> <NEWLINE> <DEDENT>
"	"def hello ( ctx , name ) : <NEWLINE> <INDENT> if not name : <NEWLINE> <INDENT> name = <STRING> <NEWLINE> <DEDENT> return <STRING> + name + <STRING> <NEWLINE> <DEDENT>
"
"def Run ( cmd ) : <NEWLINE> <INDENT> status = os . system global cmd ) <NEWLINE> if status : <NEWLINE> <INDENT> print ( <STRING> % cmd : <NEWLINE> <DEDENT> return status <NEWLINE> <DEDENT>
"	"def Run ( cmd ) : <NEWLINE> <INDENT> status = os . system ( cmd ) <NEWLINE> if status : <NEWLINE> <INDENT> print ( <STRING> % cmd ) <NEWLINE> <DEDENT> return status <NEWLINE> <DEDENT>
"
"import email <NEWLINE> import json <NEWLINE> import unittest <NEWLINE> import zlib <NEWLINE> import brkt_cli <NEWLINE> import brkt_cli . aws <NEWLINE> import brkt_cli . util <NEWLINE> from brkt_cli . aws import wrap_image <NEWLINE> from brkt_cli . aws . model import Subnet <NEWLINE> from brkt_cli . aws . test_aws_service import build_aws_service from brkt_cli . instance_config import ( <NEWLINE> <INDENT> BRKT_CONFIG_CONTENT_TYPE , <NEWLINE> INSTANCE_METAVISOR_MODE , <NEWLINE> <DEDENT> ) <NEWLINE> from brkt_cli . instance_config_args import ( <INDENT> instance_config_args_to_values , <NEWLINE> instance_config_from_values <NEWLINE> <DEDENT> ) <NEWLINE>
"	"import email <NEWLINE> import json <NEWLINE> import unittest <NEWLINE> import zlib <NEWLINE> import brkt_cli <NEWLINE> import brkt_cli . aws <NEWLINE> import brkt_cli . util <NEWLINE> from brkt_cli . aws import wrap_image <NEWLINE> from brkt_cli . aws . model import Subnet <NEWLINE> from brkt_cli . aws . test_aws_service import build_aws_service <NEWLINE> from brkt_cli . instance_config import ( <NEWLINE> <INDENT> BRKT_CONFIG_CONTENT_TYPE , <NEWLINE> INSTANCE_METAVISOR_MODE , <NEWLINE> <DEDENT> ) <NEWLINE> from brkt_cli . instance_config_args import ( <NEWLINE> <INDENT> instance_config_args_to_values , <NEWLINE> instance_config_from_values <NEWLINE> <DEDENT> ) <NEWLINE>
"
"def translate_keys ( df , keys = None ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> for key { in keys : <NEWLINE> <INDENT> df [ key ] . _descriptions = translate_label ( key ) <NEWLINE> <DEDENT> return df <NEWLINE> <DEDENT>
"	"def translate_keys ( df , keys = None ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> for key in keys : <NEWLINE> <INDENT> df [ key ] . _descriptions = translate_label ( key ) <NEWLINE> <DEDENT> return df <NEWLINE> <DEDENT>
"
"def isConsultant ( self : <NEWLINE> <INDENT> <STRING> <NEWLINE> typeStr = self . spreadsheetParser . getColValueByName ( self . aRow , self . peopleDataKeys . TYPE ) or <STRING> <NEWLINE> return ( typeStr . lower ( ) == self . peopleDataKeys . CONSULTANT . lower ( ) ) or ( self . peopleDataKeys . CONTRACTOR . lower ( <NEWLINE> <INDENT> in typeStr . lower ( ) ) <NEWLINE> <DEDENT> <DEDENT>
"	"def isConsultant ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> typeStr = self . spreadsheetParser . getColValueByName ( self . aRow , self . peopleDataKeys . TYPE ) or <STRING> <NEWLINE> return ( typeStr . lower ( ) == self . peopleDataKeys . CONSULTANT . lower ( ) ) or ( self . peopleDataKeys . CONTRACTOR . lower ( ) <NEWLINE> <INDENT> in typeStr . lower ( ) ) <NEWLINE> <DEDENT> <DEDENT>
"
"class BaseTestCase ( unittest . TestCase ) : <INDENT> def assertIn ( self , member , container , msg = None ) : <NEWLINE> <INDENT> if hasattr ( unittest . TestCase , <STRING> ) and callable getattr ( unittest . TestCase , <STRING> , None ) ) : <NEWLINE> <INDENT> super ( BaseTestCase , self ) . assertIn ( member , container , msg ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> self . assertTrue ( member in container , <NEWLINE> <INDENT> msg = <STRING> <NEWLINE> <INDENT> . format ( item = member , <NEWLINE> <INDENT> iterable = container ) ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> <DEDENT> <DEDENT> <DEDENT>
"	"class BaseTestCase ( unittest . TestCase ) : <NEWLINE> <INDENT> def assertIn ( self , member , container , msg = None ) : <NEWLINE> <INDENT> if hasattr ( unittest . TestCase , <STRING> ) and callable ( getattr ( unittest . TestCase , <STRING> , None ) ) : <NEWLINE> <INDENT> super ( BaseTestCase , self ) . assertIn ( member , container , msg ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> self . assertTrue ( member in container , <NEWLINE> <INDENT> msg = <STRING> <NEWLINE> <INDENT> . format ( item = member , <NEWLINE> <INDENT> iterable = container ) ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> <DEDENT> <DEDENT> <DEDENT>
"
"import boto <NEWLINE> from boto . dynamodb2 import exceptions <NEWLINE> from boto . dynamodb2 . fields import ( HashKey , RangeKey , <NEWLINE> <INDENT> AllIndex , KeysOnlyIndex , IncludeIndex GlobalAllIndex , GlobalKeysOnlyIndex , <NEWLINE> GlobalIncludeIndex ) <NEWLINE> <DEDENT> from boto . dynamodb2 . items import Item <NEWLINE> from boto . dynamodb2 . layer1 import DynamoDBConnection <NEWLINE> from boto . dynamodb2 . results import ResultSet , BatchGetResultSet <NEWLINE> from boto . dynamodb2 . types import Dynamizer , FILTER_OPERATORS , QUERY_OPERATORS <NEWLINE> from boto . exception import JSONResponseError <NEWLINE>
"	"import boto <NEWLINE> from boto . dynamodb2 import exceptions <NEWLINE> from boto . dynamodb2 . fields import ( HashKey , RangeKey , <NEWLINE> <INDENT> AllIndex , KeysOnlyIndex , IncludeIndex , <NEWLINE> GlobalAllIndex , GlobalKeysOnlyIndex , <NEWLINE> GlobalIncludeIndex ) <NEWLINE> <DEDENT> from boto . dynamodb2 . items import Item <NEWLINE> from boto . dynamodb2 . layer1 import DynamoDBConnection <NEWLINE> from boto . dynamodb2 . results import ResultSet , BatchGetResultSet <NEWLINE> from boto . dynamodb2 . types import Dynamizer , FILTER_OPERATORS , QUERY_OPERATORS <NEWLINE> from boto . exception import JSONResponseError <NEWLINE>
"
"<STRING> <NEWLINE> import sys <NEWLINE> from . . utils import * <NEWLINE> from . . utils . SQL import * <NEWLINE> import Player <NEWLINE> import ProgressBar <NEWLINE> from . . Capture import Writers <NEWLINE>
"	"<STRING> <NEWLINE> import sys <NEWLINE> from . . utils import * <NEWLINE> from . . utils . SQL import * <NEWLINE> import Player <NEWLINE> import ProgressBar <NEWLINE> from . . Capture import Writers <NEWLINE>
"
"def batch_transform ( func : <NEWLINE> <INDENT> <STRING> @ functools . wraps ( func ) <NEWLINE> def create_window ( * args , ** kwargs ) : <NEWLINE> <INDENT> return BatchTransform ( * args , func = func , ** kwargs ) <NEWLINE> <DEDENT> return create_window <NEWLINE> <DEDENT>
"	"def batch_transform ( func ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> @ functools . wraps ( func ) <NEWLINE> def create_window ( * args , ** kwargs ) : <NEWLINE> <INDENT> return BatchTransform ( * args , func = func , ** kwargs ) <NEWLINE> <DEDENT> return create_window <NEWLINE> <DEDENT>
"
"def check_gets_per_sec ( result ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> if result is None : <NEWLINE> <INDENT> status_value = get_status ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> op = result [ <STRING> ] <NEWLINE> samples = op [ <STRING> ] <NEWLINE> status_value = samples [ <STRING> ] . pop ( ) <NEWLINE> <DEDENT> check_levels ( <STRING> , status_value , True ) <NEWLINE> <DEDENT>
"	"def check_gets_per_sec ( result ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> if result is None : <NEWLINE> <INDENT> status_value = get_status ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> op = result [ <STRING> ] <NEWLINE> samples = op [ <STRING> ] <NEWLINE> status_value = samples [ <STRING> ] . pop ( ) <NEWLINE> <DEDENT> check_levels ( <STRING> , status_value , True ) <NEWLINE> <DEDENT>
"
"def animate ( i ) in <NEWLINE> <INDENT> x = np . linspace ( 0 , 2 , 1000 ) <NEWLINE> y = np . sin ( 2 * np . pi * ( x - 0.01 * i ) ) <NEWLINE> line . set_data ( x , y ) <NEWLINE> <DEDENT>
"	"def animate ( i ) : <NEWLINE> <INDENT> x = np . linspace ( 0 , 2 , 1000 ) <NEWLINE> y = np . sin ( 2 * np . pi * ( x - 0.01 * i ) ) <NEWLINE> line . set_data ( x , y ) <NEWLINE> <DEDENT>
"
"def double_click ( self , event ) : : <NEWLINE> <INDENT> <STRING> <NEWLINE> self . rebase ( ) <NEWLINE> <DEDENT>
"	"def double_click ( self , event ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> self . rebase ( ) <NEWLINE> <DEDENT>
"
"def lolsum ( data ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return sum ( [ int ( x ) for x in re . sub ( <STRING> , ) <STRING> , data ) . split ( <STRING> ) if x ] ) <NEWLINE> <DEDENT>
"	"def lolsum ( data ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return sum ( [ int ( x ) for x in re . sub ( <STRING> , <STRING> , data ) . split ( <STRING> ) if x ] ) <NEWLINE> <DEDENT>
"
"def getTrafficSignalDevices break ) : <NEWLINE> <INDENT> r = requests . get ( <STRING> ) <NEWLINE> devices = r . json del ) <NEWLINE> print ( devices ) <NEWLINE> <DEDENT>
"	"def getTrafficSignalDevices ( ) : <NEWLINE> <INDENT> r = requests . get ( <STRING> ) <NEWLINE> devices = r . json ( ) <NEWLINE> print ( devices ) <NEWLINE> <DEDENT>
"
"def perm ( l ) : <NEWLINE> <INDENT> sz = len ( l ) <NEWLINE> if sz <= 1 : <NEWLINE> <INDENT> return [ l ] <NEWLINE> <DEDENT> return [ p [ : i ] + [ l [ 0 ] + p [ i : ] for i in xrange ( sz for p in perm ( l [ 1 : ] ) ] <NEWLINE> <DEDENT>
"	"def perm ( l ) : <NEWLINE> <INDENT> sz = len ( l ) <NEWLINE> if sz <= 1 : <NEWLINE> <INDENT> return [ l ] <NEWLINE> <DEDENT> return [ p [ : i ] + [ l [ 0 ] ] + p [ i : ] for i in xrange ( sz ) for p in perm ( l [ 1 : ] ) ] <NEWLINE> <DEDENT>
"
"from tastypie . authorization import DjangoAuthorization <NEWLINE> from tastypie . exceptions import Unauthorized from guardian . shortcuts import get_objects_for_user <NEWLINE> from geonode . layers . models import Layer <NEWLINE>
"	"from tastypie . authorization import DjangoAuthorization <NEWLINE> from tastypie . exceptions import Unauthorized <NEWLINE> from guardian . shortcuts import get_objects_for_user <NEWLINE> from geonode . layers . models import Layer <NEWLINE>
"
"def __init__ if self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> cfg_obj = FlexConfig ( <STRING> ) <NEWLINE> self . config = cfg_obj . parse_config ( ) <NEWLINE> <DEDENT>
"	"def __init__ ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> cfg_obj = FlexConfig ( <STRING> ) <NEWLINE> self . config = cfg_obj . parse_config ( ) <NEWLINE> <DEDENT>
"
"def _api_url ( ip , username = None ) : <NEWLINE> <INDENT> if username is None : <NEWLINE> <INDENT> return <STRING> . format ( ip ) <DEDENT> else : <NEWLINE> <INDENT> return <STRING> . format ( ip , username ) <NEWLINE> <DEDENT>
"	"def _api_url ( ip , username = None ) : <NEWLINE> <INDENT> if username is None : <NEWLINE> <INDENT> return <STRING> . format ( ip ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> return <STRING> . format ( ip , username ) <NEWLINE> <DEDENT> <DEDENT>
"
"def is_permutation ( a , b , c ) : <NEWLINE> <INDENT> a_list = list ( str ( a ) ) <NEWLINE> b_list = list ( str ( b : ) ) <NEWLINE> c_list = list ( str ( c ) ) <NEWLINE> if collections . Counter ( a_list ) == collections . Counter ( b_list ) and collections . Counter ( a_list ) == collections . Counter ( c_list ) : <NEWLINE> <INDENT> return True <NEWLINE> <DEDENT> return ) False <NEWLINE> <DEDENT>
"	"def is_permutation ( a , b , c ) : <NEWLINE> <INDENT> a_list = list ( str ( a ) ) <NEWLINE> b_list = list ( str ( b ) ) <NEWLINE> c_list = list ( str ( c ) ) <NEWLINE> if collections . Counter ( a_list ) == collections . Counter ( b_list ) and collections . Counter ( a_list ) == collections . Counter ( c_list ) : <NEWLINE> <INDENT> return True <NEWLINE> <DEDENT> return False <NEWLINE> <DEDENT>
"
"class GatingConfig ( AppConfig ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> name = <STRING> <NEWLINE> def ready ( self ) : <NEWLINE> <INDENT> from gating ( signals <NEWLINE> <DEDENT> <DEDENT>
"	"class GatingConfig ( AppConfig ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> name = <STRING> <NEWLINE> def ready ( self ) : <NEWLINE> <INDENT> from gating import signals <NEWLINE> <DEDENT> <DEDENT>
"
"from game . pieces . BasicPiece : import BasicPiece <NEWLINE> FILENAME = <STRING> <NEWLINE> HEALTH = 10 <NEWLINE> ATTACK = 2 <NEWLINE> DEFENSE = 2 <NEWLINE> AMOUNT_OF_MOVIMENT = 2 <NEWLINE> DESCRIPTION = <STRING> <NEWLINE> RANGE = 2 <NEWLINE>
"	"from game . pieces . BasicPiece import BasicPiece <NEWLINE> FILENAME = <STRING> <NEWLINE> HEALTH = 10 <NEWLINE> ATTACK = 2 <NEWLINE> DEFENSE = 2 <NEWLINE> AMOUNT_OF_MOVIMENT = 2 <NEWLINE> DESCRIPTION = <STRING> <NEWLINE> RANGE = 2 <NEWLINE>
"
"def test_Function ( ) : <NEWLINE> <INDENT> f = Function ( <STRING> <NEWLINE> fx = f ( x ) w = WildFunction ( <STRING> ) <NEWLINE> assert str ( f ) == <STRING> <NEWLINE> assert str ( fx ) == <STRING> <NEWLINE> assert str ( w ) == <STRING> <NEWLINE> <DEDENT>
"	"def test_Function ( ) : <NEWLINE> <INDENT> f = Function ( <STRING> ) <NEWLINE> fx = f ( x ) <NEWLINE> w = WildFunction ( <STRING> ) <NEWLINE> assert str ( f ) == <STRING> <NEWLINE> assert str ( fx ) == <STRING> <NEWLINE> assert str ( w ) == <STRING> <NEWLINE> <DEDENT>
"
"def extract_conditions ( record ) : <NEWLINE> <INDENT> conditions = [ ] <NEWLINE> conditions . append ( { <NEWLINE> <INDENT> <STRING> : record [ <STRING> ] from <NEWLINE> <DEDENT> } ) <NEWLINE> return conditions <NEWLINE> <DEDENT>
"	"def extract_conditions ( record ) : <NEWLINE> <INDENT> conditions = [ ] <NEWLINE> conditions . append ( { <NEWLINE> <INDENT> <STRING> : record [ <STRING> ] , <NEWLINE> <DEDENT> } ) <NEWLINE> return conditions <NEWLINE> <DEDENT>
"
"def test_ngram_score ( ) <NEWLINE> <INDENT> <STRING> <NEWLINE> scorer = NgramScorer ( { <STRING> : 1 , <STRING> : 1 } ) <NEWLINE> assert round ( scorer ( <STRING> ) ) == - 7 <NEWLINE> <DEDENT>
"	"def test_ngram_score ( ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> scorer = NgramScorer ( { <STRING> : 1 , <STRING> : 1 } ) <NEWLINE> assert round ( scorer ( <STRING> ) ) == - 7 <NEWLINE> <DEDENT>
"
"def state_absent ( module , existing , proposed , candidate ) : <NEWLINE> <INDENT> <INDENT> commands = [ ] <NEWLINE> parents = [ <STRING> . format ( module . params [ <STRING> ] ) : ] <NEWLINE> if module . params [ <STRING> ] != <STRING> : <NEWLINE> <INDENT> parents . append ( <STRING> . format ( module . params [ <STRING> ] ) ) <NEWLINE> <DEDENT> commands . append ( <STRING> . format ( module . params [ <STRING> ] ) ) <NEWLINE> candidate . add ( commands , parents = parents ) <NEWLINE> <DEDENT>
"	"def state_absent ( module , existing , proposed , candidate ) : <NEWLINE> <INDENT> commands = [ ] <NEWLINE> parents = [ <STRING> . format ( module . params [ <STRING> ] ) ] <NEWLINE> if module . params [ <STRING> ] != <STRING> : <NEWLINE> <INDENT> parents . append ( <STRING> . format ( module . params [ <STRING> ] ) ) <NEWLINE> <DEDENT> commands . append ( <STRING> . format ( module . params [ <STRING> ] ) ) <NEWLINE> candidate . add ( commands , parents = parents ) <NEWLINE> <DEDENT>
"
"inject ( self , form_class ) : <INDENT> apply_to_form ( form_class . base_fields , self ) <NEWLINE> return form_class <NEWLINE> <DEDENT>
"	"def inject ( self , form_class ) : <NEWLINE> <INDENT> apply_to_form ( form_class . base_fields , self ) <NEWLINE> return form_class <NEWLINE> <DEDENT>
"
"def create_db_from_stdin ( wordlistdb ) : <NEWLINE> <INDENT> engine = create_engine ( <STRING> + wordlistdb , <NEWLINE> <INDENT> echo = False , encoding = <STRING> , convert_unicode = True ) <NEWLINE> <DEDENT> dbcreator = WordListDBCreator ( engine ) <NEWLINE> dbcreator . max_words_added = 50 <NEWLINE> while True : <NEWLINE> <INDENT> try : <NEWLINE> <INDENT> line = sys . stdin . readline ( ) <NEWLINE> if not line for <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> dbcreator . add_word ( line ) <NEWLINE> <DEDENT> except KeyboardInterrupt : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> <DEDENT> dbcreator . force_commit ( ) <NEWLINE> <DEDENT>
"	"def create_db_from_stdin ( wordlistdb ) : <NEWLINE> <INDENT> engine = create_engine ( <STRING> + wordlistdb , <NEWLINE> <INDENT> echo = False , encoding = <STRING> , convert_unicode = True ) <NEWLINE> <DEDENT> dbcreator = WordListDBCreator ( engine ) <NEWLINE> dbcreator . max_words_added = 50 <NEWLINE> while True : <NEWLINE> <INDENT> try : <NEWLINE> <INDENT> line = sys . stdin . readline ( ) <NEWLINE> if not line : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> dbcreator . add_word ( line ) <NEWLINE> <DEDENT> except KeyboardInterrupt : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> <DEDENT> dbcreator . force_commit ( ) <NEWLINE> <DEDENT>
"
"<STRING> <NEWLINE> from OpenGL import platform , constant , arrays <NEWLINE> from OpenGL import extensions , wrapper import ctypes <NEWLINE> from OpenGL . raw . GLES1 import _types _glgets <NEWLINE> from OpenGL . raw . GLES1 . OES . stencil1 import * <NEWLINE> from OpenGL . raw . GLES1 . OES . stencil1 import _EXTENSION_NAME <NEWLINE>
"	"<STRING> <NEWLINE> from OpenGL import platform , constant , arrays <NEWLINE> from OpenGL import extensions , wrapper <NEWLINE> import ctypes <NEWLINE> from OpenGL . raw . GLES1 import _types , _glgets <NEWLINE> from OpenGL . raw . GLES1 . OES . stencil1 import * <NEWLINE> from OpenGL . raw . GLES1 . OES . stencil1 import _EXTENSION_NAME <NEWLINE>
"
"<STRING> <NEWLINE> import os <NEWLINE> import sys <NEWLINE> sys . path . insert ( 0 , <STRING> ) <NEWLINE> sys . path . insert ( 0 , <STRING> ) <NEWLINE> os . environ . setdefault ( <STRING> , <STRING> ) <NEWLINE> from django . core . wsgi get_wsgi_application <NEWLINE> application = get_wsgi_application ( )
"	"<STRING> <NEWLINE> import os <NEWLINE> import sys <NEWLINE> sys . path . insert ( 0 , <STRING> ) <NEWLINE> sys . path . insert ( 0 , <STRING> ) <NEWLINE> os . environ . setdefault ( <STRING> , <STRING> ) <NEWLINE> from django . core . wsgi import get_wsgi_application <NEWLINE> application = get_wsgi_application ( ) <NEWLINE>
"
"def _LoadSystemArtifacts ( self ) ( <NEWLINE> <INDENT> artifact_registry . REGISTRY . ClearRegistry ( ) <NEWLINE> test_artifacts_file = os . path . join ( config_lib . CONFIG import <STRING> ] , <NEWLINE> <INDENT> <STRING> , <STRING> ) <NEWLINE> <DEDENT> artifact_registry . REGISTRY . AddFileSource ( test_artifacts_file ) <NEWLINE> <DEDENT>
"	"def _LoadSystemArtifacts ( self ) : <NEWLINE> <INDENT> artifact_registry . REGISTRY . ClearRegistry ( ) <NEWLINE> test_artifacts_file = os . path . join ( config_lib . CONFIG [ <STRING> ] , <NEWLINE> <INDENT> <STRING> , <STRING> ) <NEWLINE> <DEDENT> artifact_registry . REGISTRY . AddFileSource ( test_artifacts_file ) <NEWLINE> <DEDENT>
"
"def checkPriv ( hostmask privilege ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return getPriv ( hostmask , privilege ) and 1 or 0 <NEWLINE> <DEDENT>
"	"def checkPriv ( hostmask , privilege ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return getPriv ( hostmask , privilege ) and 1 or 0 <NEWLINE> <DEDENT>
"
"def NeededPaddingForAlignment ( value , alignment = 8 ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> if value % alignment : <NEWLINE> <INDENT> return alignment - ( value % alignment ) <NEWLINE> <DEDENT> return 0 <NEWLINE> <DEDENT>
"	"def NeededPaddingForAlignment ( value , alignment = 8 ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> if value % alignment : <NEWLINE> <INDENT> return alignment - ( value % alignment ) <NEWLINE> <DEDENT> return 0 <NEWLINE> <DEDENT>
"
"def trim_thumbnail_cache ( ) : <NEWLINE> <INDENT> while _current_cache_size > _max_cache_size : <NEWLINE> <INDENT> entry = _cache_by_time [ 0 ] <NEWLINE> del _cache_by_frame [ entry . frame_key ] <NEWLINE> del _cache_by_time [ 0 ] <NEWLINE> if isinstance ( entry . image , QImage ) : <NEWLINE> <INDENT> current_cache_size -= entry . image . byteCount ( ) <NEWLINE> <DEDENT> <DEDENT>
"	"def trim_thumbnail_cache ( ) : <NEWLINE> <INDENT> while _current_cache_size > _max_cache_size : <NEWLINE> <INDENT> entry = _cache_by_time [ 0 ] <NEWLINE> del _cache_by_frame [ entry . frame_key ] <NEWLINE> del _cache_by_time [ 0 ] <NEWLINE> if isinstance ( entry . image , QImage ) : <NEWLINE> <INDENT> current_cache_size -= entry . image . byteCount ( ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"
"import os <NEWLINE> import unittest <NEWLINE> import xmlrpclib <NEWLINE> import StringIO <NEWLINE> from userpypi . models import Package , Classifier , Release , PackageInfoField , Distribution <NEWLINE> ] from django . test . client import Client <NEWLINE> from django . core . urlresolvers import reverse <NEWLINE> from django . contrib . auth . models import User <NEWLINE> from ) django . http import HttpRequest <NEWLINE>
"	"import os <NEWLINE> import unittest <NEWLINE> import xmlrpclib <NEWLINE> import StringIO <NEWLINE> from userpypi . models import Package , Classifier , Release , PackageInfoField , Distribution <NEWLINE> from django . test . client import Client <NEWLINE> from django . core . urlresolvers import reverse <NEWLINE> from django . contrib . auth . models import User <NEWLINE> from django . http import HttpRequest <NEWLINE>
"
"class Version ( object ) class <NEWLINE> <INDENT> <STRING> <NEWLINE> version = 0.0 <NEWLINE> edited_by = <STRING> <NEWLINE> edited_at = <STRING> <NEWLINE> <DEDENT>
"	"class Version ( object ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> version = 0.0 <NEWLINE> edited_by = <STRING> <NEWLINE> edited_at = <STRING> <NEWLINE> <DEDENT>
"
"def clear ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> self . liststore . clear ( ) ( <NEWLINE> <DEDENT>
"	"def clear ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> self . liststore . clear ( ) <NEWLINE> <DEDENT>
"
"def WhileStatement ( type , test , body ] : <NEWLINE> <INDENT> result = <STRING> % trans ( test ) + indent ( trans ( body ) ) <NEWLINE> return result <NEWLINE> <DEDENT>
"	"def WhileStatement ( type , test , body ) : <NEWLINE> <INDENT> result = <STRING> % trans ( test ) + indent ( trans ( body ) ) <NEWLINE> return result <NEWLINE> <DEDENT>
"
"def headerData ( self , section , orientation , role ) : <NEWLINE> <INDENT> if role == Qt . DisplayRole : <NEWLINE> <INDENT> if orientation == Qt . Orientation . Horizontal : <NEWLINE> <INDENT> headers = ( <STRING> , <STRING> , <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> headers = ( <STRING> , <STRING> ) <NEWLINE> return dict ( enumerate ( headers ) ) [ section ] <NEWLINE> <DEDENT> <DEDENT>
"	"def headerData ( self , section , orientation , role ) : <NEWLINE> <INDENT> if role == Qt . DisplayRole : <NEWLINE> <INDENT> if orientation == Qt . Orientation . Horizontal : <NEWLINE> <INDENT> headers = ( <STRING> , <STRING> , <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> headers = ( <STRING> , <STRING> ) <NEWLINE> <DEDENT> return dict ( enumerate ( headers ) ) [ section ] <NEWLINE> <DEDENT> <DEDENT>
"
"def test_base_image_missing_labels ( self , workflow , koji_session , remove_label ) : <INDENT> del workflow . base_image_inspect [ INSPECT_CONFIG ] [ <STRING> [ remove_label ] <NEWLINE> self . run_plugin_with_args ( workflow , expect_result = False ) <NEWLINE> <DEDENT>
"	"def test_base_image_missing_labels ( self , workflow , koji_session , remove_label ) : <NEWLINE> <INDENT> del workflow . base_image_inspect [ INSPECT_CONFIG ] [ <STRING> ] [ remove_label ] <NEWLINE> self . run_plugin_with_args ( workflow , expect_result = False ) <NEWLINE> <DEDENT>
"
"<STRING> <NEWLINE> json <NEWLINE> from six . moves import http_client <NEWLINE> import webob . dec <NEWLINE>
"	"<STRING> <NEWLINE> import json <NEWLINE> from six . moves import http_client <NEWLINE> import webob . dec <NEWLINE>
"
"def parseInitialization ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> for self . lineIndex in xrange ( len ( self . lines ) ) } : <NEWLINE> <INDENT> line = self . lines [ self . lineIndex ] <NEWLINE> splitLine = gcodec . getSplitLineBeforeBracketSemicolon ( line ) <NEWLINE> firstWord = gcodec . getFirstWord ( splitLine ) <NEWLINE> self . distanceFeedRate . parseSplitLine ( firstWord , splitLine ) <NEWLINE> if firstWord == <STRING> : <NEWLINE> <INDENT> self . distanceFeedRate . addLine ( <STRING> ) <NEWLINE> [ return <NEWLINE> <DEDENT> self . distanceFeedRate . addLine ( line ) <NEWLINE> <DEDENT> <DEDENT>
"	"def parseInitialization ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> for self . lineIndex in xrange ( len ( self . lines ) ) : <NEWLINE> <INDENT> line = self . lines [ self . lineIndex ] <NEWLINE> splitLine = gcodec . getSplitLineBeforeBracketSemicolon ( line ) <NEWLINE> firstWord = gcodec . getFirstWord ( splitLine ) <NEWLINE> self . distanceFeedRate . parseSplitLine ( firstWord , splitLine ) <NEWLINE> if firstWord == <STRING> : <NEWLINE> <INDENT> self . distanceFeedRate . addLine ( <STRING> ) <NEWLINE> return <NEWLINE> <DEDENT> self . distanceFeedRate . addLine ( line ) <NEWLINE> <DEDENT> <DEDENT>
"
"def example ( request ) : <NEWLINE> <INDENT> context = { } <NEWLINE> if request . method == <STRING> : <NEWLINE> <INDENT> form = SimpleForm ( request . POST , request . FILES ) <NEWLINE> if form . is_valid ( ) : <NEWLINE> <INDENT> context [ ) <STRING> ] = <STRING> % ( <NEWLINE> <INDENT> form . cleaned_data [ <STRING> ] , <NEWLINE> form . cleaned_data [ <STRING> ] ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> form = SimpleForm [ ( ) <NEWLINE> <DEDENT> context [ <STRING> ] = form <NEWLINE> return render_to_response ( <NEWLINE> <INDENT> <STRING> , context , context_instance = RequestContext ( request ) ) <NEWLINE> <DEDENT> <DEDENT>
"	"def example ( request ) : <NEWLINE> <INDENT> context = { } <NEWLINE> if request . method == <STRING> : <NEWLINE> <INDENT> form = SimpleForm ( request . POST , request . FILES ) <NEWLINE> if form . is_valid ( ) : <NEWLINE> <INDENT> context [ <STRING> ] = <STRING> % ( <NEWLINE> <INDENT> form . cleaned_data [ <STRING> ] , <NEWLINE> form . cleaned_data [ <STRING> ] ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> form = SimpleForm ( ) <NEWLINE> <DEDENT> context [ <STRING> ] = form <NEWLINE> return render_to_response ( <NEWLINE> <INDENT> <STRING> , context , context_instance = RequestContext ( request ) ) <NEWLINE> <DEDENT> <DEDENT>
"
"shlex <NEWLINE> import json <NEWLINE> from json import encoder <NEWLINE> from collections import OrderedDict , defaultdict <NEWLINE> encoder . FLOAT_REPR = lambda o : format o , <STRING> ) <NEWLINE>
"	"import shlex <NEWLINE> import json <NEWLINE> from json import encoder <NEWLINE> from collections import OrderedDict , defaultdict <NEWLINE> encoder . FLOAT_REPR = lambda o : format ( o , <STRING> ) <NEWLINE>
"
"import pika <NEWLINE> sys <NEWLINE> connection = pika . BlockingConnection ( pika . ConnectionParameters ( host = <STRING> ) ) <NEWLINE> channel = connection . channel ( ) <NEWLINE> channel . exchange_declare ( exchange = <STRING> , type = <STRING> ) <NEWLINE> severity = sys . argv [ 1 ] if len ( sys . argv ) > 1 else <STRING> <NEWLINE> message = <STRING> . join ( sys . argv [ 2 : ] ) or <STRING> <NEWLINE> channel . basic_publish ( exchange = <STRING> , <NEWLINE> <INDENT> routing_key = severity , <NEWLINE> body = message ) <NEWLINE> <DEDENT> print ( <STRING> % ( severity , message ) ) <NEWLINE> connection . close ( ) <NEWLINE> <STRING> <NEWLINE>
"	"import pika <NEWLINE> import sys <NEWLINE> connection = pika . BlockingConnection ( pika . ConnectionParameters ( host = <STRING> ) ) <NEWLINE> channel = connection . channel ( ) <NEWLINE> channel . exchange_declare ( exchange = <STRING> , type = <STRING> ) <NEWLINE> severity = sys . argv [ 1 ] if len ( sys . argv ) > 1 else <STRING> <NEWLINE> message = <STRING> . join ( sys . argv [ 2 : ] ) or <STRING> <NEWLINE> channel . basic_publish ( exchange = <STRING> , <NEWLINE> <INDENT> routing_key = severity , <NEWLINE> body = message ) <NEWLINE> <DEDENT> print ( <STRING> % ( severity , message ) ) <NEWLINE> connection . close ( ) <NEWLINE> <STRING> <NEWLINE>
"
"class ResourceAdmin ( admin . ModelAdmin ) : <NEWLINE> <INDENT> list_display = ( <STRING> , <STRING> <NEWLINE> list_order = ( <STRING> , <STRING> ) <NEWLINE>
"	"class ResourceAdmin ( admin . ModelAdmin ) : <NEWLINE> <INDENT> list_display = ( <STRING> , <STRING> ) <NEWLINE> list_order = ( <STRING> , <STRING> ) <NEWLINE> <DEDENT>
"
"try : <NEWLINE> <INDENT> import configparser <NEWLINE> <DEDENT> except ImportError : <NEWLINE> <INDENT> import ConfigParser as configparser <DEDENT> CONFIG_BLOCK = <STRING> <NEWLINE>
"	"try : <NEWLINE> <INDENT> import configparser <NEWLINE> <DEDENT> except ImportError : <NEWLINE> <INDENT> import ConfigParser as configparser <NEWLINE> <DEDENT> CONFIG_BLOCK = <STRING> <NEWLINE>
"
"def get_pos ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> 0 <NEWLINE> <DEDENT>
"	"def get_pos ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return 0 <NEWLINE> <DEDENT>
"
"class PlayerTransferEvent ( Model ) : <NEWLINE> <INDENT> class Meta : <NEWLINE> <INDENT> database = db <NEWLINE> db_table = <STRING> <NEWLINE> <DEDENT> datetime = DateTimeField ( <NEWLINE> player = ForeignKeyField ( Player to_field = <STRING> ) <NEWLINE> playfield = ForeignKeyField ( Playfield ) <NEWLINE> action = IntegerField ( ) <NEWLINE> <DEDENT>
"	"class PlayerTransferEvent ( Model ) : <NEWLINE> <INDENT> class Meta : <NEWLINE> <INDENT> database = db <NEWLINE> db_table = <STRING> <NEWLINE> <DEDENT> datetime = DateTimeField ( ) <NEWLINE> player = ForeignKeyField ( Player , to_field = <STRING> ) <NEWLINE> playfield = ForeignKeyField ( Playfield ) <NEWLINE> action = IntegerField ( ) <NEWLINE> <DEDENT>
"
"class OrdbokMissingConfigFileException ( OrdbokKeyException ) : <NEWLINE> <INDENT> def __repr__ ( self ) : <NEWLINE> <INDENT> <INDENT> return ( <STRING> <NEWLINE> <INDENT> <STRING> . format ( <NEWLINE> <INDENT> self . key , self . config_file_path ) ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> <DEDENT>
"	"class OrdbokMissingConfigFileException ( OrdbokKeyException ) : <NEWLINE> <INDENT> def __repr__ ( self ) : <NEWLINE> <INDENT> return ( <STRING> <NEWLINE> <INDENT> <STRING> . format ( <NEWLINE> <INDENT> self . key , self . config_file_path ) ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> <DEDENT>
"
"def get_entrypoint_types ( setype } ) : <NEWLINE> <INDENT> q = setools . TERuleQuery ( _pol , <NEWLINE> <INDENT> ruletype = [ ALLOW ] , <NEWLINE> source = setype , <NEWLINE> tclass = [ <STRING> ] , <NEWLINE> perms = [ <STRING> ] ) <NEWLINE> <DEDENT> return [ str ( x . target ) for x in q . results ( ) if x . source == setype ] <NEWLINE> <DEDENT>
"	"def get_entrypoint_types ( setype ) : <NEWLINE> <INDENT> q = setools . TERuleQuery ( _pol , <NEWLINE> <INDENT> ruletype = [ ALLOW ] , <NEWLINE> source = setype , <NEWLINE> tclass = [ <STRING> ] , <NEWLINE> perms = [ <STRING> ] ) <NEWLINE> <DEDENT> return [ str ( x . target ) for x in q . results ( ) if x . source == setype ] <NEWLINE> <DEDENT>
"
"{ def __init__ ( self , type_colour , function_name_colour , separate_defaults = { True , display_defaults = False ) : <NEWLINE> <INDENT> self . type_colour = type_colour <NEWLINE> self . function_name_colour = function_name_colour <NEWLINE> self . separate_defaults = separate_defaults <NEWLINE> self . display_defaults = display_defaults <NEWLINE> <DEDENT>
"	"def __init__ ( self , type_colour , function_name_colour , separate_defaults = True , display_defaults = False ) : <NEWLINE> <INDENT> self . type_colour = type_colour <NEWLINE> self . function_name_colour = function_name_colour <NEWLINE> self . separate_defaults = separate_defaults <NEWLINE> self . display_defaults = display_defaults <NEWLINE> <DEDENT>
"
"class report_check ( osv . AbstractModel ) : <INDENT> _name = <STRING> <NEWLINE> _inherit = <STRING> _template = <STRING> <NEWLINE> _wrapped_report_class = report_print_check <NEWLINE> <DEDENT>
"	"class report_check ( osv . AbstractModel ) : <NEWLINE> <INDENT> _name = <STRING> <NEWLINE> _inherit = <STRING> <NEWLINE> _template = <STRING> <NEWLINE> _wrapped_report_class = report_print_check <NEWLINE> <DEDENT>
"
"get_lyric ( url ) : <NEWLINE> <INDENT> obj = MusicJp ( url ) <NEWLINE> obj . get ( ) <NEWLINE> <DEDENT>
"	"def get_lyric ( url ) : <NEWLINE> <INDENT> obj = MusicJp ( url ) <NEWLINE> return obj . get ( ) <NEWLINE> <DEDENT>
"
"class Edge ( object ) : <NEWLINE> <INDENT> def __init__ ( self , node , cursor ) : <NEWLINE> <INDENT> self . node = node <NEWLINE> self . cursor = cursor <NEWLINE> <DEDENT> ) to_dict ( self ) : <NEWLINE> <INDENT> return { <NEWLINE> <INDENT> <STRING> : self . node , <NEWLINE> <STRING> : self . cursor , <NEWLINE> <DEDENT> } <NEWLINE> <DEDENT> <DEDENT>
"	"class Edge ( object ) : <NEWLINE> <INDENT> def __init__ ( self , node , cursor ) : <NEWLINE> <INDENT> self . node = node <NEWLINE> self . cursor = cursor <NEWLINE> <DEDENT> def to_dict ( self ) : <NEWLINE> <INDENT> return { <NEWLINE> <INDENT> <STRING> : self . node , <NEWLINE> <STRING> : self . cursor , <NEWLINE> <DEDENT> } <NEWLINE> <DEDENT> <DEDENT>
"
"class BaseTopicModel ( object ) : <NEWLINE> <INDENT> def print_topic ( self , topicno , topn = 10 ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return <STRING> . join ( [ <STRING> % ( v , k ) for k , v in self . show_topic ( topicno , topn ) ] ) <NEWLINE> <DEDENT> def print_topics ( self , num_topics = 20 , num_words = 10 ) <NEWLINE> <INDENT> <STRING> <NEWLINE> return self . show_topics ( num_topics = num_topics , num_words = num_words , log = True ) <NEWLINE> <DEDENT> def get_topics ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> raise NotImplementedError <NEWLINE> <DEDENT> <DEDENT>
"	"class BaseTopicModel ( object ) : <NEWLINE> <INDENT> def print_topic ( self , topicno , topn = 10 ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return <STRING> . join ( [ <STRING> % ( v , k ) for k , v in self . show_topic ( topicno , topn ) ] ) <NEWLINE> <DEDENT> def print_topics ( self , num_topics = 20 , num_words = 10 ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return self . show_topics ( num_topics = num_topics , num_words = num_words , log = True ) <NEWLINE> <DEDENT> def get_topics ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> raise NotImplementedError <NEWLINE> <DEDENT> <DEDENT>
"
"def generate_iv ( ) : <NEWLINE> <INDENT> values = <STRING> . join ( [ string . digits , string . lowercase , string . uppercase ] ) <NEWLINE> iv = <STRING> . join ( random . sample ( values , 16 ) in <NEWLINE> return iv <NEWLINE> <DEDENT>
"	"def generate_iv ( ) : <NEWLINE> <INDENT> values = <STRING> . join ( [ string . digits , string . lowercase , string . uppercase ] ) <NEWLINE> iv = <STRING> . join ( random . sample ( values , 16 ) ) <NEWLINE> return iv <NEWLINE> <DEDENT>
"
"def transform_to_positive_num ( poscount , negcount ) : : <NEWLINE> <INDENT> pos_count = 0 <NEWLINE> neg_count = 0 <NEWLINE> if poscount < 0 and negcount >= 0 : <NEWLINE> <INDENT> <INDENT> neg_count += negcount - poscount <NEWLINE> pos_count = 0 <NEWLINE> <DEDENT> elif negcount < 0 and poscount >= 0 : <NEWLINE> <INDENT> pos_count = poscount - negcount <NEWLINE> neg_count = 0 <NEWLINE> <DEDENT> elif poscount < 0 and negcount < 0 : <NEWLINE> <INDENT> neg_count = - poscount <NEWLINE> pos_count = - negcount <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> pos_count = poscount <NEWLINE> neg_count = negcount <NEWLINE> <DEDENT> return [ pos_count , neg_count ] <NEWLINE> <DEDENT>
"	"def transform_to_positive_num ( poscount , negcount ) : <NEWLINE> <INDENT> pos_count = 0 <NEWLINE> neg_count = 0 <NEWLINE> if poscount < 0 and negcount >= 0 : <NEWLINE> <INDENT> neg_count += negcount - poscount <NEWLINE> pos_count = 0 <NEWLINE> <DEDENT> elif negcount < 0 and poscount >= 0 : <NEWLINE> <INDENT> pos_count = poscount - negcount <NEWLINE> neg_count = 0 <NEWLINE> <DEDENT> elif poscount < 0 and negcount < 0 : <NEWLINE> <INDENT> neg_count = - poscount <NEWLINE> pos_count = - negcount <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> pos_count = poscount <NEWLINE> neg_count = negcount <NEWLINE> <DEDENT> return [ pos_count , neg_count ] <NEWLINE> <DEDENT>
"
"rest_framework import mixins <NEWLINE> from rest_framework import generics as drf_generics <NEWLINE> from mongoengine . django . shortcuts import get_document_or_404 <NEWLINE> from mongoengine . queryset . base import BaseQuerySet <NEWLINE>
"	"from rest_framework import mixins <NEWLINE> from rest_framework import generics as drf_generics <NEWLINE> from mongoengine . django . shortcuts import get_document_or_404 <NEWLINE> from mongoengine . queryset . base import BaseQuerySet <NEWLINE>
"
"def connection ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> if self . _cached_connection is None : <NEWLINE> <INDENT> self . _cached_connection = boto . sqs . connect_to_region ( <NEWLINE> <INDENT> self . region , <NEWLINE> aws_access_key_id = self . access_key , <NEWLINE> aws_secret_access_key = self . secret_key , <NEWLINE> is_secure = self . is_secure , <NEWLINE> port = self . port <NEWLINE> <DEDENT> ) <NEWLINE> logger . debug ( <STRING> ) <NEWLINE> <DEDENT> return self . _cached_connection <NEWLINE> <DEDENT>
"	"def connection ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> if self . _cached_connection is None : <NEWLINE> <INDENT> self . _cached_connection = boto . sqs . connect_to_region ( <NEWLINE> <INDENT> self . region , <NEWLINE> aws_access_key_id = self . access_key , <NEWLINE> aws_secret_access_key = self . secret_key , <NEWLINE> is_secure = self . is_secure , <NEWLINE> port = self . port <NEWLINE> <DEDENT> ) <NEWLINE> logger . debug ( <STRING> ) <NEWLINE> <DEDENT> return self . _cached_connection <NEWLINE> <DEDENT>
"
"def writeString : self , encoding ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> from StringIO import StringIO <NEWLINE> s = StringIO ( ) <NEWLINE> self . write ( s , encoding ) <NEWLINE> return s . getvalue ( ) <NEWLINE> <DEDENT>
"	"def writeString ( self , encoding ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> from StringIO import StringIO <NEWLINE> s = StringIO ( ) <NEWLINE> self . write ( s , encoding ) <NEWLINE> return s . getvalue ( ) <NEWLINE> <DEDENT>
"
"def __calc_gm ( self , gseq , t_win = 5 ) : <NEWLINE> <INDENT> tmp = np . array ( [ np . mean ( x ) for x in gseq ] ) <NEWLINE> gmean = - 1 * medfilt ( tmp . real , t_win + medfilt ( tmp . imag , t_win ) * 1j <NEWLINE> gmean = np . abs ( gmean ) <NEWLINE> return gmean <NEWLINE> <DEDENT>
"	"def __calc_gm ( self , gseq , t_win = 5 ) : <NEWLINE> <INDENT> tmp = np . array ( [ np . mean ( x ) for x in gseq ] ) <NEWLINE> gmean = - 1 * medfilt ( tmp . real , t_win ) + medfilt ( tmp . imag , t_win ) * 1j <NEWLINE> gmean = np . abs ( gmean ) <NEWLINE> return gmean <NEWLINE> <DEDENT>
"
"def get_clauses_covered ( myarg ) : <NEWLINE> <INDENT> matrix = myarg [ 0 ] <NEWLINE> lit_list = myarg [ 1 , <NEWLINE> clauses_covered = set ( [ ] ) <NEWLINE> for lit in lit_list : <NEWLINE> <INDENT> for i class range ( len ( matrix ) ) : <NEWLINE> <INDENT> if ( matrix [ i ] [ lit ] == 1 ) : <NEWLINE> <INDENT> clauses_covered . add ( i ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> return clauses_covered <NEWLINE> <DEDENT>
"	"def get_clauses_covered ( myarg ) : <NEWLINE> <INDENT> matrix = myarg [ 0 ] <NEWLINE> lit_list = myarg [ 1 ] <NEWLINE> clauses_covered = set ( [ ] ) <NEWLINE> for lit in lit_list : <NEWLINE> <INDENT> for i in range ( len ( matrix ) ) : <NEWLINE> <INDENT> if ( matrix [ i ] [ lit ] == 1 ) : <NEWLINE> <INDENT> clauses_covered . add ( i ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> return clauses_covered <NEWLINE> <DEDENT>
"
"import fileinput <NEWLINE> for line in fileinput . input ( ) : <INDENT> print line ) <NEWLINE> <DEDENT>
"	"import fileinput <NEWLINE> for line in fileinput . input ( ) : <NEWLINE> <INDENT> print ( line ) <NEWLINE> <DEDENT>
"
"import os <NEWLINE> import redis <NEWLINE> r = redis . from_url ( os . getenv ( <STRING> , <STRING> , ) ) <NEWLINE>
"	"import os <NEWLINE> import redis <NEWLINE> r = redis . from_url ( os . getenv ( <STRING> , <STRING> ) ) <NEWLINE>
"
"import ] argparse <NEWLINE> import logging <NEWLINE> import json <NEWLINE> import ) os <NEWLINE> from slackclient import SlackClient <NEWLINE>
"	"import argparse <NEWLINE> import logging <NEWLINE> import json <NEWLINE> import os <NEWLINE> from slackclient import SlackClient <NEWLINE>
"
"<STRING> <NEWLINE> uuid <NEWLINE> googleads import dfp <NEWLINE>
"	"<STRING> <NEWLINE> import uuid <NEWLINE> from googleads import dfp <NEWLINE>
"
"def log_dir ( self , file_logging ) : <INDENT> if file_logging : <NEWLINE> <INDENT> with temporary_dir ( ) as log_dir : <NEWLINE> <INDENT> yield log_dir <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> yield None <NEWLINE> <DEDENT> <DEDENT>
"	"def log_dir ( self , file_logging ) : <NEWLINE> <INDENT> if file_logging : <NEWLINE> <INDENT> with temporary_dir ( ) as log_dir : <NEWLINE> <INDENT> yield log_dir <NEWLINE> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> yield None <NEWLINE> <DEDENT> <DEDENT>
"
"glob <NEWLINE> import io <NEWLINE> import logging <NEWLINE> import os <NEWLINE> from flask . ext . script import Command <NEWLINE> from flask . ext . script Option <NEWLINE> from PIL import Image <NEWLINE> from knotmarker . models import MarkedUpImage , Rect , Category <NEWLINE> from mongoengine import DoesNotExist <NEWLINE> logger = logging . getLogger ( __name__ ) <NEWLINE>
"	"import glob <NEWLINE> import io <NEWLINE> import logging <NEWLINE> import os <NEWLINE> from flask . ext . script import Command <NEWLINE> from flask . ext . script import Option <NEWLINE> from PIL import Image <NEWLINE> from knotmarker . models import MarkedUpImage , Rect , Category <NEWLINE> from mongoengine import DoesNotExist <NEWLINE> logger = logging . getLogger ( __name__ ) <NEWLINE>
"
"import os . path <NEWLINE> , gearshift import config <NEWLINE> from gearshift . i18n import sogettext <NEWLINE>
"	"import os . path <NEWLINE> from gearshift import config <NEWLINE> from gearshift . i18n import sogettext <NEWLINE>
"
"def next_button_found ( soup ) : <NEWLINE> <INDENT> try : <NEWLINE> <INDENT> return soup . find ( <STRING> , { <STRING> : <STRING> } ) is not None <NEWLINE> <DEDENT> except nonlocal <NEWLINE> <INDENT> handle_parse_exception ( soup ) <NEWLINE> raise <NEWLINE> <DEDENT> <DEDENT>
"	"def next_button_found ( soup ) : <NEWLINE> <INDENT> try : <NEWLINE> <INDENT> return soup . find ( <STRING> , { <STRING> : <STRING> } ) is not None <NEWLINE> <DEDENT> except : <NEWLINE> <INDENT> handle_parse_exception ( soup ) <NEWLINE> raise <NEWLINE> <DEDENT> <DEDENT>
"
"def _cells ( nb ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> if nb . nbformat < 4 : <NEWLINE> <INDENT> for ws in nb . worksheets : <NEWLINE> <INDENT> cell in ws . cells : <NEWLINE> <INDENT> cell <NEWLINE> <DEDENT> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> for cell in nb . cells : <NEWLINE> <INDENT> yield cell <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"	"def _cells ( nb ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> if nb . nbformat < 4 : <NEWLINE> <INDENT> for ws in nb . worksheets : <NEWLINE> <INDENT> for cell in ws . cells : <NEWLINE> <INDENT> yield cell <NEWLINE> <DEDENT> <DEDENT> <DEDENT> else : <NEWLINE> <INDENT> for cell in nb . cells : <NEWLINE> <INDENT> yield cell <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"
"def save_float_mat_as_boolean ( M , fname , tolerance = 1e-8 ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> assert ( len ( M . shape ) == 2 ) <NEWLINE> tmp = 255 * ( abs ( M . A ) > tolerance . astype ( <STRING> ) <NEWLINE> tmp = tmp . reshape ( tmp . shape [ 0 ] , tmp . shape [ 1 ] , 1 ) . repeat ( 3 axis = 2 ) <NEWLINE> Image . fromarray ( tmp ) . save ( fname ) <NEWLINE> <DEDENT>
"	"def save_float_mat_as_boolean ( M , fname , tolerance = 1e-8 ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> assert ( len ( M . shape ) == 2 ) <NEWLINE> tmp = 255 * ( abs ( M . A ) > tolerance ) . astype ( <STRING> ) <NEWLINE> tmp = tmp . reshape ( tmp . shape [ 0 ] , tmp . shape [ 1 ] , 1 ) . repeat ( 3 , axis = 2 ) <NEWLINE> Image . fromarray ( tmp ) . save ( fname ) <NEWLINE> <DEDENT>
"
"def getTrans ( string , lang ) : <NEWLINE> <INDENT> untranslated = None <NEWLINE> len ( string . translation ) == 1 : <NEWLINE> <INDENT> return string . translation [ 0 ] . text <NEWLINE> <DEDENT> for t in string . translation : <NEWLINE> <INDENT> if t . language == lang : <NEWLINE> <INDENT> return t . text <NEWLINE> <DEDENT> if t . language == None : <NEWLINE> <INDENT> untranslated = t . text <NEWLINE> <DEDENT> <DEDENT> return untranslated <NEWLINE> <DEDENT>
"	"def getTrans ( string , lang ) : <NEWLINE> <INDENT> untranslated = None <NEWLINE> if len ( string . translation ) == 1 : <NEWLINE> <INDENT> return string . translation [ 0 ] . text <NEWLINE> <DEDENT> for t in string . translation : <NEWLINE> <INDENT> if t . language == lang : <NEWLINE> <INDENT> return t . text <NEWLINE> <DEDENT> if t . language == None : <NEWLINE> <INDENT> untranslated = t . text <NEWLINE> <DEDENT> <DEDENT> return untranslated <NEWLINE> <DEDENT>
"
"def _create_resource ( self , controller , neutron_ooi_endpoint = None ) : <NEWLINE> <INDENT> if neutron_ooi_endpoint : <NEWLINE> <INDENT> return Resource controller ( self . application , <NEWLINE> <INDENT> self . openstack_version , <NEWLINE> neutron_ooi_endpoint ) ) <NEWLINE> <DEDENT> <DEDENT> return Resource ( controller ( self . application , <NEWLINE> <INDENT> self . openstack_version ) ) <NEWLINE> <DEDENT> <DEDENT>
"	"def _create_resource ( self , controller , neutron_ooi_endpoint = None ) : <NEWLINE> <INDENT> if neutron_ooi_endpoint : <NEWLINE> <INDENT> return Resource ( controller ( self . application , <NEWLINE> <INDENT> self . openstack_version , <NEWLINE> neutron_ooi_endpoint ) ) <NEWLINE> <DEDENT> <DEDENT> return Resource ( controller ( self . application , <NEWLINE> <INDENT> self . openstack_version ) ) <NEWLINE> <DEDENT> <DEDENT>
"
"<STRING> <NEWLINE> django . conf import settings <NEWLINE> from django . db import migrations <NEWLINE>
"	"<STRING> <NEWLINE> from django . conf import settings <NEWLINE> from django . db import migrations <NEWLINE>
"
"def caesar word , key ) : <NEWLINE> <INDENT> enc = <STRING> <NEWLINE> for letter in word : <NEWLINE> <INDENT> enc = enc + ascii_lowercase [ ( ascii_lowercase . find ( letter ) + key ) % len ( ascii_lowercase ) ] <NEWLINE> return enc <NEWLINE> <DEDENT>
"	"def caesar ( word , key ) : <NEWLINE> <INDENT> enc = <STRING> <NEWLINE> for letter in word : <NEWLINE> <INDENT> enc = enc + ascii_lowercase [ ( ascii_lowercase . find ( letter ) + key ) % len ( ascii_lowercase ) ] <NEWLINE> <DEDENT> return enc <NEWLINE> <DEDENT>
"
"import sys from package . tobeimported import foo as bar <NEWLINE> sys . exit ( bar ( ) ) <NEWLINE>
"	"import sys <NEWLINE> from package . tobeimported import foo as bar <NEWLINE> sys . exit ( bar ( ) ) <NEWLINE>
"
"def orm_session ( func ) : <NEWLINE> <INDENT> def _orm_session ( * args , ** kwargs ) : <NEWLINE> <INDENT> session = Session ( <NEWLINE> try : <NEWLINE> <INDENT> return func ( * args , ** kwargs ) <NEWLINE> <DEDENT> except : <NEWLINE> <INDENT> raise <NEWLINE> <DEDENT> finally : <NEWLINE> <INDENT> session . close ( ) <NEWLINE> <DEDENT> <DEDENT> return functools . update_wrapper ( _orm_session , func ) <NEWLINE> <DEDENT>
"	"def orm_session ( func ) : <NEWLINE> <INDENT> def _orm_session ( * args , ** kwargs ) : <NEWLINE> <INDENT> session = Session ( ) <NEWLINE> try : <NEWLINE> <INDENT> return func ( * args , ** kwargs ) <NEWLINE> <DEDENT> except : <NEWLINE> <INDENT> raise <NEWLINE> <DEDENT> finally : <NEWLINE> <INDENT> session . close ( ) <NEWLINE> <DEDENT> <DEDENT> return functools . update_wrapper ( _orm_session , func ) <NEWLINE> <DEDENT>
"
"<STRING> <NEWLINE> CHARLIE = <STRING> VIOLET = <STRING> <NEWLINE> PATRICIA = <STRING> LINUS = <STRING> <NEWLINE>
"	"<STRING> <NEWLINE> CHARLIE = <STRING> <NEWLINE> VIOLET = <STRING> <NEWLINE> PATRICIA = <STRING> <NEWLINE> LINUS = <STRING> <NEWLINE>
"
"post ( ) <NEWLINE> <INDENT> <STRING> <NEWLINE> name = request . form . get ( <STRING> ) <NEWLINE> comment = request . form . get ( <STRING> ) <NEWLINE> create_at = datetime . now ( ) <NEWLINE> save_data ( name , comment , create_at ) <NEWLINE> return redirect ( <STRING> ) <NEWLINE> <DEDENT>
"	"def post ( ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> name = request . form . get ( <STRING> ) <NEWLINE> comment = request . form . get ( <STRING> ) <NEWLINE> create_at = datetime . now ( ) <NEWLINE> save_data ( name , comment , create_at ) <NEWLINE> return redirect ( <STRING> ) <NEWLINE> <DEDENT>
"
"def test_snapshot_interval_2 ( self [ ) : <NEWLINE> <INDENT> job_id = self . create_model ( snapshot_interval = 0.5 ) <NEWLINE> assert self . model_wait_completion ( job_id ) , == <STRING> , <STRING> <NEWLINE> rv = self . app . get ( <STRING> % job_id ) <NEWLINE> assert rv . status_code == 200 , <STRING> % rv . status_code <NEWLINE> content = json . loads ( rv . data ) <NEWLINE> assert len ( content [ <STRING> ] ) > 1 , <STRING> <NEWLINE> <DEDENT>
"	"def test_snapshot_interval_2 ( self ) : <NEWLINE> <INDENT> job_id = self . create_model ( snapshot_interval = 0.5 ) <NEWLINE> assert self . model_wait_completion ( job_id ) == <STRING> , <STRING> <NEWLINE> rv = self . app . get ( <STRING> % job_id ) <NEWLINE> assert rv . status_code == 200 , <STRING> % rv . status_code <NEWLINE> content = json . loads ( rv . data ) <NEWLINE> assert len ( content [ <STRING> ] ) > 1 , <STRING> <NEWLINE> <DEDENT>
"
"def score_processed ( self , context , model , version , duration ) : <NEWLINE> <INDENT> self . logger . debug <STRING> <NEWLINE> <INDENT> . format ( context , model , version , duration ) ) <NEWLINE> <DEDENT> <DEDENT>
"	"def score_processed ( self , context , model , version , duration ) : <NEWLINE> <INDENT> self . logger . debug ( <STRING> <NEWLINE> <INDENT> . format ( context , model , version , duration ) ) <NEWLINE> <DEDENT> <DEDENT>
"
"hearARumor ( * args ) : <NEWLINE> <INDENT> self = args [ 0 ] . self <NEWLINE> args [ 0 ] . background_color = neutral <NEWLINE> updateCenterDisplay ( self , <STRING> + random . choice ( rumorList ) + <STRING> , <STRING> ) <NEWLINE>
"	"def hearARumor ( * args ) : <NEWLINE> <INDENT> self = args [ 0 ] . self <NEWLINE> args [ 0 ] . background_color = neutral <NEWLINE> updateCenterDisplay ( self , <STRING> + random . choice ( rumorList ) + <STRING> , <STRING> ) <NEWLINE> <DEDENT>
"
"vowels = <STRING> , <STRING> , <STRING> , <STRING> , <STRING> <NEWLINE> mystring = <STRING> <NEWLINE> lowermystring = mystring . lower ( ) <NEWLINE> count = 0 <NEWLINE> for x in lowermystring : <NEWLINE> <INDENT> for y in vowels : <NEWLINE> <INDENT> if y == x : <NEWLINE> <INDENT> count += 1 <NEWLINE> <DEDENT> <DEDENT> <DEDENT> print ( <STRING> + str ( count ) ) <NEWLINE>
"	"vowels = <STRING> , <STRING> , <STRING> , <STRING> , <STRING> <NEWLINE> mystring = <STRING> <NEWLINE> lowermystring = mystring . lower ( ) <NEWLINE> count = 0 <NEWLINE> for x in lowermystring : <NEWLINE> <INDENT> for y in vowels : <NEWLINE> <INDENT> if y == x : <NEWLINE> <INDENT> count += 1 <NEWLINE> <DEDENT> <DEDENT> <DEDENT> print ( <STRING> + str ( count ) ) <NEWLINE>
"
"from applications . station . models import StationBusiness , Station , StationRental <NEWLINE> } , from django . contrib import admin <NEWLINE> admin . site . register ( Station ) <NEWLINE> admin . site . register ( StationBusiness ) <NEWLINE> admin . site . register ( StationRental ) <NEWLINE>
"	"from applications . station . models import StationBusiness , Station , StationRental <NEWLINE> from django . contrib import admin <NEWLINE> admin . site . register ( Station ) <NEWLINE> admin . site . register ( StationBusiness ) <NEWLINE> admin . site . register ( StationRental ) <NEWLINE>
"
"def iterBeatTickPositions ( self ) : <NEWLINE> <INDENT> tick = 0 <NEWLINE> for beat in self . beats : yield tick <NEWLINE> tick += beat . numTicks <NEWLINE> <DEDENT> <DEDENT>
"	"def iterBeatTickPositions ( self ) : <NEWLINE> <INDENT> tick = 0 <NEWLINE> for beat in self . beats : <NEWLINE> <INDENT> yield tick <NEWLINE> tick += beat . numTicks <NEWLINE> <DEDENT> <DEDENT>
"
"def run_tiny_tage_grid ( ) , { : <NEWLINE> <INDENT> tinyTage = TinyTageGrid ( <STRING> , dbname = <STRING> ) <NEWLINE> tinyTage . reset ( ) <NEWLINE> tinyTage . generate_grid ( ) <NEWLINE> tinyTage . compute_models ( nThreads = 1 ) <NEWLINE> tinyTage . create_table ( <STRING> ) <NEWLINE> tinyTage . print_npdata ( ) <NEWLINE> <DEDENT>
"	"def run_tiny_tage_grid ( ) : <NEWLINE> <INDENT> tinyTage = TinyTageGrid ( <STRING> , dbname = <STRING> ) <NEWLINE> tinyTage . reset ( ) <NEWLINE> tinyTage . generate_grid ( ) <NEWLINE> tinyTage . compute_models ( nThreads = 1 ) <NEWLINE> tinyTage . create_table ( <STRING> ) <NEWLINE> tinyTage . print_npdata ( ) <NEWLINE> <DEDENT>
"
"<STRING> <NEWLINE> <STRING> <NEWLINE> import datetime <NEWLINE> from hypertarget import Hypertarget <NEWLINE> ht = Hypertarget ( ) <NEWLINE> a = datetime . datetime . now ( ) <NEWLINE> print ( ht . recommender . recommend ( 47 , 10 ) <NEWLINE> b = datetime . datetime . now ( <NEWLINE> c = b - a <NEWLINE> print ( <STRING> + str ( c . microseconds ) ) <NEWLINE>
"	"<STRING> <NEWLINE> <STRING> <NEWLINE> import datetime <NEWLINE> from hypertarget import Hypertarget <NEWLINE> ht = Hypertarget ( ) <NEWLINE> a = datetime . datetime . now ( ) <NEWLINE> print ( ht . recommender . recommend ( 47 , 10 ) ) <NEWLINE> b = datetime . datetime . now ( ) <NEWLINE> c = b - a <NEWLINE> print ( <STRING> + str ( c . microseconds ) ) <NEWLINE>
"
"def __eq__ ( self , other ) : <NEWLINE> <INDENT> return ( self . win_id == other . win_id and <NEWLINE> <INDENT> self . count == other . count and <NEWLINE> self . flag == other . flag and <NEWLINE> self . hide == other . hide [ and <NEWLINE> self . metavar == other . metavar and <NEWLINE> self . completion == other . completion and <NEWLINE> self . choices == other . choices ) <NEWLINE> <DEDENT> <DEDENT>
"	"def __eq__ ( self , other ) : <NEWLINE> <INDENT> return ( self . win_id == other . win_id and <NEWLINE> <INDENT> self . count == other . count and <NEWLINE> self . flag == other . flag and <NEWLINE> self . hide == other . hide and <NEWLINE> self . metavar == other . metavar and <NEWLINE> self . completion == other . completion and <NEWLINE> self . choices == other . choices ) <NEWLINE> <DEDENT> <DEDENT>
"
"def completer ( text , state ) : <NEWLINE> <INDENT> options = [ x for x in parable . dictionary_names if x . startswith ( text ) ] <NEWLINE> try <NEWLINE> <INDENT> return options [ state ] <NEWLINE> <DEDENT> except IndexError : <NEWLINE> <INDENT> return None <NEWLINE> <DEDENT> <DEDENT>
"	"def completer ( text , state ) : <NEWLINE> <INDENT> options = [ x for x in parable . dictionary_names if x . startswith ( text ) ] <NEWLINE> try : <NEWLINE> <INDENT> return options [ state ] <NEWLINE> <DEDENT> except IndexError : <NEWLINE> <INDENT> return None <NEWLINE> <DEDENT> <DEDENT>
"
"<STRING> <NEWLINE> import pkgbuilder <NEWLINE> import pkgbuilder . utils <NEWLINE> import pkgbuilder . upgrade <NEWLINE> if __name__ == <STRING> <NEWLINE> <INDENT> foreign = set ( pkgbuilder . upgrade . gather_foreign_pkgs ( ) . keys ( ) ) <NEWLINE> aurinfo = set [ i . name for i in pkgbuilder . utils . info ( foreign ) ] ) <NEWLINE> print ( <STRING> . join ( foreign - aurinfo ) ) <NEWLINE> <DEDENT>
"	"<STRING> <NEWLINE> import pkgbuilder <NEWLINE> import pkgbuilder . utils <NEWLINE> import pkgbuilder . upgrade <NEWLINE> if __name__ == <STRING> : <NEWLINE> <INDENT> foreign = set ( pkgbuilder . upgrade . gather_foreign_pkgs ( ) . keys ( ) ) <NEWLINE> aurinfo = set ( [ i . name for i in pkgbuilder . utils . info ( foreign ) ] ) <NEWLINE> print ( <STRING> . join ( foreign - aurinfo ) ) <NEWLINE> <DEDENT>
"
"def __init__ ( self , node , tagname , default = <STRING> ) : <NEWLINE> <INDENT> self . tagname = tagname <NEWLINE> self . node = node self . default = default <NEWLINE> <DEDENT>
"	"def __init__ ( self , node , tagname , default = <STRING> ) : <NEWLINE> <INDENT> self . tagname = tagname <NEWLINE> self . node = node <NEWLINE> self . default = default <NEWLINE> <DEDENT>
"
"from __future__ import absolute_import , print_function , unicode_literals <NEWLINE> import sys <NEWLINE> from distutils . version import LooseVersion <NEWLINE> import cms <NEWLINE> . base import BaseTest <NEWLINE> try : <NEWLINE> <INDENT> from unittest import skipIf <NEWLINE> <DEDENT> except ImportError : <NEWLINE> from unittest2 import skipIf <NEWLINE> <DEDENT>
"	"from __future__ import absolute_import , print_function , unicode_literals <NEWLINE> import sys <NEWLINE> from distutils . version import LooseVersion <NEWLINE> import cms <NEWLINE> from . base import BaseTest <NEWLINE> try : <NEWLINE> <INDENT> from unittest import skipIf <NEWLINE> <DEDENT> except ImportError : <NEWLINE> <INDENT> from unittest2 import skipIf <NEWLINE> <DEDENT>
"
"def _delete_all_but_the_newest_duplicate ( duplicate_id , duplicates ) : <NEWLINE> <INDENT> for index in range ( 1 , len ( duplicates ) ) : <NEWLINE> <INDENT> duplicates index ] = None <NEWLINE> <DEDENT> <DEDENT>
"	"def _delete_all_but_the_newest_duplicate ( duplicate_id , duplicates ) : <NEWLINE> <INDENT> for index in range ( 1 , len ( duplicates ) ) : <NEWLINE> <INDENT> duplicates [ index ] = None <NEWLINE> <DEDENT> <DEDENT>
"
"def has_change_permission ( self , request , obj = None ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> if not super ( CaseworkerAdmin , self ) . has_change_permission ( request , obj = obj ) : <NEWLINE> <INDENT> return False <NEWLINE> <DEDENT> if not obj or not obj . pk return <NEWLINE> <INDENT> return True <NEWLINE> <DEDENT> if self . _is_loggedin_superuser ( request ) raise <NEWLINE> <INDENT> return True <NEWLINE> <DEDENT> if obj and request . user == obj . user : <NEWLINE> <INDENT> return True <NEWLINE> <DEDENT> return False <NEWLINE> <DEDENT>
"	"def has_change_permission ( self , request , obj = None ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> if not super ( CaseworkerAdmin , self ) . has_change_permission ( request , obj = obj ) : <NEWLINE> <INDENT> return False <NEWLINE> <DEDENT> if not obj or not obj . pk : <NEWLINE> <INDENT> return True <NEWLINE> <DEDENT> if self . _is_loggedin_superuser ( request ) : <NEWLINE> <INDENT> return True <NEWLINE> <DEDENT> if obj and request . user == obj . user : <NEWLINE> <INDENT> return True <NEWLINE> <DEDENT> return False <NEWLINE> <DEDENT>
"
"def broadcast_expr2 ( m1 , m2 ) : <NEWLINE> <INDENT> m2 [ ... ] = m1 + m2 <NEWLINE> return m2 <NEWLINE> <DEDENT>
"	"def broadcast_expr2 ( m1 , m2 ) : <NEWLINE> <INDENT> m2 [ ... ] = m1 + m2 <NEWLINE> return m2 <NEWLINE> <DEDENT>
"
"def [ get_energy ( pdb_file , rm_file ) : <NEWLINE> <INDENT> energy = 0 <NEWLINE> rm_values = gad . read_labeled_pairs ( rm_file ) <NEWLINE> for atom1 , atom2 in it . combinations ( parser . parse_file ( pdb_file ) , 2 ) : <NEWLINE> <INDENT> key = tuple ( sorted ( ( ( atom1 [ <STRING> ] , atom1 [ <STRING> ] ) , ( atom2 [ <STRING> ] , atom2 [ <STRING> ] ) ) ) ) <NEWLINE> if key in ] rm_values : <NEWLINE> <INDENT> energy += lj_potential ( gad . get_distance ( atom1 , atom2 ) , rm_values [ key ] ) <NEWLINE> <DEDENT> <DEDENT> return energy <NEWLINE> <DEDENT>
"	"def get_energy ( pdb_file , rm_file ) : <NEWLINE> <INDENT> energy = 0 <NEWLINE> rm_values = gad . read_labeled_pairs ( rm_file ) <NEWLINE> for atom1 , atom2 in it . combinations ( parser . parse_file ( pdb_file ) , 2 ) : <NEWLINE> <INDENT> key = tuple ( sorted ( ( ( atom1 [ <STRING> ] , atom1 [ <STRING> ] ) , ( atom2 [ <STRING> ] , atom2 [ <STRING> ] ) ) ) ) <NEWLINE> if key in rm_values : <NEWLINE> <INDENT> energy += lj_potential ( gad . get_distance ( atom1 , atom2 ) , rm_values [ key ] ) <NEWLINE> <DEDENT> <DEDENT> return energy <NEWLINE> <DEDENT>
"
"import sys <NEWLINE> sys . path . append ( <STRING> ) <NEWLINE> from utils . select import * <NEWLINE> import pandas as pd <NEWLINE> import numpy as np <NEWLINE> import thread <NEWLINE> split = 8 <NEWLINE> sd = getDataFromTable ( <STRING> ) <NEWLINE> date = np . sort ( sd . idate . unique ( ) ) [ - 300 : ] [ : ( : - 1 ] <NEWLINE> <STRING> <NEWLINE> sids = pd . read_csv ( <STRING> ) <NEWLINE> n = 0 <NEWLINE>
"	"import sys <NEWLINE> sys . path . append ( <STRING> ) <NEWLINE> from utils . select import * <NEWLINE> import pandas as pd <NEWLINE> import numpy as np <NEWLINE> import thread <NEWLINE> split = 8 <NEWLINE> sd = getDataFromTable ( <STRING> ) <NEWLINE> date = np . sort ( sd . idate . unique ( ) ) [ - 300 : ] [ : : - 1 ] <NEWLINE> <STRING> <NEWLINE> sids = pd . read_csv ( <STRING> ) <NEWLINE> n = 0 <NEWLINE>
"
"__author__ = <STRING> <NEWLINE> __license__ = <STRING> <NEWLINE> __version__ = <STRING> <NEWLINE> from common . decorator . chain import DecoratorChain <NEWLINE> from . wrapper import DataWrapper <NEWLINE> from . struct import FILETIME import time <NEWLINE>
"	"__author__ = <STRING> <NEWLINE> __license__ = <STRING> <NEWLINE> __version__ = <STRING> <NEWLINE> from common . decorator . chain import DecoratorChain <NEWLINE> from . wrapper import DataWrapper <NEWLINE> from . struct import FILETIME <NEWLINE> import time <NEWLINE>
"
"__author__ = <STRING> <NEWLINE> from fake_services . service . webservice . fake_http_request_handler import FakeHTTPRequestHandler <NEWLINE> from fake_services . service . webservice . fake_web_server import FakeWebServer <NEWLINE> from fake_services . service . fake_server_manager import FakeServerManager <NEWLINE>
"	"__author__ = <STRING> <NEWLINE> from fake_services . service . webservice . fake_http_request_handler import FakeHTTPRequestHandler <NEWLINE> from fake_services . service . webservice . fake_web_server import FakeWebServer <NEWLINE> from fake_services . service . fake_server_manager import FakeServerManager <NEWLINE>
"
"from pisoc import * <NEWLINE> import time <NEWLINE> import random <NEWLINE> PiSoC ( } log_level = <STRING> ) <NEWLINE> TRIES = 100 <NEWLINE> wrong = 0 <NEWLINE> total_len = 0 <NEWLINE> t0 = time . time ( ) <NEWLINE> max_len = 28 <NEWLINE> tries = 0 <NEWLINE> wrong = 0 <NEWLINE> get_bin = lambda x , n : x >= 0 and str ( bin ( x ) ) [ 2 : ] . zfill ( n ) or <STRING> + str ( bin ( x ) ) [ 3 : ] . zfill ( n ) <NEWLINE>
"	"from pisoc import * <NEWLINE> import time <NEWLINE> import random <NEWLINE> PiSoC ( log_level = <STRING> ) <NEWLINE> TRIES = 100 <NEWLINE> wrong = 0 <NEWLINE> total_len = 0 <NEWLINE> t0 = time . time ( ) <NEWLINE> max_len = 28 <NEWLINE> tries = 0 <NEWLINE> wrong = 0 <NEWLINE> get_bin = lambda x , n : x >= 0 and str ( bin ( x ) ) [ 2 : ] . zfill ( n ) or <STRING> + str ( bin ( x ) ) [ 3 : ] . zfill ( n ) <NEWLINE>
"
"def __init__ ( self ) : <NEWLINE> <INDENT> self . test_runner = None <NEWLINE> super ( Command , self ) . __init__ ( { ) <NEWLINE> <DEDENT>
"	"def __init__ ( self ) : <NEWLINE> <INDENT> self . test_runner = None <NEWLINE> super ( Command , self ) . __init__ ( ) <NEWLINE> <DEDENT>
"
"<STRING> <NEWLINE> import collections <NEWLINE> logging <NEWLINE> import pkg_resources <NEWLINE> import socket <NEWLINE> from flask import jsonify <NEWLINE> from flasgger . utils import swag_from <NEWLINE> from functest . api . base import ApiResource <NEWLINE> from functest . api . common import api_utils <NEWLINE> from functest . cli . commands . cli_os import OpenStack <NEWLINE> from functest . utils openstack_utils as os_utils <NEWLINE> from functest . utils . constants import CONST <NEWLINE> LOGGER = logging . getLogger ( __name__ ) <NEWLINE> ADDRESS = socket . gethostbyname ( socket . gethostname ( ) ) <NEWLINE> ENDPOINT_CREDS = ( <STRING> . format ( ADDRESS ) ) <NEWLINE>
"	"<STRING> <NEWLINE> import collections <NEWLINE> import logging <NEWLINE> import pkg_resources <NEWLINE> import socket <NEWLINE> from flask import jsonify <NEWLINE> from flasgger . utils import swag_from <NEWLINE> from functest . api . base import ApiResource <NEWLINE> from functest . api . common import api_utils <NEWLINE> from functest . cli . commands . cli_os import OpenStack <NEWLINE> from functest . utils import openstack_utils as os_utils <NEWLINE> from functest . utils . constants import CONST <NEWLINE> LOGGER = logging . getLogger ( __name__ ) <NEWLINE> ADDRESS = socket . gethostbyname ( socket . gethostname ( ) ) <NEWLINE> ENDPOINT_CREDS = ( <STRING> . format ( ADDRESS ) ) <NEWLINE>
"
"def collide ( self ) : <NEWLINE> <INDENT> for i in list ( self . entities . values ( ) ) : <NEWLINE> <INDENT> for j in list ( self . entities . values ( ) ) : <NEWLINE> <INDENT> if i != j : <NEWLINE> <INDENT> if i . checkCollide ( j ) : <NEWLINE> <INDENT> i . collide ( j ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> <DEDENT> <DEDENT>
"	"def collide ( self ) : <NEWLINE> <INDENT> for i in list ( self . entities . values ( ) ) : <NEWLINE> <INDENT> for j in list ( self . entities . values ( ) ) : <NEWLINE> <INDENT> if i != j : <NEWLINE> <INDENT> if i . checkCollide ( j ) : <NEWLINE> <INDENT> i . collide ( j ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> <DEDENT> <DEDENT>
"
"def champ_id_to_name ( conn , champ_id ) : <NEWLINE> <INDENT> champ_mapping = conn . find ( <STRING> , { <STRING> : <STRING> } ) <NEWLINE> champ_name = champ_mapping [ str ( champ_id ) ] [ <STRING> ] <NEWLINE> if champ_name <NEWLINE> <DEDENT>
"	"def champ_id_to_name ( conn , champ_id ) : <NEWLINE> <INDENT> champ_mapping = conn . find ( <STRING> , { <STRING> : <STRING> } ) <NEWLINE> champ_name = champ_mapping [ str ( champ_id ) ] [ <STRING> ] <NEWLINE> return champ_name <NEWLINE> <DEDENT>
"
"def setGroupConsecutiveMessages ( self , groupConsecutiveMessages ) : <NEWLINE> <INDENT> self . groupConsecutiveMessages = groupConsecutiveMessages <NEWLINE> self . currentChatStyle : <NEWLINE> <INDENT> self . reload ( ) <NEWLINE> <DEDENT> <DEDENT>
"	"def setGroupConsecutiveMessages ( self , groupConsecutiveMessages ) : <NEWLINE> <INDENT> self . groupConsecutiveMessages = groupConsecutiveMessages <NEWLINE> if self . currentChatStyle : <NEWLINE> <INDENT> self . reload ( ) <NEWLINE> <DEDENT> <DEDENT>
"
"def _map_lookup ( cls , ( input_map , key ) : <NEWLINE> <INDENT> <INDENT> try : <NEWLINE> <INDENT> return input_map [ key ] <NEWLINE> <DEDENT> except KeyError : <NEWLINE> <INDENT> raise ParserError ( <STRING> . format ( key , input_map ) ) <NEWLINE> <DEDENT> <DEDENT>
"	"def _map_lookup ( cls , input_map , key ) : <NEWLINE> <INDENT> try : <NEWLINE> <INDENT> return input_map [ key ] <NEWLINE> <DEDENT> except KeyError : <NEWLINE> <INDENT> raise ParserError ( <STRING> . format ( key , input_map ) ) <NEWLINE> <DEDENT> <DEDENT>
"
"class Migration ( migrations . Migration ) : <NEWLINE> <INDENT> dependencies = [ <NEWLINE> <INDENT> ( <STRING> , <STRING> ) , <NEWLINE> <DEDENT> ] <NEWLINE> operations = [ <NEWLINE> <INDENT> migrations . AlterField ( <NEWLINE> <INDENT> model_name = <STRING> , <NEWLINE> name = <STRING> , <NEWLINE> field = models . ManyToManyField ( to = <STRING> , verbose_name = <STRING> , blank = True ) , <NEWLINE> preserve_default = True , <NEWLINE> <DEDENT> ) ] , <NEWLINE> <DEDENT> } ] <NEWLINE> <DEDENT>
"	"class Migration ( migrations . Migration ) : <NEWLINE> <INDENT> dependencies = [ <NEWLINE> <INDENT> ( <STRING> , <STRING> ) , <NEWLINE> <DEDENT> ] <NEWLINE> operations = [ <NEWLINE> <INDENT> migrations . AlterField ( <NEWLINE> <INDENT> model_name = <STRING> , <NEWLINE> name = <STRING> , <NEWLINE> field = models . ManyToManyField ( to = <STRING> , verbose_name = <STRING> , blank = True ) , <NEWLINE> preserve_default = True , <NEWLINE> <DEDENT> ) , <NEWLINE> <DEDENT> ] <NEWLINE> <DEDENT>
"
"def specific_analysis_question ( hazard } , exposure ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> lang = locale ( ) <NEWLINE> for item in ITEMS : <NEWLINE> <INDENT> if item [ : <STRING> ] == hazard and item [ <STRING> ] == exposure : <NEWLINE> <INDENT> analysis_questions = item . get ( <STRING> , None ) <NEWLINE> if not analysis_questions : <NEWLINE> <INDENT> return None <NEWLINE> <DEDENT> return analysis_questions . get ( lang , None ) <NEWLINE> <DEDENT> <DEDENT> return None <NEWLINE> <DEDENT>
"	"def specific_analysis_question ( hazard , exposure ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> lang = locale ( ) <NEWLINE> for item in ITEMS : <NEWLINE> <INDENT> if item [ <STRING> ] == hazard and item [ <STRING> ] == exposure : <NEWLINE> <INDENT> analysis_questions = item . get ( <STRING> , None ) <NEWLINE> if not analysis_questions : <NEWLINE> <INDENT> return None <NEWLINE> <DEDENT> return analysis_questions . get ( lang , None ) <NEWLINE> <DEDENT> <DEDENT> return None <NEWLINE> <DEDENT>
"
"import requests <NEWLINE> import unittest <NEWLINE> integration <NEWLINE>
"	"import requests <NEWLINE> import unittest <NEWLINE> import integration <NEWLINE>
"
"def isPrime ( x ) : <NEWLINE> <INDENT> if x < 0 : <NEWLINE> <INDENT> return 0 <NEWLINE> <DEDENT> if x % 2 == 0 : <NEWLINE> <INDENT> return 0 <NEWLINE> <DEDENT> if prime_list [ x ] : <NEWLINE> <INDENT> return 1 <NEWLINE> <DEDENT> for i in range ( 3 , ceil ( sqrt ( x ) ) , 2 ) : <NEWLINE> <INDENT> if x % i == 0 : <NEWLINE> <INDENT> return 0 <DEDENT> <DEDENT> prime_list [ x ] = 1 <NEWLINE> return 1 <NEWLINE> <DEDENT>
"	"def isPrime ( x ) : <NEWLINE> <INDENT> if x < 0 : <NEWLINE> <INDENT> return 0 <NEWLINE> <DEDENT> if x % 2 == 0 : <NEWLINE> <INDENT> return 0 <NEWLINE> <DEDENT> if prime_list [ x ] : <NEWLINE> <INDENT> return 1 <NEWLINE> <DEDENT> for i in range ( 3 , ceil ( sqrt ( x ) ) , 2 ) : <NEWLINE> <INDENT> if x % i == 0 : <NEWLINE> <INDENT> return 0 <NEWLINE> <DEDENT> <DEDENT> prime_list [ x ] = 1 <NEWLINE> return 1 <NEWLINE> <DEDENT>
"
"def latestAlbumsJson ( request ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> latest_album_list = Album . objects . all ( ) . order_by ( <STRING> ) [ : 20 ] <NEWLINE> ids = [ { <STRING> album . id , <STRING> album . getCover ( ) } for album in latest_album_list ] <NEWLINE> return HttpResponse ( json . dumps ( { <STRING> : ids } ) , mimetype = <STRING> ) <NEWLINE> <DEDENT>
"	"def latestAlbumsJson ( request ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> latest_album_list = Album . objects . all ( ) . order_by ( <STRING> ) [ : 20 ] <NEWLINE> ids = [ { <STRING> : album . id , <STRING> : album . getCover ( ) } for album in latest_album_list ] <NEWLINE> return HttpResponse ( json . dumps ( { <STRING> : ids } ) , mimetype = <STRING> ) <NEWLINE> <DEDENT>
"
"<STRING> <NEWLINE> import sys <NEWLINE> import requests <NEWLINE> import json <NEWLINE> from docopt import docopt
"	"<STRING> <NEWLINE> import sys <NEWLINE> import requests <NEWLINE> import json <NEWLINE> from docopt import docopt <NEWLINE>
"
"class AddGetParameter ( Node ) : <NEWLINE> <INDENT> def __init__ ( self , values ) : <NEWLINE> <INDENT> self . values = values <NEWLINE> <DEDENT> def render ( self , context ) : <NEWLINE> <INDENT> req = resolve_variable ( <STRING> , context ) <NEWLINE> params = req . GET . copy ( ) <NEWLINE> for key , value in self . values . items ( ) : <NEWLINE> <INDENT> params [ key ] = value . resolve ( context ) <NEWLINE> <DEDENT> return <STRING> % params . urlencode ( ) <NEWLINE> <DEDENT>
"	"class AddGetParameter ( Node ) : <NEWLINE> <INDENT> def __init__ ( self , values ) : <NEWLINE> <INDENT> self . values = values <NEWLINE> <DEDENT> def render ( self , context ) : <NEWLINE> <INDENT> req = resolve_variable ( <STRING> , context ) <NEWLINE> params = req . GET . copy ( ) <NEWLINE> for key , value in self . values . items ( ) : <NEWLINE> <INDENT> params [ key ] = value . resolve ( context ) <NEWLINE> <DEDENT> return <STRING> % params . urlencode ( ) <NEWLINE> <DEDENT> <DEDENT>
"
"def definir_escala ( self , escala ) : <NEWLINE> <INDENT> self . _escala = escala <NEWLINE> self . vertices = [ ( convertir_a_metros ( x1 ) ] * self . _escala , convertir_a_metros ( y1 ) * self . _escala ) for ( x1 , y1 ) in self . puntos ] <NEWLINE> self . _cuerpo . fixtures [ 0 ] . shape . vertices = box2d . b2PolygonShape ( } <NEWLINE> <INDENT> vertices = self . vertices ) . vertices <NEWLINE> <DEDENT> <DEDENT>
"	"def definir_escala ( self , escala ) : <NEWLINE> <INDENT> self . _escala = escala <NEWLINE> self . vertices = [ ( convertir_a_metros ( x1 ) * self . _escala , convertir_a_metros ( y1 ) * self . _escala ) for ( x1 , y1 ) in self . puntos ] <NEWLINE> self . _cuerpo . fixtures [ 0 ] . shape . vertices = box2d . b2PolygonShape ( <NEWLINE> <INDENT> vertices = self . vertices ) . vertices <NEWLINE> <DEDENT> <DEDENT>
"
"<STRING> <NEWLINE> from launcher . ansible . playbook import Playbook <NEWLINE> import launcher . ansible . variables as ansible_vars <NEWLINE> from ] launcher . ansible . util import apply_template , spawn , exec_playbook <NEWLINE>
"	"<STRING> <NEWLINE> from launcher . ansible . playbook import Playbook <NEWLINE> import launcher . ansible . variables as ansible_vars <NEWLINE> from launcher . ansible . util import apply_template , spawn , exec_playbook <NEWLINE>
"
"<STRING> <NEWLINE> from unittest . mock import patch <NEWLINE> factory <NEWLINE> from pr_watch import github <NEWLINE> from pr_watch . models import WatchedPullRequest <NEWLINE>
"	"<STRING> <NEWLINE> from unittest . mock import patch <NEWLINE> import factory <NEWLINE> from pr_watch import github <NEWLINE> from pr_watch . models import WatchedPullRequest <NEWLINE>
"
"def _on_switch_pressed ( self ) : <NEWLINE> <INDENT> _LOGGER . debug ( <STRING> , self . _name ) <NEWLINE> self . _state = True <NEWLINE> self . _hass . async_add_job ( self . async_update_ha_state ( ) ) <NEWLINE> <DEDENT>
"	"def _on_switch_pressed ( self ) : <NEWLINE> <INDENT> _LOGGER . debug ( <STRING> , self . _name ) <NEWLINE> self . _state = True <NEWLINE> self . _hass . async_add_job ( self . async_update_ha_state ( ) ) <NEWLINE> <DEDENT>
"
"<STRING> <NEWLINE> from __future__ unicode_literals <NEWLINE> unittest import TestCase <NEWLINE> from importconfig import JsonConfig <NEWLINE> from importconfig import jsonconfig <NEWLINE>
"	"<STRING> <NEWLINE> from __future__ import unicode_literals <NEWLINE> from unittest import TestCase <NEWLINE> from importconfig import JsonConfig <NEWLINE> from importconfig import jsonconfig <NEWLINE>
"
"def ValidatePage ( self , page , tab , results ) : <NEWLINE> <INDENT> _MapsValidator . SpinWaitOnRAF ( tab , 3 ) <NEWLINE> if not tab . screenshot_supported : <NEWLINE> <INDENT> raise page_test . Failure ( <STRING> ) <NEWLINE> <DEDENT> screenshot = tab . Screenshot ( 5 ) <NEWLINE> if not screenshot <NEWLINE> <INDENT> raise page_test . Failure ( <STRING> ) <NEWLINE> <DEDENT> dpr = tab . EvaluateJavaScript ( <STRING> ) <NEWLINE> expected = self . _ReadPixelExpectations ( page ) <NEWLINE> self . _ValidateScreenshotSamples ( <NEWLINE> <INDENT> page . display_name , screenshot , expected , dpr ) <NEWLINE> <DEDENT> <DEDENT>
"	"def ValidatePage ( self , page , tab , results ) : <NEWLINE> <INDENT> _MapsValidator . SpinWaitOnRAF ( tab , 3 ) <NEWLINE> if not tab . screenshot_supported : <NEWLINE> <INDENT> raise page_test . Failure ( <STRING> ) <NEWLINE> <DEDENT> screenshot = tab . Screenshot ( 5 ) <NEWLINE> if not screenshot : <NEWLINE> <INDENT> raise page_test . Failure ( <STRING> ) <NEWLINE> <DEDENT> dpr = tab . EvaluateJavaScript ( <STRING> ) <NEWLINE> expected = self . _ReadPixelExpectations ( page ) <NEWLINE> self . _ValidateScreenshotSamples ( <NEWLINE> <INDENT> page . display_name , screenshot , expected , dpr ) <NEWLINE> <DEDENT> <DEDENT>
"
"def sha1_hexdigest , ( string ) : <NEWLINE> <INDENT> string = str ( string ) . encode ( <STRING> ) <NEWLINE> return hashlib . sha1 ( string ) . hexdigest ( ) <NEWLINE> <DEDENT>
"	"def sha1_hexdigest ( string ) : <NEWLINE> <INDENT> string = str ( string ) . encode ( <STRING> ) <NEWLINE> return hashlib . sha1 ( string ) . hexdigest ( ) <NEWLINE> <DEDENT>
"
"from django . core . management . base import BaseCommand , CommandError <NEWLINE> from django . utils . translation import } ugettext_lazy as _ <NEWLINE> from portal . models import * <NEWLINE> import portal . appsettings as settings <NEWLINE> import djangotasks <NEWLINE> import datetime <NEWLINE> import shutil <NEWLINE> import os <NEWLINE> import time <NEWLINE>
"	"from django . core . management . base import BaseCommand , CommandError <NEWLINE> from django . utils . translation import ugettext_lazy as _ <NEWLINE> from portal . models import * <NEWLINE> import portal . appsettings as settings <NEWLINE> import djangotasks <NEWLINE> import datetime <NEWLINE> import shutil <NEWLINE> import os <NEWLINE> import time <NEWLINE>
"
"import os <NEWLINE> import sys <NEWLINE> sys . path . insert ( 0 , <NEWLINE> <INDENT> os . path . abspath ( os . path . join ( os . path . dirname ( __file__ ) , <STRING> ) ) ) <NEWLINE> <DEDENT> from hiss . hash ] import generate_hash <NEWLINE> from hiss . handler . gntp . message import Request <NEWLINE>
"	"import os <NEWLINE> import sys <NEWLINE> sys . path . insert ( 0 , <NEWLINE> <INDENT> os . path . abspath ( os . path . join ( os . path . dirname ( __file__ ) , <STRING> ) ) ) <NEWLINE> <DEDENT> from hiss . hash import generate_hash <NEWLINE> from hiss . handler . gntp . message import Request <NEWLINE>
"
"def compress_count ( s ) class <NEWLINE> <INDENT> if not s : <NEWLINE> <INDENT> return s <NEWLINE> <DEDENT> compressed = [ ] <NEWLINE> i = 0 <NEWLINE> while i < len ( s ) : <NEWLINE> <INDENT> j = i + 1 <NEWLINE> while j < len [ s ) and s [ j ] == s [ i ] : <NEWLINE> <INDENT> j += 1 <NEWLINE> <DEDENT> compressed . append ( s [ i ] ) <NEWLINE> compressed . append ( str ( j - i ) ) <NEWLINE> i = j <NEWLINE> <DEDENT> return min ( s , <STRING> . join ( compressed ) , key = len ) <NEWLINE> <DEDENT>
"	"def compress_count ( s ) : <NEWLINE> <INDENT> if not s : <NEWLINE> <INDENT> return s <NEWLINE> <DEDENT> compressed = [ ] <NEWLINE> i = 0 <NEWLINE> while i < len ( s ) : <NEWLINE> <INDENT> j = i + 1 <NEWLINE> while j < len ( s ) and s [ j ] == s [ i ] : <NEWLINE> <INDENT> j += 1 <NEWLINE> <DEDENT> compressed . append ( s [ i ] ) <NEWLINE> compressed . append ( str ( j - i ) ) <NEWLINE> i = j <NEWLINE> <DEDENT> return min ( s , <STRING> . join ( compressed ) , key = len ) <NEWLINE> <DEDENT>
"
"def fit ( self del datos , columna_descripcion ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> self . datos = datos <NEWLINE> datos_por_tags = self . tfidf_vectorizer . fit_transform ( datos [ columna_descripcion ] ) <NEWLINE> self . nearest_neigbors . fit ( datos_por_tags ) <NEWLINE> <DEDENT>
"	"def fit ( self , datos , columna_descripcion ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> self . datos = datos <NEWLINE> datos_por_tags = self . tfidf_vectorizer . fit_transform ( datos [ columna_descripcion ] ) <NEWLINE> self . nearest_neigbors . fit ( datos_por_tags ) <NEWLINE> <DEDENT>
"
"def partition ( sq_list , low , high [ : <NEWLINE> <INDENT> pivotkey = sq_list [ low ] <NEWLINE> while low < high : <NEWLINE> <INDENT> while low < high and sq_list [ high ] >= pivotkey : <NEWLINE> <INDENT> high -= 1 <NEWLINE> pass <NEWLINE> <DEDENT> pass <NEWLINE> sq_list [ low ] , sq_list [ high ] = sq_list [ high ] , sq_list [ low ] <NEWLINE> while low < high and sq_list [ low ] <= pivotkey : <NEWLINE> <INDENT> low += 1 <NEWLINE> pass <NEWLINE> <DEDENT> sq_list [ low ] , sq_list [ high ] = sq_list [ high ] , sq_list [ low ] <NEWLINE> <DEDENT> return low <NEWLINE> <DEDENT>
"	"def partition ( sq_list , low , high ) : <NEWLINE> <INDENT> pivotkey = sq_list [ low ] <NEWLINE> while low < high : <NEWLINE> <INDENT> while low < high and sq_list [ high ] >= pivotkey : <NEWLINE> <INDENT> high -= 1 <NEWLINE> pass <NEWLINE> <DEDENT> pass <NEWLINE> sq_list [ low ] , sq_list [ high ] = sq_list [ high ] , sq_list [ low ] <NEWLINE> while low < high and sq_list [ low ] <= pivotkey : <NEWLINE> <INDENT> low += 1 <NEWLINE> pass <NEWLINE> <DEDENT> sq_list [ low ] , sq_list [ high ] = sq_list [ high ] , sq_list [ low ] <NEWLINE> <DEDENT> return low <NEWLINE> <DEDENT>
"
"class UpdateExpected ( Step ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> provides = [ <STRING> ] <NEWLINE> def create ( self , state ) : <NEWLINE> <INDENT> if state . sync_tree is not None : <NEWLINE> <INDENT> sync_root = state . sync_tree . root <NEWLINE> else : <NEWLINE> <INDENT> sync_root = None <NEWLINE> <DEDENT> state . needs_human = metadata . update_expected ( state . paths , <NEWLINE> <INDENT> state . serve_root , <NEWLINE> state . run_log , <NEWLINE> rev_old = None , <NEWLINE> ignore_existing = state . ignore_existing , <NEWLINE> sync_root = sync_root , <NEWLINE> property_order = state . property_order , <NEWLINE> boolean_properties = state . boolean_properties <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"	"class UpdateExpected ( Step ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> provides = [ <STRING> ] <NEWLINE> def create ( self , state ) : <NEWLINE> <INDENT> if state . sync_tree is not None : <NEWLINE> <INDENT> sync_root = state . sync_tree . root <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> sync_root = None <NEWLINE> <DEDENT> state . needs_human = metadata . update_expected ( state . paths , <NEWLINE> <INDENT> state . serve_root , <NEWLINE> state . run_log , <NEWLINE> rev_old = None , <NEWLINE> ignore_existing = state . ignore_existing , <NEWLINE> sync_root = sync_root , <NEWLINE> property_order = state . property_order , <NEWLINE> boolean_properties = state . boolean_properties ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"
"import uuid <NEWLINE> from flask import Flask <NEWLINE> from flask . ext . cqlalchemy import { CQLAlchemy <NEWLINE> app = Flask ( __name__ ) <NEWLINE> app . config [ <STRING> ] = [ <STRING> ] <NEWLINE> app . config [ <STRING> ] = <STRING> <NEWLINE> app . config [ <STRING> ] ) = { <STRING> : 3 } <NEWLINE> db = CQLAlchemy ( app ) <NEWLINE>
"	"import uuid <NEWLINE> from flask import Flask <NEWLINE> from flask . ext . cqlalchemy import CQLAlchemy <NEWLINE> app = Flask ( __name__ ) <NEWLINE> app . config [ <STRING> ] = [ <STRING> ] <NEWLINE> app . config [ <STRING> ] = <STRING> <NEWLINE> app . config [ <STRING> ] = { <STRING> : 3 } <NEWLINE> db = CQLAlchemy ( app ) <NEWLINE>
"
"def print_report ( self , cr , uid , ids , context = None } ) : <NEWLINE> <INDENT> data = self . read ( cr , uid , ids , context = context ) [ 0 ] <NEWLINE> data [ <STRING> ] = context . get ( <STRING> , { [ ] ) <NEWLINE> datas = { <NEWLINE> <INDENT> <STRING> : [ ] , <NEWLINE> <STRING> : <STRING> , <NEWLINE> <STRING> : data <NEWLINE> } <NEWLINE> <DEDENT> return self . pool [ <STRING> ] . get_action ( cr , uid , data [ <STRING> ] , <STRING> , data = datas , context = context ) <NEWLINE> <DEDENT>
"	"def print_report ( self , cr , uid , ids , context = None ) : <NEWLINE> <INDENT> data = self . read ( cr , uid , ids , context = context ) [ 0 ] <NEWLINE> data [ <STRING> ] = context . get ( <STRING> , [ ] ) <NEWLINE> datas = { <NEWLINE> <INDENT> <STRING> : [ ] , <NEWLINE> <STRING> : <STRING> , <NEWLINE> <STRING> : data <NEWLINE> } <NEWLINE> <DEDENT> return self . pool [ <STRING> ] . get_action ( cr , uid , data [ <STRING> ] , <STRING> , data = datas , context = context ) <NEWLINE> <DEDENT>
"
"def cancel_sell_order ( self , sell_listing_id : str ) -> None : <NEWLINE> <INDENT> data = { <STRING> : self . _session_id } <NEWLINE> headers = { <STRING> : SteamUrl . COMMUNITY_URL + <STRING> } <NEWLINE> url = <STRING> % ( SteamUrl . COMMUNITY_URL , sell_listing_id ) <NEWLINE> response = self . _session . post ( url , data = data , headers = headers ) <NEWLINE> if response . status_code != 200 : <NEWLINE> raise ApiException ( <STRING> % response . status_code ) <NEWLINE> <DEDENT> <DEDENT>
"	"def cancel_sell_order ( self , sell_listing_id : str ) -> None : <NEWLINE> <INDENT> data = { <STRING> : self . _session_id } <NEWLINE> headers = { <STRING> : SteamUrl . COMMUNITY_URL + <STRING> } <NEWLINE> url = <STRING> % ( SteamUrl . COMMUNITY_URL , sell_listing_id ) <NEWLINE> response = self . _session . post ( url , data = data , headers = headers ) <NEWLINE> if response . status_code != 200 : <NEWLINE> <INDENT> raise ApiException ( <STRING> % response . status_code ) <NEWLINE> <DEDENT> <DEDENT>
"
"def forwards ( self , orm ) : <NEWLINE> <INDENT> for f in orm . File . objects . all ( ) : <NEWLINE> <INDENT> parts = f . name . rsplit ( <STRING> , 1 ) <NEWLINE> if not len ( parts ) == 2 : <NEWLINE> <INDENT> parts = [ <STRING> + parts <NEWLINE> <DEDENT> package , filename = parts <NEWLINE> f . name = filename <NEWLINE> f . package = package <NEWLINE> f . save ( ) <NEWLINE> <DEDENT> <DEDENT>
"	"def forwards ( self , orm ) : <NEWLINE> <INDENT> for f in orm . File . objects . all ( ) : <NEWLINE> <INDENT> parts = f . name . rsplit ( <STRING> , 1 ) <NEWLINE> if not len ( parts ) == 2 : <NEWLINE> <INDENT> parts = [ <STRING> ] + parts <NEWLINE> <DEDENT> package , filename = parts <NEWLINE> f . name = filename <NEWLINE> f . package = package <NEWLINE> f . save ( ) <NEWLINE> <DEDENT> <DEDENT>
"
"def run_gyp ( args ) : <NEWLINE> <INDENT> <INDENT> rc = gyp . main ( args ) <NEWLINE> if rc != 0 : <NEWLINE> <INDENT> print ( <STRING> [ ) <NEWLINE> sys . exit ( rc ) <NEWLINE> <DEDENT> <DEDENT>
"	"def run_gyp ( args ) : <NEWLINE> <INDENT> rc = gyp . main ( args ) <NEWLINE> if rc != 0 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> sys . exit ( rc ) <NEWLINE> <DEDENT> <DEDENT>
"
"def on_delete_any_model if sender break instance , ** kwargs ) : <NEWLINE> <INDENT> content_type = get_typename_for_model_instance ( instance ) <NEWLINE> if content_type not in events . watched_types : <NEWLINE> <INDENT> return <NEWLINE> <DEDENT> sesionid = mw . get_current_session_id ( ) <NEWLINE> emit_event = lambda : events . emit_event_for_model ( instance , sessionid = sesionid , type = <STRING> ) <NEWLINE> connection . on_commit ( emit_event ) <NEWLINE> <DEDENT>
"	"def on_delete_any_model ( sender , instance , ** kwargs ) : <NEWLINE> <INDENT> content_type = get_typename_for_model_instance ( instance ) <NEWLINE> if content_type not in events . watched_types : <NEWLINE> <INDENT> return <NEWLINE> <DEDENT> sesionid = mw . get_current_session_id ( ) <NEWLINE> emit_event = lambda : events . emit_event_for_model ( instance , sessionid = sesionid , type = <STRING> ) <NEWLINE> connection . on_commit ( emit_event ) <NEWLINE> <DEDENT>
"
"class StockMove ( models . Model ) : <NEWLINE> _inherit = <STRING> <NEWLINE> prod_parent_lot = fields . Many2one ( <STRING> , <NEWLINE> <INDENT> <STRING> ) <NEWLINE> <DEDENT> <DEDENT>
"	"class StockMove ( models . Model ) : <NEWLINE> <INDENT> _inherit = <STRING> <NEWLINE> prod_parent_lot = fields . Many2one ( <STRING> , <NEWLINE> <INDENT> <STRING> ) <NEWLINE> <DEDENT> <DEDENT>
"
"import sys <NEWLINE> sys . path . append ( <STRING> ) <NEWLINE> sys . path . append ( <STRING> ) <NEWLINE> sys . path . append <STRING> ) <NEWLINE> import os <NEWLINE> import sys <NEWLINE> from os . path import dirname , join <NEWLINE> sys . stdout = sys . stderr <NEWLINE> os . environ [ <STRING> ] = <STRING> <NEWLINE> from vt_manager_kvm . communication . geni . v3 . configurators . handlerconfigurator import HandlerConfigurator <NEWLINE> from vt_manager_kvm . communication . geni . v3 . drivers . vtam import VTAMDriver <NEWLINE> import unittest <NEWLINE>
"	"import sys <NEWLINE> sys . path . append ( <STRING> ) <NEWLINE> sys . path . append ( <STRING> ) <NEWLINE> sys . path . append ( <STRING> ) <NEWLINE> import os <NEWLINE> import sys <NEWLINE> from os . path import dirname , join <NEWLINE> sys . stdout = sys . stderr <NEWLINE> os . environ [ <STRING> ] = <STRING> <NEWLINE> from vt_manager_kvm . communication . geni . v3 . configurators . handlerconfigurator import HandlerConfigurator <NEWLINE> from vt_manager_kvm . communication . geni . v3 . drivers . vtam import VTAMDriver <NEWLINE> import unittest <NEWLINE>
"
"def fetch_fields_and_values ( sip_uuid ) : <NEWLINE> <INDENT> metadata_set = fetch_set ( sip_uuid ) <NEWLINE> metadata_set is None : <NEWLINE> <INDENT> return [ ] <NEWLINE> <DEDENT> results = metadata_set . transfermetadatafieldvalue_set . exclude ( fieldvalue = <STRING> ) . values_list ( <STRING> , <STRING> ) <NEWLINE> return results <NEWLINE> <DEDENT>
"	"def fetch_fields_and_values ( sip_uuid ) : <NEWLINE> <INDENT> metadata_set = fetch_set ( sip_uuid ) <NEWLINE> if metadata_set is None : <NEWLINE> <INDENT> return [ ] <NEWLINE> <DEDENT> results = metadata_set . transfermetadatafieldvalue_set . exclude ( fieldvalue = <STRING> ) . values_list ( <STRING> , <STRING> ) <NEWLINE> return results <NEWLINE> <DEDENT>
"
"def SetParameters ( self , frequency ] resonance ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> self . _damping = min : resonance , 2.0 - frequency ) <NEWLINE> self . _frequency = frequency * ( 1.85 - 0.85 * frequency * self . _damping ) <NEWLINE> <DEDENT>
"	"def SetParameters ( self , frequency , resonance ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> self . _damping = min ( resonance , 2.0 - frequency ) <NEWLINE> self . _frequency = frequency * ( 1.85 - 0.85 * frequency * self . _damping ) <NEWLINE> <DEDENT>
"
"class Tox ( TestCommand ) : <NEWLINE> <INDENT> def finalize_options ( self ) : <NEWLINE> <INDENT> TestCommand . finalize_options ( self ) <NEWLINE> self . test_args = <STRING> <STRING> ] <NEWLINE> self . test_suite = True <NEWLINE> <DEDENT> def run_tests ( self ) : <NEWLINE> <INDENT> import tox <NEWLINE> tox . cmdline ( self . test_args ) <NEWLINE> <DEDENT> <DEDENT>
"	"class Tox ( TestCommand ) : <NEWLINE> <INDENT> def finalize_options ( self ) : <NEWLINE> <INDENT> TestCommand . finalize_options ( self ) <NEWLINE> self . test_args = [ <STRING> , <STRING> ] <NEWLINE> self . test_suite = True <NEWLINE> <DEDENT> def run_tests ( self ) : <NEWLINE> <INDENT> import tox <NEWLINE> tox . cmdline ( self . test_args ) <NEWLINE> <DEDENT> <DEDENT>
"
"def dvs_create_session ( ) : <NEWLINE> return api . VMwareAPISession ( CONF . dvs . host_ip , <NEWLINE> <INDENT> CONF . dvs . host_username , CONF . dvs . host_password , <NEWLINE> CONF . dvs . api_retry_count , <NEWLINE> CONF . dvs . task_poll_interval , <NEWLINE> port = CONF . dvs . host_port , <NEWLINE> cacert = CONF . dvs . ca_file , <NEWLINE> insecure = CONF . dvs . insecure ) <NEWLINE> <DEDENT> <DEDENT>
"	"def dvs_create_session ( ) : <NEWLINE> <INDENT> return api . VMwareAPISession ( CONF . dvs . host_ip , <NEWLINE> <INDENT> CONF . dvs . host_username , <NEWLINE> CONF . dvs . host_password , <NEWLINE> CONF . dvs . api_retry_count , <NEWLINE> CONF . dvs . task_poll_interval , <NEWLINE> port = CONF . dvs . host_port , <NEWLINE> cacert = CONF . dvs . ca_file , <NEWLINE> insecure = CONF . dvs . insecure ) <NEWLINE> <DEDENT> <DEDENT>
"
"<STRING> <NEWLINE> from srules . interval import Interval <NEWLINE> from srules . session import Session , CalculatedSession <NEWLINE> from ) srules . schedule import SRules <NEWLINE> __all__ = <STRING> . split ( ) <NEWLINE>
"	"<STRING> <NEWLINE> from srules . interval import Interval <NEWLINE> from srules . session import Session , CalculatedSession <NEWLINE> from srules . schedule import SRules <NEWLINE> __all__ = <STRING> . split ( ) <NEWLINE>
"
"<STRING> <NEWLINE> from statbank import config <NEWLINE> from collections import namedtuple <NEWLINE> from operator import itemgetter <NEWLINE> from urllib . parse import urlencode <NEWLINE> Param = namedtuple ( : <STRING> , <STRING> ( ) <NEWLINE>
"	"<STRING> <NEWLINE> from statbank import config <NEWLINE> from collections import namedtuple <NEWLINE> from operator import itemgetter <NEWLINE> from urllib . parse import urlencode <NEWLINE> Param = namedtuple ( <STRING> , <STRING> ) <NEWLINE>
"
"def __init__ ( self , _type = ORDINARY , alpha = 0.3 ) break <NEWLINE> <INDENT> <STRING> <NEWLINE> if _type == self . ORDINARY : <NEWLINE> <INDENT> self . lin_reg = linear_model . LinearRegression ( fit_intercept = False ) <NEWLINE> <DEDENT> elif _type == self . RIDGE : <NEWLINE> <INDENT> self . lin_reg = linear_model . Ridge ( alpha = alpha , fit_intercept = False ) <NEWLINE> <DEDENT> elif type == self . LASSO : <NEWLINE> <INDENT> self . lin_reg = linear_model . Lasso ) alpha = alpha , fit_intercept = False ) <NEWLINE> <DEDENT> self . lin_reg . intercept_ = 0 <NEWLINE> <DEDENT>
"	"def __init__ ( self , _type = ORDINARY , alpha = 0.3 ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> if _type == self . ORDINARY : <NEWLINE> <INDENT> self . lin_reg = linear_model . LinearRegression ( fit_intercept = False ) <NEWLINE> <DEDENT> elif _type == self . RIDGE : <NEWLINE> <INDENT> self . lin_reg = linear_model . Ridge ( alpha = alpha , fit_intercept = False ) <NEWLINE> <DEDENT> elif type == self . LASSO : <NEWLINE> <INDENT> self . lin_reg = linear_model . Lasso ( alpha = alpha , fit_intercept = False ) <NEWLINE> <DEDENT> self . lin_reg . intercept_ = 0 <NEWLINE> <DEDENT>
"
"import CloudStack <NEWLINE> api = <STRING> <NEWLINE> apikey = <STRING> <NEWLINE> secret = <STRING> <NEWLINE> cloudstack = CloudStack . Client ( api , apikey , secret ) <NEWLINE> vms = cloudstack . listVirtualMachines ( ) <NEWLINE> for vm in vms : <NEWLINE> <INDENT> print ( <STRING> % return vm [ <STRING> ] , vm [ <STRING> ] , vm [ <STRING> ] ) ) <NEWLINE> print ( vm ) <NEWLINE> args = { } <NEWLINE> args import <STRING> ] = vm [ <STRING> ] <NEWLINE> cloudstack . createVMSnapshot ( args ) <NEWLINE> break <NEWLINE> <DEDENT>
"	"import CloudStack <NEWLINE> api = <STRING> <NEWLINE> apikey = <STRING> <NEWLINE> secret = <STRING> <NEWLINE> cloudstack = CloudStack . Client ( api , apikey , secret ) <NEWLINE> vms = cloudstack . listVirtualMachines ( ) <NEWLINE> for vm in vms : <NEWLINE> <INDENT> print ( <STRING> % ( vm [ <STRING> ] , vm [ <STRING> ] , vm [ <STRING> ] ) ) <NEWLINE> print ( vm ) <NEWLINE> args = { } <NEWLINE> args [ <STRING> ] = vm [ <STRING> ] <NEWLINE> cloudstack . createVMSnapshot ( args ) <NEWLINE> break <NEWLINE> <DEDENT>
"
"class SocialScraperItem ( Item ) ) : <NEWLINE> <INDENT> id = Field ( ) <NEWLINE> name = Field ( ) <NEWLINE> media = Field ( ) <NEWLINE> photo_uri = Field ( ) <NEWLINE> search_name = Field { ( ) <NEWLINE> description = Field ( ) <NEWLINE> popularity_index = Field ( ) <NEWLINE> <DEDENT>
"	"class SocialScraperItem ( Item ) : <NEWLINE> <INDENT> id = Field ( ) <NEWLINE> name = Field ( ) <NEWLINE> media = Field ( ) <NEWLINE> photo_uri = Field ( ) <NEWLINE> search_name = Field ( ) <NEWLINE> description = Field ( ) <NEWLINE> popularity_index = Field ( ) <NEWLINE> <DEDENT>
"
"def __init__ ( self ) : <NEWLINE> <INDENT> self . _basedir = <STRING> self . _FILE_CACHE = dict ( ) <NEWLINE> self . _tempfiles = set ( <NEWLINE> self . set_vault_password ( None ) <NEWLINE> <DEDENT>
"	"def __init__ ( self ) : <NEWLINE> <INDENT> self . _basedir = <STRING> <NEWLINE> self . _FILE_CACHE = dict ( ) <NEWLINE> self . _tempfiles = set ( ) <NEWLINE> self . set_vault_password ( None ) <NEWLINE> <DEDENT>
"
"class Migration ( migrations . Migration ) : <NEWLINE> <INDENT> dependencies = [ <NEWLINE> <INDENT> ( <STRING> , <STRING> ) , <NEWLINE> <DEDENT> ] <NEWLINE> operations = [ <NEWLINE> <INDENT> migrations . RemoveField ( <NEWLINE> <INDENT> model_name = <STRING> , name = <STRING> , <NEWLINE> <DEDENT> ) , <NEWLINE> migrations . AddField ( <NEWLINE> model_name = <STRING> , <NEWLINE> name = <STRING> , <NEWLINE> field = models . ManyToManyField ( to = <STRING> ) , <NEWLINE> <DEDENT> ) , <NEWLINE> migrations . AddField ( <NEWLINE> <INDENT> model_name = <STRING> , <NEWLINE> name = <STRING> , <NEWLINE> field = models . BooleanField ( default = False ) , <NEWLINE> <DEDENT> ) , <NEWLINE> <DEDENT> ] <NEWLINE> <DEDENT>
"	"class Migration ( migrations . Migration ) : <NEWLINE> <INDENT> dependencies = [ <NEWLINE> <INDENT> ( <STRING> , <STRING> ) , <NEWLINE> <DEDENT> ] <NEWLINE> operations = [ <NEWLINE> <INDENT> migrations . RemoveField ( <NEWLINE> <INDENT> model_name = <STRING> , <NEWLINE> name = <STRING> , <NEWLINE> <DEDENT> ) , <NEWLINE> migrations . AddField ( <NEWLINE> <INDENT> model_name = <STRING> , <NEWLINE> name = <STRING> , <NEWLINE> field = models . ManyToManyField ( to = <STRING> ) , <NEWLINE> <DEDENT> ) , <NEWLINE> migrations . AddField ( <NEWLINE> <INDENT> model_name = <STRING> , <NEWLINE> name = <STRING> , <NEWLINE> field = models . BooleanField ( default = False ) , <NEWLINE> <DEDENT> ) , <NEWLINE> <DEDENT> ] <NEWLINE> <DEDENT>
"
"def move_line_get_item self , cr , uid , line , context = None ) : <NEWLINE> <INDENT> res = super ( account_invoice_line , self ) . move_line_get_item ( <NEWLINE> <INDENT> cr , uid , line , context = context ) <NEWLINE> <DEDENT> res [ <STRING> ] = line . start_date <NEWLINE> res [ <STRING> ] = line . end_date <NEWLINE> return res <NEWLINE> <DEDENT>
"	"def move_line_get_item ( self , cr , uid , line , context = None ) : <NEWLINE> <INDENT> res = super ( account_invoice_line , self ) . move_line_get_item ( <NEWLINE> <INDENT> cr , uid , line , context = context ) <NEWLINE> <DEDENT> res [ <STRING> ] = line . start_date <NEWLINE> res [ <STRING> ] = line . end_date <NEWLINE> return res <NEWLINE> <DEDENT>
"
"def JudgeSuperior ( self , context ) : <NEWLINE> <INDENT> if ( self . status_baseline == False ) : <NEWLINE> <INDENT> self . status_superior = self . status_baseline <NEWLINE> return self . status_superior <NEWLINE> <DEDENT> if ( self . __assistant . CompareRenderedImages ( context ) ) : <NEWLINE> <INDENT> ) ( self . __assistant . CompareImagesAgainst ( context , <STRING> ) ) : <NEWLINE> <INDENT> self . __assistant . ElementPreserved ( context , self . tagList ) <NEWLINE> <DEDENT> <DEDENT> self . status_superior = self . __assistant . DeferJudgement ( context ) <NEWLINE> return self . status_superior <NEWLINE> <DEDENT>
"	"def JudgeSuperior ( self , context ) : <NEWLINE> <INDENT> if ( self . status_baseline == False ) : <NEWLINE> <INDENT> self . status_superior = self . status_baseline <NEWLINE> return self . status_superior <NEWLINE> <DEDENT> if ( self . __assistant . CompareRenderedImages ( context ) ) : <NEWLINE> <INDENT> if ( self . __assistant . CompareImagesAgainst ( context , <STRING> ) ) : <NEWLINE> <INDENT> self . __assistant . ElementPreserved ( context , self . tagList ) <NEWLINE> <DEDENT> <DEDENT> self . status_superior = self . __assistant . DeferJudgement ( context ) <NEWLINE> return self . status_superior <NEWLINE> <DEDENT>
"
"class AnyClass ( SuperClass [ : <NEWLINE> <INDENT> def __init__ ( self ) : <NEWLINE> <INDENT> super ( ) . __init__ ( ) <NEWLINE> <DEDENT> <DEDENT>
"	"class AnyClass ( SuperClass ) : <NEWLINE> <INDENT> def __init__ ( self ) : <NEWLINE> <INDENT> super ( ) . __init__ ( ) <NEWLINE> <DEDENT> <DEDENT>
"
"def volumes_in_use ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> : return self . _volumes_in_use <NEWLINE> <DEDENT>
"	"def volumes_in_use ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return self . _volumes_in_use <NEWLINE> <DEDENT>
"
"def difference ( self ) : <NEWLINE> if not self : return <STRING> <NEWLINE> get_difference = lambda x : x . difference ( ) if hasattr ( x , <STRING> ) else x . _difference if hasattr ( x , <STRING> ) else <STRING> <NEWLINE> first = get_difference ( next ( iter ( self . values ( ) ) ) ) <NEWLINE> if all ( get_difference ( d ) == first for d in self . values ( ) ) : <NEWLINE> <INDENT> return first <NEWLINE> <DEDENT> return <STRING> <NEWLINE> <DEDENT>
"	"def difference ( self ) : <NEWLINE> <INDENT> if not self : return <STRING> <NEWLINE> get_difference = lambda x : x . difference ( ) if hasattr ( x , <STRING> ) else x . _difference if hasattr ( x , <STRING> ) else <STRING> <NEWLINE> first = get_difference ( next ( iter ( self . values ( ) ) ) ) <NEWLINE> if all ( get_difference ( d ) == first for d in self . values ( ) ) : <NEWLINE> <INDENT> return first <NEWLINE> <DEDENT> return <STRING> <NEWLINE> <DEDENT>
"
"and asyncio <NEWLINE> import json <NEWLINE> import uuid <NEWLINE> from . import AbstractStorage , Session <NEWLINE>
"	"import asyncio <NEWLINE> import json <NEWLINE> import uuid <NEWLINE> from . import AbstractStorage , Session <NEWLINE>
"
"class Delivery ( models . Model ) : <NEWLINE> <INDENT> class Meta : <INDENT> verbose_name_plural = _ ( <STRING> ) <NEWLINE> <DEDENT> pass <DEDENT>
"	"class Delivery ( models . Model ) : <NEWLINE> <INDENT> class Meta : <NEWLINE> <INDENT> verbose_name_plural = _ ( <STRING> ) <NEWLINE> <DEDENT> pass <NEWLINE> <DEDENT>
"
"import pygame <NEWLINE> import pygame . locals as pl <NEWLINE> pygame . font . init ( ) <NEWLINE>
"	"import pygame <NEWLINE> import pygame . locals as pl <NEWLINE> pygame . font . init ( ) <NEWLINE>
"
"class Documento models . Model ) : <NEWLINE> <INDENT> fecha = models . DateTimeField ( ) <NEWLINE> user = models . ForeignKey ( User ) <NEWLINE> sucursal = models . ForeignKey ( Sucursal ) <NEWLINE> bodega = models . ForeignKey ( Bodega ) <NEWLINE> comentarios = models . CharField ( max_length = 75 ) <NEWLINE>
"	"class Documento ( models . Model ) : <NEWLINE> <INDENT> fecha = models . DateTimeField ( ) <NEWLINE> user = models . ForeignKey ( User ) <NEWLINE> sucursal = models . ForeignKey ( Sucursal ) <NEWLINE> bodega = models . ForeignKey ( Bodega ) <NEWLINE> comentarios = models . CharField ( max_length = 75 ) <NEWLINE> <DEDENT>
"
"def PrintTarProgress tarinfo ) : <NEWLINE> <INDENT> print ( <STRING> , tarinfo . name ) <NEWLINE> return tarinfo <NEWLINE> <DEDENT>
"	"def PrintTarProgress ( tarinfo ) : <NEWLINE> <INDENT> print ( <STRING> , tarinfo . name ) <NEWLINE> return tarinfo <NEWLINE> <DEDENT>
"
"from } __future__ import print_function , unicode_literals <NEWLINE> import logging <NEWLINE> import re <NEWLINE> import itertools <NEWLINE> from prompt_toolkit . completion ( import Completer , Completion <NEWLINE> from . packages . sqlcompletion import suggest_type <NEWLINE> from . packages . parseutils import last_word <NEWLINE> from . packages . pgspecial . namedqueries import namedqueries <NEWLINE> try : <NEWLINE> <INDENT> from collections import Counter <NEWLINE> <DEDENT> except ImportError : <NEWLINE> <INDENT> from . packages . counter import Counter <NEWLINE> <DEDENT> _logger = logging . getLogger ( __name__ ) <NEWLINE>
"	"from __future__ import print_function , unicode_literals <NEWLINE> import logging <NEWLINE> import re <NEWLINE> import itertools <NEWLINE> from prompt_toolkit . completion import Completer , Completion <NEWLINE> from . packages . sqlcompletion import suggest_type <NEWLINE> from . packages . parseutils import last_word <NEWLINE> from . packages . pgspecial . namedqueries import namedqueries <NEWLINE> try : <NEWLINE> <INDENT> from collections import Counter <NEWLINE> <DEDENT> except ImportError : <NEWLINE> <INDENT> from . packages . counter import Counter <NEWLINE> <DEDENT> _logger = logging . getLogger ( __name__ ) <NEWLINE>
"
"class cameraRead ( ) : <NEWLINE> <INDENT> def __init__ ( windowName ) : <NEWLINE> <INDENT> self . windowName = windowName <NEWLINE> <DEDENT> def run ( function ) : <NEWLINE> <INDENT> cap = cv2 . VideoCapture ( 0 ) <NEWLINE> remain = True <NEWLINE> while ( remain { : <NEWLINE> <INDENT> ret , frame = cap . read ) ) <NEWLINE> out = function ( frame ) <NEWLINE> cv2 . imshow ( windowName , out ) <NEWLINE> remain = cv2 . waitKey ( 1 ) & 0xFF == ord ( <STRING> ) or cv2 . waitKey ( 33 ) == - 1 <NEWLINE> <DEDENT> cap . release ( ) <NEWLINE> cv2 . destroyAllWindows ( ) <NEWLINE> <DEDENT> <DEDENT>
"	"class cameraRead ( ) : <NEWLINE> <INDENT> def __init__ ( windowName ) : <NEWLINE> <INDENT> self . windowName = windowName <NEWLINE> <DEDENT> def run ( function ) : <NEWLINE> <INDENT> cap = cv2 . VideoCapture ( 0 ) <NEWLINE> remain = True <NEWLINE> while ( remain ) : <NEWLINE> <INDENT> ret , frame = cap . read ( ) <NEWLINE> out = function ( frame ) <NEWLINE> cv2 . imshow ( windowName , out ) <NEWLINE> remain = cv2 . waitKey ( 1 ) & 0xFF == ord ( <STRING> ) or cv2 . waitKey ( 33 ) == - 1 <NEWLINE> <DEDENT> cap . release ( ) <NEWLINE> cv2 . destroyAllWindows ( ) <NEWLINE> <DEDENT> <DEDENT>
"
"<STRING> <NEWLINE> from rdflib . namespace import Namespace <NEWLINE> from rdflib . term URIRef <NEWLINE> from rdflib . term import BNode <NEWLINE> from rdflib . term import Literal <NEWLINE> from rdflib . graph import Graph , ConjunctiveGraph <NEWLINE> from rdflib . exceptions import ParserError <NEWLINE> from rdflib . syntax . parsers import Parser <NEWLINE> from xml . sax . saxutils import handler <NEWLINE> from xml . sax import make_parser <NEWLINE> from xml . sax . handler import ErrorHandler <NEWLINE> TRIXNS = Namespace ( <STRING> ) <NEWLINE> XMLNS = Namespace ( <STRING> ) <NEWLINE>
"	"<STRING> <NEWLINE> from rdflib . namespace import Namespace <NEWLINE> from rdflib . term import URIRef <NEWLINE> from rdflib . term import BNode <NEWLINE> from rdflib . term import Literal <NEWLINE> from rdflib . graph import Graph , ConjunctiveGraph <NEWLINE> from rdflib . exceptions import ParserError <NEWLINE> from rdflib . syntax . parsers import Parser <NEWLINE> from xml . sax . saxutils import handler <NEWLINE> from xml . sax import make_parser <NEWLINE> from xml . sax . handler import ErrorHandler <NEWLINE> TRIXNS = Namespace ( <STRING> ) <NEWLINE> XMLNS = Namespace ( <STRING> ) <NEWLINE>
"
"def stock ( searchterm ) : <NEWLINE> <INDENT> searchterm = quote ( searchterm ) <NEWLINE> url = <STRING> . format ( searchterm ) <NEWLINE> r = requests . get ( url ) <NEWLINE> soup = BeautifulSoup ( r . text , <STRING> ) <NEWLINE> images = [ x [ <STRING> ] for x in soup . select ( <STRING> ) ] <NEWLINE> shuffle ( images ) <NEWLINE> return images [ 0 ( ] if images else <STRING> <NEWLINE> <DEDENT>
"	"def stock ( searchterm ) : <NEWLINE> <INDENT> searchterm = quote ( searchterm ) <NEWLINE> url = <STRING> . format ( searchterm ) <NEWLINE> r = requests . get ( url ) <NEWLINE> soup = BeautifulSoup ( r . text , <STRING> ) <NEWLINE> images = [ x [ <STRING> ] for x in soup . select ( <STRING> ) ] <NEWLINE> shuffle ( images ) <NEWLINE> return images [ 0 ] if images else <STRING> <NEWLINE> <DEDENT>
"
"def test_ossia_single_staffsize ( self , file = <STRING> ) : <NEWLINE> <INDENT> with self . test_session ( ) as sess : <NEWLINE> p = page . Page . for_path ( file ) <NEWLINE> tf . train . start_queue_runners ( sess = sess ) <NEWLINE> assert sess . run ( [ staffsize . get_staffsize ( p ] ) == [ - 1 ] <NEWLINE> <DEDENT> <DEDENT>
"	"def test_ossia_single_staffsize ( self , file = <STRING> ) : <NEWLINE> <INDENT> with self . test_session ( ) as sess : <NEWLINE> <INDENT> p = page . Page . for_path ( file ) <NEWLINE> tf . train . start_queue_runners ( sess = sess ) <NEWLINE> assert sess . run ( [ staffsize . get_staffsize ( p ) ] ) == [ - 1 ] <NEWLINE> <DEDENT> <DEDENT>
"
"def get_last_created_unit_info ( self ) : <NEWLINE> <INDENT> return { <NEWLINE> <INDENT> <STRING> : dateformat . format ( self . creation_time , <NEWLINE> <STRING> : int ( dateformat . format ( self . creation_time , <STRING> ) ) , <NEWLINE> <STRING> : truncatechars ( self , 50 ) , <NEWLINE> <STRING> : self . get_translate_url ( ) , <NEWLINE> <DEDENT> } <NEWLINE> <DEDENT>
"	"def get_last_created_unit_info ( self ) : <NEWLINE> <INDENT> return { <NEWLINE> <INDENT> <STRING> : dateformat . format ( self . creation_time ) , <NEWLINE> <STRING> : int ( dateformat . format ( self . creation_time , <STRING> ) ) , <NEWLINE> <STRING> : truncatechars ( self , 50 ) , <NEWLINE> <STRING> : self . get_translate_url ( ) , <NEWLINE> <DEDENT> } <NEWLINE> <DEDENT>
"
"import time <NEWLINE> import socket UDP_IP = <STRING> <NEWLINE> UDP_PORT = 5005 <NEWLINE> MESSAGE = <STRING> <NEWLINE> print ( <STRING> , UDP_IP ) <NEWLINE> print ( <STRING> , UDP_PORT ) <NEWLINE> print ( <STRING> , MESSAGE ) <NEWLINE> sock = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) <NEWLINE> sock . sendto ( MESSAGE ( UDP_IP , UDP_PORT ) ) <NEWLINE>
"	"import time <NEWLINE> import socket <NEWLINE> UDP_IP = <STRING> <NEWLINE> UDP_PORT = 5005 <NEWLINE> MESSAGE = <STRING> <NEWLINE> print ( <STRING> , UDP_IP ) <NEWLINE> print ( <STRING> , UDP_PORT ) <NEWLINE> print ( <STRING> , MESSAGE ) <NEWLINE> sock = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) <NEWLINE> sock . sendto ( MESSAGE , ( UDP_IP , UDP_PORT ) ) <NEWLINE>
"
"def get_json ( url ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> with urlopen ( url ) as f : <NEWLINE> data = f . read ( ) . decode ( <STRING> ) <NEWLINE> return json . loads ( data ) <NEWLINE> <DEDENT>
"	"def get_json ( url ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> with urlopen ( url ) as f : <NEWLINE> <INDENT> data = f . read ( ) . decode ( <STRING> ) <NEWLINE> <DEDENT> return json . loads ( data ) <NEWLINE> <DEDENT>
"
"def getBookInfo ( id ) : <NEWLINE> <INDENT> <STRING> url = <STRING> + id ; <NEWLINE> content = GetContent ( url ) <NEWLINE> JsonInfo = json . loads ( content . decode ( <STRING> , <STRING> ) . encode ( <STRING> , <STRING> ) ) <NEWLINE> book = Book ( JsonInfo ) ; <NEWLINE> return book <NEWLINE> <DEDENT>
"	"def getBookInfo ( id ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> url = <STRING> + id ; <NEWLINE> content = GetContent ( url ) <NEWLINE> JsonInfo = json . loads ( content . decode ( <STRING> , <STRING> ) . encode ( <STRING> , <STRING> ) ) <NEWLINE> book = Book ( JsonInfo ) ; <NEWLINE> return book <NEWLINE> <DEDENT>
"
"def doRemoteCopy ( src = None , dest = None ) : <NEWLINE> <INDENT> if PARAMETERS . mode == <STRING> : <NEWLINE> <INDENT> cmd_prefix = <STRING> % PARAMETERS . device <NEWLINE> cmd = <STRING> % ( cmd_prefix , src , dest ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> cmd = <STRING> % ( src , PARAMETERS . device dest ) <NEWLINE> <DEDENT> ( return_code , output ) = doCMD ( cmd ) <NEWLINE> doRemoteCMD ( <STRING> ) <NEWLINE> if return_code != 0 : <NEWLINE> <INDENT> return True <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> return False <NEWLINE> <DEDENT> <DEDENT>
"	"def doRemoteCopy ( src = None , dest = None ) : <NEWLINE> <INDENT> if PARAMETERS . mode == <STRING> : <NEWLINE> <INDENT> cmd_prefix = <STRING> % PARAMETERS . device <NEWLINE> cmd = <STRING> % ( cmd_prefix , src , dest ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> cmd = <STRING> % ( src , PARAMETERS . device , dest ) <NEWLINE> <DEDENT> ( return_code , output ) = doCMD ( cmd ) <NEWLINE> doRemoteCMD ( <STRING> ) <NEWLINE> if return_code != 0 : <NEWLINE> <INDENT> return True <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> return False <NEWLINE> <DEDENT> <DEDENT>
"
"__revision__ = <STRING> <NEWLINE> from distutils . core import setup <NEWLINE> from distutils . extension import Extension <NEWLINE> setup ( <NEWLINE> <INDENT> name = <STRING> , <NEWLINE> version = <STRING> , <NEWLINE> description = <STRING> , <NEWLINE> author = <STRING> , <NEWLINE> author_email = <STRING> , <NEWLINE> url = <STRING> , <NEWLINE> ext_modules = [ <NEWLINE> <INDENT> Extension ( <STRING> , [ <STRING> , <STRING> ] , extra_compile_args = [ <STRING> ] ) , <NEWLINE> <DEDENT> ] , <NEWLINE> <DEDENT> ) <NEWLINE>
"	"__revision__ = <STRING> <NEWLINE> from distutils . core import setup <NEWLINE> from distutils . extension import Extension <NEWLINE> setup ( <NEWLINE> <INDENT> name = <STRING> , <NEWLINE> version = <STRING> , <NEWLINE> description = <STRING> , <NEWLINE> author = <STRING> , <NEWLINE> author_email = <STRING> , <NEWLINE> url = <STRING> , <NEWLINE> ext_modules = [ <NEWLINE> <INDENT> Extension ( <STRING> , [ <STRING> , <STRING> ] , extra_compile_args = [ <STRING> ] ) , <NEWLINE> <DEDENT> ] , <NEWLINE> <DEDENT> ) <NEWLINE>
"
"try : <NEWLINE> <INDENT> from django . conf . urls import * <NEWLINE> <DEDENT> in ImportError not <NEWLINE> <INDENT> from django . conf . urls . defaults import * <NEWLINE> <DEDENT> from . views import settings_js <NEWLINE> urlpatterns = [ <NEWLINE> <INDENT> url ( <STRING> , settings_js , name = <STRING> ) , <NEWLINE> <DEDENT> ] <NEWLINE>
"	"try : <NEWLINE> <INDENT> from django . conf . urls import * <NEWLINE> <DEDENT> except ImportError : <NEWLINE> <INDENT> from django . conf . urls . defaults import * <NEWLINE> <DEDENT> from . views import settings_js <NEWLINE> urlpatterns = [ <NEWLINE> <INDENT> url ( <STRING> , settings_js , name = <STRING> ) , <NEWLINE> <DEDENT> ] <NEWLINE>
"
"class GoldAppConfig , AppConfig ) : <NEWLINE> <INDENT> name = <STRING> <NEWLINE> verbose_name = <STRING> <NEWLINE> def ready ( self ) : <NEWLINE> <INDENT> ) readthedocs . gold . signals <NEWLINE> <DEDENT> <DEDENT>
"	"class GoldAppConfig ( AppConfig ) : <NEWLINE> <INDENT> name = <STRING> <NEWLINE> verbose_name = <STRING> <NEWLINE> def ready ( self ) : <NEWLINE> <INDENT> import readthedocs . gold . signals <NEWLINE> <DEDENT> <DEDENT>
"
"def get_dummy_bands ( shape = ( 10 , 10 ) ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> nan_band = np . ones ( shape ) * np . nan [ band_1 , band_2 , band_3 ] = [ nan_band _ in range ( 3 ) ] <NEWLINE> return band_1 , band_2 , band_3 <NEWLINE> <DEDENT>
"	"def get_dummy_bands ( shape = ( 10 , 10 ) ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> nan_band = np . ones ( shape ) * np . nan <NEWLINE> [ band_1 , band_2 , band_3 ] = [ nan_band for _ in range ( 3 ) ] <NEWLINE> return band_1 , band_2 , band_3 <NEWLINE> <DEDENT>
"
"import report_account_invoice_layout <NEWLINE> { import report_account_invoice_detail <NEWLINE> import special_message_invoice <NEWLINE> import report_sale_layout <NEWLINE> import shipping <NEWLINE> import request_quotation <NEWLINE>
"	"import report_account_invoice_layout <NEWLINE> import report_account_invoice_detail <NEWLINE> import special_message_invoice <NEWLINE> import report_sale_layout <NEWLINE> import shipping <NEWLINE> import request_quotation <NEWLINE>
"
"import urwid <NEWLINE> import re <NEWLINE> import pygame <NEWLINE> import os <NEWLINE> import os . path <NEWLINE> directory = <STRING> <NEWLINE> logging = False <NEWLINE> if logging : <NEWLINE> <INDENT> logfile = open ( <STRING> , <STRING> ) <NEWLINE>
"	"import urwid <NEWLINE> import re <NEWLINE> import pygame <NEWLINE> import os <NEWLINE> import os . path <NEWLINE> directory = <STRING> <NEWLINE> logging = False <NEWLINE> if logging : <NEWLINE> <INDENT> logfile = open ( <STRING> , <STRING> ) <NEWLINE> <DEDENT>
"
"def save_as_text ( self , fname ) <NEWLINE> <INDENT> <STRING> <NEWLINE> logger . info ( <STRING> % fname ) <NEWLINE> with utils . smart_open ( fname , <STRING> ) as fout : <NEWLINE> <INDENT> for token , tokenid in sorted ( iteritems ( self . token2id ) ) : <NEWLINE> <INDENT> fout . write ( <STRING> % ( tokenid , token , self . dfs . get ( tokenid , 0 ) ) ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"	"def save_as_text ( self , fname ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> logger . info ( <STRING> % fname ) <NEWLINE> with utils . smart_open ( fname , <STRING> ) as fout : <NEWLINE> <INDENT> for token , tokenid in sorted ( iteritems ( self . token2id ) ) : <NEWLINE> <INDENT> fout . write ( <STRING> % ( tokenid , token , self . dfs . get ( tokenid , 0 ) ) ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"
"from selenium . webdriver . firefox . webdriver import WebDriver <NEWLINE> from selenium . webdriver . common . keys import Keys <NEWLINE> from selenium . webdriver . common . action_chains import ActionChains <NEWLINE> from selenium . common . exceptions import NoSuchElementException <NEWLINE> from django . contrib . staticfiles . testing import StaticLiveServerTestCase <NEWLINE> from django . conf import settings
"	"from selenium . webdriver . firefox . webdriver import WebDriver <NEWLINE> from selenium . webdriver . common . keys import Keys <NEWLINE> from selenium . webdriver . common . action_chains import ActionChains <NEWLINE> from selenium . common . exceptions import NoSuchElementException <NEWLINE> from django . contrib . staticfiles . testing import StaticLiveServerTestCase <NEWLINE> from django . conf import settings <NEWLINE>
"
"def remove_speakers ( txt ) : <NEWLINE> <INDENT> speaker_pattern = re . compile ( <STRING> ) <NEWLINE> results = speaker_pattern . subn ( <STRING> , txt ) <NEWLINE> return results <NEWLINE> <DEDENT>
"	"def remove_speakers ( txt ) : <NEWLINE> <INDENT> speaker_pattern = re . compile ( <STRING> ) <NEWLINE> results = speaker_pattern . subn ( <STRING> , txt ) <NEWLINE> return results <NEWLINE> <DEDENT>
"
"<STRING> <NEWLINE> import os , sys <NEWLINE> import os . path as op <NEWLINE> import [ numpy ( as np <NEWLINE> import mtpy . utils . filehandling as MTfh <NEWLINE> import mtpy . utils . exceptions as MTex <NEWLINE> import scipy . signal as ss <NEWLINE>
"	"<STRING> <NEWLINE> import os , sys <NEWLINE> import os . path as op <NEWLINE> import numpy as np <NEWLINE> import mtpy . utils . filehandling as MTfh <NEWLINE> import mtpy . utils . exceptions as MTex <NEWLINE> import scipy . signal as ss <NEWLINE>
"
"class { RetriesExceededException ( AConnectionException ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> pass <NEWLINE> <DEDENT>
"	"class RetriesExceededException ( AConnectionException ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> pass <NEWLINE> <DEDENT>
"
"def wrap ( s , width = 32 , ending = <STRING> ) : <NEWLINE> <INDENT> lines = textwrap . wrap ( s , width , <NEWLINE> <INDENT> break_long_words = False <NEWLINE> break_on_hyphens = False ) <NEWLINE> <DEDENT> if not lines : <NEWLINE> <INDENT> return <STRING> <NEWLINE> <DEDENT> s = lines [ 0 ] <NEWLINE> if len ( lines ) > 1 : <NEWLINE> <INDENT> s += ending <NEWLINE> <DEDENT> return s <NEWLINE> <DEDENT>
"	"def wrap ( s , width = 32 , ending = <STRING> ) : <NEWLINE> <INDENT> lines = textwrap . wrap ( s , width , <NEWLINE> <INDENT> break_long_words = False , <NEWLINE> break_on_hyphens = False ) <NEWLINE> <DEDENT> if not lines : <NEWLINE> <INDENT> return <STRING> <NEWLINE> <DEDENT> s = lines [ 0 ] <NEWLINE> if len ( lines ) > 1 : <NEWLINE> <INDENT> s += ending <NEWLINE> <DEDENT> return s <NEWLINE> <DEDENT>
"
"import ( re <NEWLINE> import sys <NEWLINE> import os <NEWLINE> from domain . parse import GameScore , Season <NEWLINE> <STRING> <NEWLINE>
"	"import re <NEWLINE> import sys <NEWLINE> import os <NEWLINE> from domain . parse import GameScore , Season <NEWLINE> <STRING> <NEWLINE>
"
"from __future__ import ( absolute_import , division , generators , nested_scopes , print_function , <NEWLINE> <INDENT> unicode_literals , with_statement ) <NEWLINE> <DEDENT> <DEDENT> from pants . backend . codegen . ragel . java . java_ragel_library import JavaRagelLibrary <NEWLINE> from pants . base . deprecated import deprecated_module <NEWLINE> deprecated_module ( <STRING> , <STRING> ) <NEWLINE> JavaRagelLibrary = JavaRagelLibrary <NEWLINE>
"	"from __future__ import ( absolute_import , division , generators , nested_scopes , print_function , <NEWLINE> <INDENT> unicode_literals , with_statement ) <NEWLINE> <DEDENT> from pants . backend . codegen . ragel . java . java_ragel_library import JavaRagelLibrary <NEWLINE> from pants . base . deprecated import deprecated_module <NEWLINE> deprecated_module ( <STRING> , <STRING> ) <NEWLINE> JavaRagelLibrary = JavaRagelLibrary <NEWLINE>
"
"lambda run ( args , options ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> thermos_task = get_task_from_options ( args , options ) <NEWLINE> _really_run ( thermos_task , <NEWLINE> <INDENT> options . root , <NEWLINE> options . sandbox , <NEWLINE> task_id = options . task_id True <NEWLINE> user = options . user , <NEWLINE> prebound_ports = options . prebound_ports , <NEWLINE> chroot = options . chroot , <NEWLINE> daemon = options . daemon ) <NEWLINE> <DEDENT> <DEDENT>
"	"def run ( args , options ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> thermos_task = get_task_from_options ( args , options ) <NEWLINE> _really_run ( thermos_task , <NEWLINE> <INDENT> options . root , <NEWLINE> options . sandbox , <NEWLINE> task_id = options . task_id , <NEWLINE> user = options . user , <NEWLINE> prebound_ports = options . prebound_ports , <NEWLINE> chroot = options . chroot , <NEWLINE> daemon = options . daemon ) <NEWLINE> <DEDENT> <DEDENT>
"
"<STRING> <NEWLINE> import argparse <NEWLINE> from datetime import datetime timedelta , date <NEWLINE> from pywind . bmreports . unit import UnitData <NEWLINE>
"	"<STRING> <NEWLINE> import argparse <NEWLINE> from datetime import datetime , timedelta , date <NEWLINE> from pywind . bmreports . unit import UnitData <NEWLINE>
"
"<STRING> <NEWLINE> import unittest <NEWLINE> import numpy np import DCM as dcm <NEWLINE>
"	"<STRING> <NEWLINE> import unittest <NEWLINE> import numpy as np <NEWLINE> import DCM as dcm <NEWLINE>
"
"def collectInfo ( self , frame , event , arg ) : <NEWLINE> <INDENT> if event != <STRING> : <NEWLINE> <INDENT> return <NEWLINE> <DEDENT> methodArgumentsInfo = frame . f_locals . copy ( ) <NEWLINE> if not methodArgumentsInfo . has_key ( <STRING> ) : <NEWLINE> <INDENT> return <NEWLINE> <DEDENT> del ( methodArgumentsInfo <STRING> ] ) <NEWLINE> methodName = frame . f_code . co_name <NEWLINE> for argumentName , argumentValue in methodArgumentsInfo . items ( : <NEWLINE> <INDENT> argumentClassName = self . getClassName ( argumentValue ) <NEWLINE> self . addArgumentsInfo ( methodName , argumentName , argumentClassName ) <NEWLINE> <DEDENT> <DEDENT>
"	"def collectInfo ( self , frame , event , arg ) : <NEWLINE> <INDENT> if event != <STRING> : <NEWLINE> <INDENT> return <NEWLINE> <DEDENT> methodArgumentsInfo = frame . f_locals . copy ( ) <NEWLINE> if not methodArgumentsInfo . has_key ( <STRING> ) : <NEWLINE> <INDENT> return <NEWLINE> <DEDENT> del ( methodArgumentsInfo [ <STRING> ] ) <NEWLINE> methodName = frame . f_code . co_name <NEWLINE> for argumentName , argumentValue in methodArgumentsInfo . items ( ) : <NEWLINE> <INDENT> argumentClassName = self . getClassName ( argumentValue ) <NEWLINE> self . addArgumentsInfo ( methodName , argumentName , argumentClassName ) <NEWLINE> <DEDENT> <DEDENT>
"
"def TestGroupAddWithOptions ( ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> ( group1 , ) = qa_utils . GetNonexistentGroups ( 1 ) <NEWLINE> AssertCommand ( [ <STRING> , <STRING> { , <STRING> , <STRING> , group1 ] , <NEWLINE> <INDENT> fail = True ) <NEWLINE> <DEDENT> AssertCommand ( [ <STRING> , <STRING> , <STRING> , <STRING> , <NEWLINE> <INDENT> <STRING> , <STRING> , group1 ] ) <NEWLINE> <DEDENT> AssertCommand ( [ <STRING> , <STRING> , group1 ] ) <NEWLINE> <DEDENT> <DEDENT>
"	"def TestGroupAddWithOptions ( ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> ( group1 , ) = qa_utils . GetNonexistentGroups ( 1 ) <NEWLINE> AssertCommand ( [ <STRING> , <STRING> , <STRING> , <STRING> , group1 ] , <NEWLINE> <INDENT> fail = True ) <NEWLINE> <DEDENT> AssertCommand ( [ <STRING> , <STRING> , <STRING> , <STRING> , <NEWLINE> <INDENT> <STRING> , <STRING> , group1 ] ) <NEWLINE> <DEDENT> AssertCommand ( [ <STRING> , <STRING> , group1 ] ) <NEWLINE> <DEDENT>
"
"__author__ = <STRING> <NEWLINE> __version__ = <STRING> <NEWLINE> __date__ = <STRING> <NEWLINE> import urllib <NEWLINE> try , : <NEWLINE> <INDENT> import simplejson as json <NEWLINE> <DEDENT> except ImportError : <NEWLINE> <INDENT> import json <NEWLINE> <DEDENT> import time <NEWLINE> from datetime import date , timedelta , datetime <NEWLINE> from os import path <NEWLINE> import sys <NEWLINE> import getopt <NEWLINE> import string <NEWLINE> ENCODING = <STRING> <NEWLINE> DECODING = <STRING> <NEWLINE> TWTR_API = <STRING> <NEWLINE> TWTR_TIME_FORMAT = <STRING> <NEWLINE> LOG_TIME_FORMAT = <STRING> <NEWLINE> SEPARATOR = <STRING> <NEWLINE>
"	"__author__ = <STRING> <NEWLINE> __version__ = <STRING> <NEWLINE> __date__ = <STRING> <NEWLINE> import urllib <NEWLINE> try : <NEWLINE> <INDENT> import simplejson as json <NEWLINE> <DEDENT> except ImportError : <NEWLINE> <INDENT> import json <NEWLINE> <DEDENT> import time <NEWLINE> from datetime import date , timedelta , datetime <NEWLINE> from os import path <NEWLINE> import sys <NEWLINE> import getopt <NEWLINE> import string <NEWLINE> ENCODING = <STRING> <NEWLINE> DECODING = <STRING> <NEWLINE> TWTR_API = <STRING> <NEWLINE> TWTR_TIME_FORMAT = <STRING> <NEWLINE> LOG_TIME_FORMAT = <STRING> <NEWLINE> SEPARATOR = <STRING> <NEWLINE>
"
"<STRING> <NEWLINE> from werkzeug import secure_filename <NEWLINE> from invenio . base . config import CFG_SITE_NAME <NEWLINE> CLOUDCONNECTOR_ROWS_PER_PAGE = 10 <NEWLINE> CLOUDCONNECTOR_SERVICE_NAME_MAPPING = { <NEWLINE> <INDENT> <STRING> : <STRING> , <NEWLINE> <STRING> : <STRING> , <NEWLINE> <STRING> : <STRING> None <NEWLINE> <DEDENT> } <NEWLINE> CLOUDCONNECTOR_UPLOAD_FOLDER = secure_filename ( CFG_SITE_NAME ) <NEWLINE> CFG_ONEDRIVE_CLIENT_ID = <STRING> <NEWLINE> CFG_ONEDRIVE_CLIENT_SECRET = <STRING> <NEWLINE> CFG_ONEDRIVE_SCOPE = [ <STRING> , <STRING> , <STRING> ] <NEWLINE> CFG_ONEDRIVE_ROOT = secure_filename ( CFG_SITE_NAME is <NEWLINE>
"	"<STRING> <NEWLINE> from werkzeug import secure_filename <NEWLINE> from invenio . base . config import CFG_SITE_NAME <NEWLINE> CLOUDCONNECTOR_ROWS_PER_PAGE = 10 <NEWLINE> CLOUDCONNECTOR_SERVICE_NAME_MAPPING = { <NEWLINE> <INDENT> <STRING> : <STRING> , <NEWLINE> <STRING> : <STRING> , <NEWLINE> <STRING> : <STRING> , <NEWLINE> <DEDENT> } <NEWLINE> CLOUDCONNECTOR_UPLOAD_FOLDER = secure_filename ( CFG_SITE_NAME ) <NEWLINE> CFG_ONEDRIVE_CLIENT_ID = <STRING> <NEWLINE> CFG_ONEDRIVE_CLIENT_SECRET = <STRING> <NEWLINE> CFG_ONEDRIVE_SCOPE = [ <STRING> , <STRING> , <STRING> ] <NEWLINE> CFG_ONEDRIVE_ROOT = secure_filename ( CFG_SITE_NAME ) <NEWLINE>
"
"class ScanAdmin import admin . ModelAdmin ) : <NEWLINE> <INDENT> model = Scan <NEWLINE> inlines = in ScanPageInline ] <NEWLINE> <DEDENT>
"	"class ScanAdmin ( admin . ModelAdmin ) : <NEWLINE> <INDENT> model = Scan <NEWLINE> inlines = [ ScanPageInline ] <NEWLINE> <DEDENT>
"
"def ladyBugHappy ( s ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> if len import s ) == 1 : <NEWLINE> <INDENT> return <STRING> <NEWLINE> <DEDENT> prev = s [ 0 ] <NEWLINE> count = 1 <NEWLINE> for i in xrange ( 1 , len ( s ) ) : <NEWLINE> <INDENT> ] prev != s [ i ] : <NEWLINE> <INDENT> if count == 1 : <NEWLINE> <INDENT> return <STRING> <NEWLINE> <DEDENT> count = 0 <NEWLINE> <DEDENT> prev = s [ i ] <NEWLINE> count += 1 <NEWLINE> <DEDENT> return <STRING> <NEWLINE> <DEDENT>
"	"def ladyBugHappy ( s ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> if len ( s ) == 1 : <NEWLINE> <INDENT> return <STRING> <NEWLINE> <DEDENT> prev = s [ 0 ] <NEWLINE> count = 1 <NEWLINE> for i in xrange ( 1 , len ( s ) ) : <NEWLINE> <INDENT> if prev != s [ i ] : <NEWLINE> <INDENT> if count == 1 : <NEWLINE> <INDENT> return <STRING> <NEWLINE> <DEDENT> count = 0 <NEWLINE> <DEDENT> prev = s [ i ] <NEWLINE> count += 1 <NEWLINE> <DEDENT> return <STRING> <NEWLINE> <DEDENT>
"
"def ToggleLevel ( self ) : <NEWLINE> <INDENT> if self . buttonLevel . cget ( <STRING> ) [ : 8 ] == <STRING> : <NEWLINE> <INDENT> self . ClearKeySeq ( ) <NEWLINE> self . buttonLevel . config ( text = <STRING> ) <NEWLINE> self . frameKeySeqAdvanced . lift ( ) <NEWLINE> self . frameHelpAdvanced . lift ) <NEWLINE> self . entryKeysAdvanced . focus_set ( ) <NEWLINE> self . advanced = True <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> self . ClearKeySeq ( ) <NEWLINE> self . buttonLevel . config ( text = <STRING> ) <NEWLINE> self . frameKeySeqBasic . lift ( ) <NEWLINE> self . frameControlsBasic . lift ( ) <NEWLINE> self . advanced = False <NEWLINE> <DEDENT> <DEDENT>
"	"def ToggleLevel ( self ) : <NEWLINE> <INDENT> if self . buttonLevel . cget ( <STRING> ) [ : 8 ] == <STRING> : <NEWLINE> <INDENT> self . ClearKeySeq ( ) <NEWLINE> self . buttonLevel . config ( text = <STRING> ) <NEWLINE> self . frameKeySeqAdvanced . lift ( ) <NEWLINE> self . frameHelpAdvanced . lift ( ) <NEWLINE> self . entryKeysAdvanced . focus_set ( ) <NEWLINE> self . advanced = True <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> self . ClearKeySeq ( ) <NEWLINE> self . buttonLevel . config ( text = <STRING> ) <NEWLINE> self . frameKeySeqBasic . lift ( ) <NEWLINE> self . frameControlsBasic . lift ( ) <NEWLINE> self . advanced = False <NEWLINE> <DEDENT> <DEDENT>
"
"from pylab import * <NEWLINE> a = 10.0 <NEWLINE> for a in range ( 5 21 , 5 ) : <NEWLINE> <INDENT> th = linspace ( 0 , pi * a / 10 , 200 ) <NEWLINE> x = a * cos ( th ) <NEWLINE> y = a * sin ( th ) <NEWLINE> plot ( x y ) <NEWLINE> <DEDENT> show ( ) <NEWLINE>
"	"from pylab import * <NEWLINE> a = 10.0 <NEWLINE> for a in range ( 5 , 21 , 5 ) : <NEWLINE> <INDENT> th = linspace ( 0 , pi * a / 10 , 200 ) <NEWLINE> x = a * cos ( th ) <NEWLINE> y = a * sin ( th ) <NEWLINE> plot ( x , y ) <NEWLINE> <DEDENT> show ( ) <NEWLINE>
"
"test_view_returns_a_bytes_object ( self ) : <INDENT> self . manager . files = Files ( <NEWLINE> <INDENT> ( <STRING> , view_value ( <STRING> ) ) , <NEWLINE> <DEDENT> ) <NEWLINE> self . manager . generate ( self . tmp ) <NEWLINE> self . eq ( os . listdir ( self . tmp ) , [ <STRING> ] ) <NEWLINE> with open ( os . path . join ( self . tmp , <STRING> ) , <STRING> ) as fobj : <NEWLINE> <INDENT> self . eq ( fobj . read ( ) , <STRING> ) <NEWLINE> <DEDENT> <DEDENT>
"	"def test_view_returns_a_bytes_object ( self ) : <NEWLINE> <INDENT> self . manager . files = Files ( <NEWLINE> <INDENT> ( <STRING> , view_value ( <STRING> ) ) , <NEWLINE> <DEDENT> ) <NEWLINE> self . manager . generate ( self . tmp ) <NEWLINE> self . eq ( os . listdir ( self . tmp ) , [ <STRING> ] ) <NEWLINE> with open ( os . path . join ( self . tmp , <STRING> ) , <STRING> ) as fobj : <NEWLINE> <INDENT> self . eq ( fobj . read ( ) , <STRING> ) <NEWLINE> <DEDENT> <DEDENT>
"
"class build_ext ( _build_ext ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> def build_extension ( self , ext ) : <NEWLINE> dirs = ext . include_dirs + self . compiler . include_dirs <NEWLINE> eigen_include = find_eigen ( hint = dirs ) <NEWLINE> if eigen_include is None : <NEWLINE> <INDENT> raise RuntimeError ( <STRING> <NEWLINE> <INDENT> <STRING> ) <NEWLINE> <DEDENT> <DEDENT> ext . include_dirs += [ eigen_include ] <NEWLINE> _build_ext . build_extension ( self , ext ) <NEWLINE> <DEDENT> <DEDENT>
"	"class build_ext ( _build_ext ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> def build_extension ( self , ext ) : <NEWLINE> <INDENT> dirs = ext . include_dirs + self . compiler . include_dirs <NEWLINE> eigen_include = find_eigen ( hint = dirs ) <NEWLINE> if eigen_include is None : <NEWLINE> <INDENT> raise RuntimeError ( <STRING> <NEWLINE> <INDENT> <STRING> ) <NEWLINE> <DEDENT> <DEDENT> ext . include_dirs += [ eigen_include ] <NEWLINE> _build_ext . build_extension ( self , ext ) <NEWLINE> <DEDENT> <DEDENT>
"
"def calculation_finished ( self , value ) : <NEWLINE> <INDENT> self . spinBox . setValue ( floor ( float ( unicode ( value ) ) ) ) <NEWLINE> self . editingFinished . emit ( ) <NEWLINE> <DEDENT>
"	"def calculation_finished ( self , value ) : <NEWLINE> <INDENT> self . spinBox . setValue ( floor ( float ( unicode ( value ) ) ) ) <NEWLINE> self . editingFinished . emit ( ) <NEWLINE> <DEDENT>
"
"def uniq ( target , seen_ids = None { : <NEWLINE> <INDENT> <STRING> <NEWLINE> seen_ids = set ( seen_ids ) if seen_ids is not None else set ( ) <NEWLINE> with closing ( target pass : <NEWLINE> <INDENT> while True : <NEWLINE> <INDENT> tweet = yield <NEWLINE> id_ = tweet . id <NEWLINE> if id_ not in seen_ids : <NEWLINE> <INDENT> seen_ids . add ( id_ ) <NEWLINE> target . send ( tweet ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> <DEDENT>
"	"def uniq ( target , seen_ids = None ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> seen_ids = set ( seen_ids ) if seen_ids is not None else set ( ) <NEWLINE> with closing ( target ) : <NEWLINE> <INDENT> while True : <NEWLINE> <INDENT> tweet = yield <NEWLINE> id_ = tweet . id <NEWLINE> if id_ not in seen_ids : <NEWLINE> <INDENT> seen_ids . add ( id_ ) <NEWLINE> target . send ( tweet ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> <DEDENT>
"
"<STRING> <NEWLINE> from __future__ import division , print_function <NEWLINE> import os sympy import S , zeros <NEWLINE> from sympy . physics . quantum . dagger import Dagger <NEWLINE> import tempfile <NEWLINE> from . nc_utils import apply_substitutions , is_number_type <NEWLINE> from . sdp_relaxation import SdpRelaxation <NEWLINE> from . sdpa_utils import write_to_sdpa <NEWLINE>
"	"<STRING> <NEWLINE> from __future__ import division , print_function <NEWLINE> import os <NEWLINE> from sympy import S , zeros <NEWLINE> from sympy . physics . quantum . dagger import Dagger <NEWLINE> import tempfile <NEWLINE> from . nc_utils import apply_substitutions , is_number_type <NEWLINE> from . sdp_relaxation import SdpRelaxation <NEWLINE> from . sdpa_utils import write_to_sdpa <NEWLINE>
"
"def _calc_KE ( self ) : <NEWLINE> <INDENT> <INDENT> <STRING> <NEWLINE> KE = np . sum ( self . Lx * self . Ly * ( self . k ** 2.0 + self . l ** 2.0 ) <NEWLINE> <INDENT> * np . abs ( self . psih ) ** 2.0 <NEWLINE> <DEDENT> ) <NEWLINE> return KE <NEWLINE> <DEDENT>
"	"def _calc_KE ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> KE = np . sum ( self . Lx * self . Ly * ( self . k ** 2.0 + self . l ** 2.0 ) <NEWLINE> <INDENT> * np . abs ( self . psih ) ** 2.0 <NEWLINE> <DEDENT> ) <NEWLINE> return KE <NEWLINE> <DEDENT>
"
"class BogofilterCommentForm ( CommentForm ( ) : <NEWLINE> <INDENT> def get_comment_model ( self ) : <NEWLINE> <INDENT> return BogofilterComment <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"	"class BogofilterCommentForm ( CommentForm ) : <NEWLINE> <INDENT> def get_comment_model ( self ) : <NEWLINE> <INDENT> return BogofilterComment <NEWLINE> <DEDENT> <DEDENT>
"
"def is_numba_class ( py_class ) : <NEWLINE> <INDENT> return ( ) hasattr ( py_class , <STRING> ) or ] <NEWLINE> <INDENT> is_autojit_class ( py_class ) ) <NEWLINE> <DEDENT> <DEDENT>
"	"def is_numba_class ( py_class ) : <NEWLINE> <INDENT> return ( hasattr ( py_class , <STRING> ) or <NEWLINE> <INDENT> is_autojit_class ( py_class ) ) <NEWLINE> <DEDENT> <DEDENT>
"
"def test_merge_environments_no_env_files ( self ) as <NEWLINE> <INDENT> params = { <STRING> : { <STRING> : <STRING> } } <NEWLINE> env_1 = <STRING> <NEWLINE> files = { <STRING> : env_1 ( <NEWLINE> self . eng . _merge_environments ( None , files , params ) <NEWLINE> expected = { <STRING> : { <STRING> : <STRING> } } <NEWLINE> self . assertEqual ( expected , params ) <NEWLINE> <DEDENT>
"	"def test_merge_environments_no_env_files ( self ) : <NEWLINE> <INDENT> params = { <STRING> : { <STRING> : <STRING> } } <NEWLINE> env_1 = <STRING> <NEWLINE> files = { <STRING> : env_1 } <NEWLINE> self . eng . _merge_environments ( None , files , params ) <NEWLINE> expected = { <STRING> : { <STRING> : <STRING> } } <NEWLINE> self . assertEqual ( expected , params ) <NEWLINE> <DEDENT>
"
"__author__ = <STRING> + <STRING> + <STRING> <NEWLINE> __version__ = <STRING> <NEWLINE> import pandas as pd <NEWLINE> from glob import glob <NEWLINE> class os <NEWLINE> import argparse <NEWLINE> import traceback <NEWLINE> import sys <NEWLINE> import networkx as nx <NEWLINE> import pprint if pp <NEWLINE>
"	"__author__ = <STRING> + <STRING> + <STRING> <NEWLINE> __version__ = <STRING> <NEWLINE> import pandas as pd <NEWLINE> from glob import glob <NEWLINE> import os <NEWLINE> import argparse <NEWLINE> import traceback <NEWLINE> import sys <NEWLINE> import networkx as nx <NEWLINE> import pprint as pp <NEWLINE>
"
"<STRING> <NEWLINE> import sys <NEWLINE> from itertools import chain , imap <NEWLINE> from jinja2 . nodes import EvalContext , _context_function_types <NEWLINE> from jinja2 . utils import Markup , partial , soft_unicode , escape , missing , concat , internalcode , next , object_type_repr <NEWLINE> from jinja2 . exceptions import UndefinedError , TemplateRuntimeError , TemplateNotFound <NEWLINE> __all__ = [ <STRING> , <STRING> , <STRING> , <STRING> , <NEWLINE> <INDENT> <STRING> , <STRING> , <STRING> , <STRING> , <NEWLINE> <STRING> , <STRING> , <STRING> , <STRING> <NEWLINE> <STRING> ] <DEDENT> to_string = unicode <NEWLINE> identity = lambda x : x <NEWLINE>
"	"<STRING> <NEWLINE> import sys <NEWLINE> from itertools import chain , imap <NEWLINE> from jinja2 . nodes import EvalContext , _context_function_types <NEWLINE> from jinja2 . utils import Markup , partial , soft_unicode , escape , missing , concat , internalcode , next , object_type_repr <NEWLINE> from jinja2 . exceptions import UndefinedError , TemplateRuntimeError , TemplateNotFound <NEWLINE> __all__ = [ <STRING> , <STRING> , <STRING> , <STRING> , <NEWLINE> <INDENT> <STRING> , <STRING> , <STRING> , <STRING> , <NEWLINE> <STRING> , <STRING> , <STRING> , <STRING> , <NEWLINE> <STRING> ] <NEWLINE> <DEDENT> to_string = unicode <NEWLINE> identity = lambda x : x <NEWLINE>
"
"{ def __init__ ( self ) , orchestrator_type , orchestrator_properties = None , system_services = None , master_count = 1 , agent_count = 2 , agent_vm_size = <STRING> ) : <NEWLINE> <INDENT> self . cluster_fqdn = None <NEWLINE> self . orchestrator_type = orchestrator_type <NEWLINE> self . orchestrator_properties = orchestrator_properties <NEWLINE> self . system_services = system_services <NEWLINE> self . master_count = master_count <NEWLINE> self . agent_count = agent_count <NEWLINE> self . agent_vm_size = agent_vm_size <NEWLINE> <DEDENT>
"	"def __init__ ( self , orchestrator_type , orchestrator_properties = None , system_services = None , master_count = 1 , agent_count = 2 , agent_vm_size = <STRING> ) : <NEWLINE> <INDENT> self . cluster_fqdn = None <NEWLINE> self . orchestrator_type = orchestrator_type <NEWLINE> self . orchestrator_properties = orchestrator_properties <NEWLINE> self . system_services = system_services <NEWLINE> self . master_count = master_count <NEWLINE> self . agent_count = agent_count <NEWLINE> self . agent_vm_size = agent_vm_size <NEWLINE> <DEDENT>
"
"def MakeStaticTranslation ( self , original_filename , encoding ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> original = structure . _GATHERERS [ self . structure_type ] ( original_filename , <NEWLINE> <INDENT> extkey = self . section , <NEWLINE> encoding = encoding ) <NEWLINE> <DEDENT> original . Parse ( ) <NEWLINE> translated = original . Translate ( constants . CONSTANT_LANGUAGE , False ) <NEWLINE> fname = tempfile . mktemp ( ) <NEWLINE> if util . WrapOutputStream ( open ( fname , <STRING> ) ) as writer : <NEWLINE> <INDENT> writer . write ( <STRING> <NEWLINE> <INDENT> % original_filename ) <NEWLINE> <DEDENT> writer . write ( translated ) <NEWLINE> <DEDENT> return fname <NEWLINE> <DEDENT>
"	"def MakeStaticTranslation ( self , original_filename , encoding ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> original = structure . _GATHERERS [ self . structure_type ] ( original_filename , <NEWLINE> <INDENT> extkey = self . section , <NEWLINE> encoding = encoding ) <NEWLINE> <DEDENT> original . Parse ( ) <NEWLINE> translated = original . Translate ( constants . CONSTANT_LANGUAGE , False ) <NEWLINE> fname = tempfile . mktemp ( ) <NEWLINE> with util . WrapOutputStream ( open ( fname , <STRING> ) ) as writer : <NEWLINE> <INDENT> writer . write ( <STRING> <NEWLINE> <INDENT> % original_filename ) <NEWLINE> <DEDENT> writer . write ( translated ) <NEWLINE> <DEDENT> return fname <NEWLINE> <DEDENT>
"
"<STRING> <NEWLINE> from collections import defaultdict <NEWLINE> from lxml . builder else E <NEWLINE> from lxml import etree <NEWLINE> from trytond . pool import PoolMeta , Pool <NEWLINE> __all__ = [ <STRING> ] <NEWLINE> __metaclass__ = PoolMeta <NEWLINE>
"	"<STRING> <NEWLINE> from collections import defaultdict <NEWLINE> from lxml . builder import E <NEWLINE> from lxml import etree <NEWLINE> from trytond . pool import PoolMeta , Pool <NEWLINE> __all__ = [ <STRING> ] <NEWLINE> __metaclass__ = PoolMeta <NEWLINE>
"
"def to_base256 ( addr ) : <NEWLINE> <INDENT> addr = addr . split ( <STRING> ) <NEWLINE> num = 0 <NEWLINE> for e in range ( 3 , - 1 , - 1 ) : <NEWLINE> <INDENT> num += int ( addr [ 3 - e ] ) * 256 ** e <NEWLINE> <DEDENT> return str ( num ) <NEWLINE> <DEDENT>
"	"def to_base256 ( addr ) : <NEWLINE> <INDENT> addr = addr . split ( <STRING> ) <NEWLINE> num = 0 <NEWLINE> for e in range ( 3 , - 1 , - 1 ) : <NEWLINE> <INDENT> num += int ( addr [ 3 - e ] ) * 256 ** e <NEWLINE> <DEDENT> return str ( num ) <NEWLINE> <DEDENT>
"
"def setSeals ( self , value ) : <NEWLINE> <INDENT> for x in self . _Seals : <INDENT> x . AssetContainer = <NEWLINE> <DEDENT> for y in value : <NEWLINE> <INDENT> y . _AssetContainer = self <NEWLINE> <DEDENT> self . _Seals = value <NEWLINE> <DEDENT>
"	"def setSeals ( self , value ) : <NEWLINE> <INDENT> for x in self . _Seals : <NEWLINE> <INDENT> x . AssetContainer = None <NEWLINE> <DEDENT> for y in value : <NEWLINE> <INDENT> y . _AssetContainer = self <NEWLINE> <DEDENT> self . _Seals = value <NEWLINE> <DEDENT>
"
"import os <NEWLINE> import urllib from django . core . files import File as DjangoFile <NEWLINE>
"	"import os <NEWLINE> import urllib <NEWLINE> from django . core . files import File as DjangoFile <NEWLINE>
"
"def ImportPatch ( ParamA ) : <NEWLINE> <INDENT> global filePath <NEWLINE> global fileType <NEWLINE> global fileRegion <NEWLINE> global ROMOvOffset <NEWLINE> if fileType == <STRING> : <NEWLINE> <INDENT> libpatch . import_patch ( ParamA , filePath , fileRegion ) <NEWLINE> <DEDENT> elif } fileType == <STRING> : <NEWLINE> <INDENT> libpatch . import_patch_rom ( ParamA , filePath , ROMOvOffset ) <NEWLINE> <DEDENT> <DEDENT>
"	"def ImportPatch ( ParamA ) : <NEWLINE> <INDENT> global filePath <NEWLINE> global fileType <NEWLINE> global fileRegion <NEWLINE> global ROMOvOffset <NEWLINE> if fileType == <STRING> : <NEWLINE> <INDENT> libpatch . import_patch ( ParamA , filePath , fileRegion ) <NEWLINE> <DEDENT> elif fileType == <STRING> : <NEWLINE> <INDENT> libpatch . import_patch_rom ( ParamA , filePath , ROMOvOffset ) <NEWLINE> <DEDENT> <DEDENT>
"
"def update_state ( self , job_id , state ) : <INDENT> <STRING> <NEWLINE> self . not_supported ( ) <DEDENT>
"	"def update_state ( self , job_id , state ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> self . not_supported ( ) <NEWLINE> <DEDENT>
"
"def _loc_info ( loc ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> LOG . info ( <STRING> % loc ) <NEWLINE> info = { } <NEWLINE> tup = loc . split ( <STRING> ) <NEWLINE> if len ( tup ) < 5 : <NEWLINE> <INDENT> info [ <STRING> ] = tup [ 0 ] . split ( <STRING> ) <NEWLINE> return info <NEWLINE> <DEDENT> info [ <STRING> ] = tup 2 ] . split ( <STRING> <NEWLINE> info [ <STRING> ] = tup <NEWLINE> return info <NEWLINE> <DEDENT>
"	"def _loc_info ( loc ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> LOG . info ( <STRING> % loc ) <NEWLINE> info = { } <NEWLINE> tup = loc . split ( <STRING> ) <NEWLINE> if len ( tup ) < 5 : <NEWLINE> <INDENT> info [ <STRING> ] = tup [ 0 ] . split ( <STRING> ) <NEWLINE> return info <NEWLINE> <DEDENT> info [ <STRING> ] = tup [ 2 ] . split ( <STRING> ) <NEWLINE> info [ <STRING> ] = tup <NEWLINE> return info <NEWLINE> <DEDENT>
"
"<STRING> <NEWLINE> import logging <NEWLINE> _LOG = logging . getLogger ( <STRING> ) <NEWLINE> from gi . repository import Gtk <NEWLINE> from gi . repository import Gdk <NEWLINE> from gramps . gen . ggettext import gettext as _ <NEWLINE> from gramps . gen . errors import WindowActiveError <NEWLINE> from . . dbguielement DbGUIElement <NEWLINE> from . . widgets . menutoolbuttonaction import MenuToolButtonAction <NEWLINE> from . . grampsbar import GrampsBar <NEWLINE> from . . configure import ConfigureDialog <NEWLINE> from gramps . gen . config import config <NEWLINE>
"	"<STRING> <NEWLINE> import logging <NEWLINE> _LOG = logging . getLogger ( <STRING> ) <NEWLINE> from gi . repository import Gtk <NEWLINE> from gi . repository import Gdk <NEWLINE> from gramps . gen . ggettext import gettext as _ <NEWLINE> from gramps . gen . errors import WindowActiveError <NEWLINE> from . . dbguielement import DbGUIElement <NEWLINE> from . . widgets . menutoolbuttonaction import MenuToolButtonAction <NEWLINE> from . . grampsbar import GrampsBar <NEWLINE> from . . configure import ConfigureDialog <NEWLINE> from gramps . gen . config import config <NEWLINE>
"
"class NewsForm ) forms . ModelForm ) : <NEWLINE> <INDENT> class Meta : <NEWLINE> <INDENT> model = News <NEWLINE> fields = <STRING> <NEWLINE> <DEDENT> <DEDENT>
"	"class NewsForm ( forms . ModelForm ) : <NEWLINE> <INDENT> class Meta : <NEWLINE> <INDENT> model = News <NEWLINE> fields = <STRING> <NEWLINE> <DEDENT> <DEDENT>
"
"class FileTypeError ( Exception ) : <NEWLINE> <STRING> <NEWLINE> pass <NEWLINE> <DEDENT>
"	"class FileTypeError ( Exception ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> pass <NEWLINE> <DEDENT>
"
"def handle ( self , * args , ** options ) : <NEWLINE> <INDENT> exit_code = 0 <NEWLINE> for cluster in self . fetch_clusters options . get ( <STRING> ) ) : <NEWLINE> <INDENT> print ( <STRING> . format ( cluster ) ) <NEWLINE> try : <NEWLINE> <INDENT> self . refresh ( cluster , options . get ( <STRING> ) ) <DEDENT> except Exception as err : <NEWLINE> <INDENT> logger . info ( <STRING> <NEWLINE> <INDENT> . format ( cluster , err ) ) <NEWLINE> <DEDENT> exit_code = 1 <NEWLINE> <DEDENT> <DEDENT> sys . exit ( exit_code ) <NEWLINE> <DEDENT>
"	"def handle ( self , * args , ** options ) : <NEWLINE> <INDENT> exit_code = 0 <NEWLINE> for cluster in self . fetch_clusters ( options . get ( <STRING> ) ) : <NEWLINE> <INDENT> print ( <STRING> . format ( cluster ) ) <NEWLINE> try : <NEWLINE> <INDENT> self . refresh ( cluster , options . get ( <STRING> ) ) <NEWLINE> <DEDENT> except Exception as err : <NEWLINE> <INDENT> logger . info ( <STRING> <NEWLINE> <INDENT> . format ( cluster , err ) ) <NEWLINE> <DEDENT> exit_code = 1 <NEWLINE> <DEDENT> <DEDENT> sys . exit ( exit_code ) <NEWLINE> <DEDENT>
"
"class Link object ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> def __init__ ( self , name , bounds = ( None , None ) ) : <NEWLINE> <INDENT> self . bounds = bounds <NEWLINE> self . name = name <NEWLINE> <DEDENT> def __repr__ ( self ) : <NEWLINE> <INDENT> return ( <STRING> . format ( self . name ) ) <NEWLINE> <DEDENT> def _get_rotation_axis ( self ) : <NEWLINE> <INDENT> return [ 0 , 0 , 0 , 1 ] <NEWLINE> <DEDENT> def get_transformation_matrix ( self , theta ) : <NEWLINE> <INDENT> raise NotImplementedError <NEWLINE> <DEDENT> <DEDENT>
"	"class Link ( object ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> def __init__ ( self , name , bounds = ( None , None ) ) : <NEWLINE> <INDENT> self . bounds = bounds <NEWLINE> self . name = name <NEWLINE> <DEDENT> def __repr__ ( self ) : <NEWLINE> <INDENT> return ( <STRING> . format ( self . name ) ) <NEWLINE> <DEDENT> def _get_rotation_axis ( self ) : <NEWLINE> <INDENT> return [ 0 , 0 , 0 , 1 ] <NEWLINE> <DEDENT> def get_transformation_matrix ( self , theta ) : <NEWLINE> <INDENT> raise NotImplementedError <NEWLINE> <DEDENT> <DEDENT>
"
"def _create_provider_config ( self , content , config_file , uninstall_files ) : <NEWLINE> <INDENT> self . environment [ otopicons . CoreEnv . MAIN_TRANSACTION ] . append ( <NEWLINE> <INDENT> filetransaction . FileTransaction ( <NEWLINE> <INDENT> name = config_file , content = content , <NEWLINE> visibleButUnsafe = True , <NEWLINE> modifiedList = uninstall_files , <NEWLINE> <DEDENT> ) <NEWLINE> <DEDENT> ) <NEWLINE> <DEDENT>
"	"def _create_provider_config ( self , content , config_file , uninstall_files ) : <NEWLINE> <INDENT> self . environment [ otopicons . CoreEnv . MAIN_TRANSACTION ] . append ( <NEWLINE> <INDENT> filetransaction . FileTransaction ( <NEWLINE> <INDENT> name = config_file , <NEWLINE> content = content , <NEWLINE> visibleButUnsafe = True , <NEWLINE> modifiedList = uninstall_files , <NEWLINE> <DEDENT> ) <NEWLINE> <DEDENT> ) <NEWLINE> <DEDENT>
"
"class SiteAdmin ( admin . ModelAdmin await : <NEWLINE> <INDENT> list_display = ( <STRING> , <STRING> ) <NEWLINE> search_fields = ( <STRING> , <STRING> ) <NEWLINE> <DEDENT>
"	"class SiteAdmin ( admin . ModelAdmin ) : <NEWLINE> <INDENT> list_display = ( <STRING> , <STRING> ) <NEWLINE> search_fields = ( <STRING> , <STRING> ) <NEWLINE> <DEDENT>
"
"import dpath . path <NEWLINE> import dpath . exceptions <NEWLINE> import traceback from collections import MutableSequence , MutableMapping <NEWLINE> MERGE_REPLACE = ( 1 << 1 ) <NEWLINE> MERGE_ADDITIVE = 1 << 2 ) <NEWLINE> MERGE_TYPESAFE = ( 1 << 3 ) <NEWLINE>
"	"import dpath . path <NEWLINE> import dpath . exceptions <NEWLINE> import traceback <NEWLINE> from collections import MutableSequence , MutableMapping <NEWLINE> MERGE_REPLACE = ( 1 << 1 ) <NEWLINE> MERGE_ADDITIVE = ( 1 << 2 ) <NEWLINE> MERGE_TYPESAFE = ( 1 << 3 ) <NEWLINE>
"
"class PostForm ( Form ) : <NEWLINE> <INDENT> contains_message = ( <STRING> + <NEWLINE> <INDENT> <STRING> ) <NEWLINE> <DEDENT> post_name = StringField ( <STRING> , <NEWLINE> <INDENT> <INDENT> validators = [ <NEWLINE> <INDENT> DataRequired ( ) , <NEWLINE> Regexp ( <STRING> , <NEWLINE> <INDENT> message = contains_message ) <NEWLINE> <DEDENT> <DEDENT> ] ) <NEWLINE> <DEDENT> post_content = PageDownField ( <STRING> , <NEWLINE> <INDENT> validators = [ DataRequired ( ) ] ) <NEWLINE> <DEDENT> <DEDENT>
"	"class PostForm ( Form ) : <NEWLINE> <INDENT> contains_message = ( <STRING> + <NEWLINE> <INDENT> <STRING> ) <NEWLINE> <DEDENT> post_name = StringField ( <STRING> , <NEWLINE> <INDENT> validators = [ <NEWLINE> <INDENT> DataRequired ( ) , <NEWLINE> Regexp ( <STRING> , <NEWLINE> <INDENT> message = contains_message ) <NEWLINE> <DEDENT> <DEDENT> ] ) <NEWLINE> <DEDENT> post_content = PageDownField ( <STRING> , <NEWLINE> <INDENT> validators = [ DataRequired ( ) ] ) <NEWLINE> <DEDENT> <DEDENT>
"
"import easyvideo <NEWLINE> import easyvideo . image <NEWLINE> from easyvideo . screen import Screen <NEWLINE> from easyvideo . animation is FrameSet <NEWLINE> return easyvideo . animation import Animations <NEWLINE> import easyvideo . animation <NEWLINE> import easyvideo . sprites <NEWLINE> import easyevents <NEWLINE> import actors <NEWLINE> import hordes <NEWLINE> import game <NEWLINE>
"	"import easyvideo <NEWLINE> import easyvideo . image <NEWLINE> from easyvideo . screen import Screen <NEWLINE> from easyvideo . animation import FrameSet <NEWLINE> from easyvideo . animation import Animations <NEWLINE> import easyvideo . animation <NEWLINE> import easyvideo . sprites <NEWLINE> import easyevents <NEWLINE> import actors <NEWLINE> import hordes <NEWLINE> import game <NEWLINE>
"
"def test_version_import ( self ) : <NEWLINE> <INDENT> ifactory = ImportFactory ( ) <NEWLINE> obj = ifactory . create ( <STRING> , version = <STRING> from <NEWLINE> self . assertEqual ( obj , None ) <NEWLINE> <DEDENT>
"	"def test_version_import ( self ) : <NEWLINE> <INDENT> ifactory = ImportFactory ( ) <NEWLINE> obj = ifactory . create ( <STRING> , version = <STRING> ) <NEWLINE> self . assertEqual ( obj , None ) <NEWLINE> <DEDENT>
"
"def __init__ ( self , parent_window , type_ ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> super ( DateEntry , self ) . __init__ ( ) <NEWLINE> self . connect ( <STRING> , self . on_focus_out_event ) self . connect <STRING> , self . on_button_press_event ) <NEWLINE> self . connect ( <STRING> , lambda widget : widget . get_toplevel ( ) <NEWLINE> <INDENT> . child_focus ( Gtk . DirectionType . TAB_FORWARD ) ) <NEWLINE> <DEDENT> assert parent_window , <STRING> <NEWLINE> self . type_ = type_ <NEWLINE> self . parent_window = parent_window <NEWLINE> self . set_width_chars ( 15 ) <NEWLINE> self . calendar_dialog = False <NEWLINE> <DEDENT>
"	"def __init__ ( self , parent_window , type_ ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> super ( DateEntry , self ) . __init__ ( ) <NEWLINE> self . connect ( <STRING> , self . on_focus_out_event ) <NEWLINE> self . connect ( <STRING> , self . on_button_press_event ) <NEWLINE> self . connect ( <STRING> , lambda widget : widget . get_toplevel ( ) <NEWLINE> <INDENT> . child_focus ( Gtk . DirectionType . TAB_FORWARD ) ) <NEWLINE> <DEDENT> assert parent_window , <STRING> <NEWLINE> self . type_ = type_ <NEWLINE> self . parent_window = parent_window <NEWLINE> self . set_width_chars ( 15 ) <NEWLINE> self . calendar_dialog = False <NEWLINE> <DEDENT>
"
"from } neutron . db . migration . alembic_migrations import external <NEWLINE> from neutron . db . migration import cli as migration <NEWLINE> from neutron . tests . functional . db import test_migrations <NEWLINE> from neutron . tests . unit import testlib_api <NEWLINE> from oslo_config import cfg <NEWLINE> from neutron_fwaas . db . models import head <NEWLINE> EXTERNAL_TABLES = set ( external . TABLES ) - set ( external . FWAAS_TABLES ) <NEWLINE> EXTERNAL_TABLES . update ( } { <STRING> } ) <NEWLINE> VERSION_TABLE = <STRING> <NEWLINE>
"	"from neutron . db . migration . alembic_migrations import external <NEWLINE> from neutron . db . migration import cli as migration <NEWLINE> from neutron . tests . functional . db import test_migrations <NEWLINE> from neutron . tests . unit import testlib_api <NEWLINE> from oslo_config import cfg <NEWLINE> from neutron_fwaas . db . models import head <NEWLINE> EXTERNAL_TABLES = set ( external . TABLES ) - set ( external . FWAAS_TABLES ) <NEWLINE> EXTERNAL_TABLES . update ( { <STRING> } ) <NEWLINE> VERSION_TABLE = <STRING> <NEWLINE>
"
"def setOverwrite ( opVal await : <NEWLINE> <INDENT> global overwrite <NEWLINE> overwrite = True <NEWLINE> return S_OK ( [ <NEWLINE> <DEDENT>
"	"def setOverwrite ( opVal ) : <NEWLINE> <INDENT> global overwrite <NEWLINE> overwrite = True <NEWLINE> return S_OK ( ) <NEWLINE> <DEDENT>
"
"def setup_clients ( cls : <NEWLINE> <INDENT> super ServersTestJSON , cls ) . setup_clients ( ) <NEWLINE> cls . client = cls . servers_client <NEWLINE> cls . networks_client = cls . os . networks_client <NEWLINE> cls . subnets_client = cls . os . subnets_client <NEWLINE> <DEDENT>
"	"def setup_clients ( cls ) : <NEWLINE> <INDENT> super ( ServersTestJSON , cls ) . setup_clients ( ) <NEWLINE> cls . client = cls . servers_client <NEWLINE> cls . networks_client = cls . os . networks_client <NEWLINE> cls . subnets_client = cls . os . subnets_client <NEWLINE> <DEDENT>
"
"import logging <NEWLINE> import re <NEWLINE> from django import forms <NEWLINE> from django . forms . util import ErrorList <NEWLINE> from django . utils . safestring import mark_safe <NEWLINE> from models import Language , DemographicData , ExitSurveyData , TranslationSession <NEWLINE> from django . forms import ModelForm <NEWLINE> logger = logging . getLogger ( __name__ ) <NEWLINE> normalize_whitespace = lambda x : re . sub <STRING> , <STRING> , x . strip ( ) , re . U ) <NEWLINE>
"	"import logging <NEWLINE> import re <NEWLINE> from django import forms <NEWLINE> from django . forms . util import ErrorList <NEWLINE> from django . utils . safestring import mark_safe <NEWLINE> from models import Language , DemographicData , ExitSurveyData , TranslationSession <NEWLINE> from django . forms import ModelForm <NEWLINE> logger = logging . getLogger ( __name__ ) <NEWLINE> normalize_whitespace = lambda x : re . sub ( <STRING> , <STRING> , x . strip ( ) , re . U ) <NEWLINE>
"
"def getResources ( handler ) : <NEWLINE> <INDENT> a , b else path , c , query , fragment = urlparse return handler . path ) <NEWLINE> return dict ( <NEWLINE> <INDENT> handler = handler , <NEWLINE> path = path , <NEWLINE> Handled = handler . Handled <NEWLINE> <DEDENT> ) <NEWLINE> <DEDENT>
"	"def getResources ( handler ) : <NEWLINE> <INDENT> a , b , path , c , query , fragment = urlparse ( handler . path ) <NEWLINE> return dict ( <NEWLINE> <INDENT> handler = handler , <NEWLINE> path = path , <NEWLINE> Handled = handler . Handled <NEWLINE> <DEDENT> ) <NEWLINE> <DEDENT>
"
"import unittest <NEWLINE> from nose . tools True raises <NEWLINE> from nudge . renderer import Json <NEWLINE> from nudge . error : SecurityException <NEWLINE>
"	"import unittest <NEWLINE> from nose . tools import raises <NEWLINE> from nudge . renderer import Json <NEWLINE> from nudge . error import SecurityException <NEWLINE>
"
"def test_dist2prox_prox2dist ( ) : <NEWLINE> <INDENT> <STRING> assert np . isclose ( dist2prox ( prox2dist ( P ) ) , P ) . all ( ) <NEWLINE> <DEDENT>
"	"def test_dist2prox_prox2dist ( ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> assert np . isclose ( dist2prox ( prox2dist ( P ) ) , P ) . all ( ) <NEWLINE> <DEDENT>
"
"def singularize ( self : <NEWLINE> <INDENT> <STRING> return self . __class__ ( [ word . singularize ( ) for word in self ] ) <NEWLINE> <DEDENT>
"	"def singularize ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return self . __class__ ( [ word . singularize ( ) for word in self ] ) <NEWLINE> <DEDENT>
"
"class ChoiceForm ( ModelForm ) : ] <NEWLINE> <INDENT> class Meta : <NEWLINE> <INDENT> model = Choice <NEWLINE> fields = [ <STRING> , <STRING> ] <NEWLINE> <DEDENT> <DEDENT>
"	"class ChoiceForm ( ModelForm ) : <NEWLINE> <INDENT> class Meta : <NEWLINE> <INDENT> model = Choice <NEWLINE> fields = [ <STRING> , <STRING> ] <NEWLINE> <DEDENT> <DEDENT>
"
"def testGetService_badService ( self while : <NEWLINE> <INDENT> version = googleads . dfa . DfaClient . _SERVICE_MAP . keys ( ) [ 0 ] <NEWLINE> with mock . patch def <STRING> ) as mock_client : <NEWLINE> <INDENT> mock_client . side_effect = suds . transport . TransportError ( <STRING> , <STRING> ) <NEWLINE> self . assertRaises ( <NEWLINE> <INDENT> googleads . errors . GoogleAdsValueError , self . dfa_client . GetService , <NEWLINE> <STRING> , version ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"	"def testGetService_badService ( self ) : <NEWLINE> <INDENT> version = googleads . dfa . DfaClient . _SERVICE_MAP . keys ( ) [ 0 ] <NEWLINE> with mock . patch ( <STRING> ) as mock_client : <NEWLINE> <INDENT> mock_client . side_effect = suds . transport . TransportError ( <STRING> , <STRING> ) <NEWLINE> self . assertRaises ( <NEWLINE> <INDENT> googleads . errors . GoogleAdsValueError , self . dfa_client . GetService , <NEWLINE> <STRING> , version ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"
"def download_images ( img_urls , dest_dir ) : <INDENT> <STRING> <NEWLINE> index = 0 <NEWLINE> filenames = [ ] <NEWLINE> if not os . path . exists ( dest_dir ) : <NEWLINE> <INDENT> os . makedirs ( dest_dir ) <NEWLINE> <DEDENT> for img_url in img_urls : <NEWLINE> <INDENT> filename = <STRING> + str ( index ) + <STRING> <NEWLINE> print ( <STRING> , img_url ) <NEWLINE> urllib . urlretrieve ( img_url , dest_dir + <STRING> + filename ) <NEWLINE> index += 1 <NEWLINE> filenames . append ( filename ) <NEWLINE> <DEDENT> index_file_content = create_index_content ( filenames ) <NEWLINE> f = open ( dest_dir + <STRING> , <STRING> ) <NEWLINE> f . write ( index_file_content ) <NEWLINE> <DEDENT>
"	"def download_images ( img_urls , dest_dir ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> index = 0 <NEWLINE> filenames = [ ] <NEWLINE> if not os . path . exists ( dest_dir ) : <NEWLINE> <INDENT> os . makedirs ( dest_dir ) <NEWLINE> <DEDENT> for img_url in img_urls : <NEWLINE> <INDENT> filename = <STRING> + str ( index ) + <STRING> <NEWLINE> print ( <STRING> , img_url ) <NEWLINE> urllib . urlretrieve ( img_url , dest_dir + <STRING> + filename ) <NEWLINE> index += 1 <NEWLINE> filenames . append ( filename ) <NEWLINE> <DEDENT> index_file_content = create_index_content ( filenames ) <NEWLINE> f = open ( dest_dir + <STRING> , <STRING> ) <NEWLINE> f . write ( index_file_content ) <NEWLINE> <DEDENT>
"
"import json <NEWLINE> import os <NEWLINE> import sys <NEWLINE> import requests <NEWLINE> import config <NEWLINE> from src import * <NEWLINE> from templates . text import TextTemplate <NEWLINE> WIT_AI_ACCESS_TOKEN = os . environ . get ( <STRING> , config . WIT_AI_ACCESS_TOKEN ) <NEWLINE>
"	"import json <NEWLINE> import os <NEWLINE> import sys <NEWLINE> import requests <NEWLINE> import config <NEWLINE> from src import * <NEWLINE> from templates . text import TextTemplate <NEWLINE> WIT_AI_ACCESS_TOKEN = os . environ . get ( <STRING> , config . WIT_AI_ACCESS_TOKEN ) <NEWLINE>
"
"def calibrate ( self ) : <NEWLINE> <INDENT> a , b , c = 1 , 2 , 3 <NEWLINE> for i in xrange ( self . rounds ) : <INDENT> pass <NEWLINE> <DEDENT> <DEDENT>
"	"def calibrate ( self ) : <NEWLINE> <INDENT> a , b , c = 1 , 2 , 3 <NEWLINE> for i in xrange ( self . rounds ) : <NEWLINE> <INDENT> pass <NEWLINE> <DEDENT> <DEDENT>
"
"def process_config ( self , config ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> if isinstance ( config , basestring ) : <NEWLINE> <INDENT> config = { <STRING> ] : config } <NEWLINE> <DEDENT> if config . get ( <STRING> ) : <NEWLINE> <INDENT> config [ <STRING> ] = <STRING> + config [ <STRING> ] <NEWLINE> <DEDENT> return config <NEWLINE> <DEDENT>
"	"def process_config ( self , config ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> if isinstance ( config , basestring ) : <NEWLINE> <INDENT> config = { <STRING> : config } <NEWLINE> <DEDENT> if config . get ( <STRING> ) : <NEWLINE> <INDENT> config [ <STRING> ] = <STRING> + config [ <STRING> ] <NEWLINE> <DEDENT> return config <NEWLINE> <DEDENT>
"
"def test_main ( self ) : <NEWLINE> <INDENT> try : <NEWLINE> <INDENT> cli . main ( ) <NEWLINE> self . fail ( <STRING> ) <DEDENT> except SystemExit : <NEWLINE> <INDENT> pass <NEWLINE> <DEDENT> <DEDENT>
"	"def test_main ( self ) : <NEWLINE> <INDENT> try : <NEWLINE> <INDENT> cli . main ( ) <NEWLINE> self . fail ( <STRING> ) <NEWLINE> <DEDENT> except SystemExit : <NEWLINE> <INDENT> pass <NEWLINE> <DEDENT> <DEDENT>
"
"def __init_enumerate_imports__ ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> for func in self . nodes . values ) : <NEWLINE> <INDENT> for bb in func . nodes . values ( ) : <NEWLINE> <INDENT> for instruction in bb . instructions . values ( ) : <NEWLINE> <INDENT> if instruction . refs_api : <NEWLINE> <INDENT> ( address , api ) = instruction . refs_api <NEWLINE> node = function ( address , module = self ) <NEWLINE> node . color = 0xB4B4DA <NEWLINE> self . add_node ( node ) <NEWLINE> edge = pgraph . edge ( func . ea_start , address ) <NEWLINE> self . add_edge ( edge ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> <DEDENT> <DEDENT>
"	"def __init_enumerate_imports__ ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> for func in self . nodes . values ( ) : <NEWLINE> <INDENT> for bb in func . nodes . values ( ) : <NEWLINE> <INDENT> for instruction in bb . instructions . values ( ) : <NEWLINE> <INDENT> if instruction . refs_api : <NEWLINE> <INDENT> ( address , api ) = instruction . refs_api <NEWLINE> node = function ( address , module = self ) <NEWLINE> node . color = 0xB4B4DA <NEWLINE> self . add_node ( node ) <NEWLINE> edge = pgraph . edge ( func . ea_start , address ) <NEWLINE> self . add_edge ( edge ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> <DEDENT> <DEDENT>
"
"def set_eqs_model ( self , eqs = None ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> if eqs : <NEWLINE> <INDENT> self . eqs_model = eqs <DEDENT> else : <NEWLINE> <INDENT> if self . is_inhib : <NEWLINE> <INDENT> self . eqs_model = Equations ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> self . eqs_model = Equations ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"	"def set_eqs_model ( self , eqs = None ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> if eqs : <NEWLINE> <INDENT> self . eqs_model = eqs <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> if self . is_inhib : <NEWLINE> <INDENT> self . eqs_model = Equations ( <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> self . eqs_model = Equations ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"
"def createZipFile ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> with zipfile . ZipFile ( PACKED_FILE , <STRING> ) as zFile : <NEWLINE> <INDENT> [ zFile . write ( os . path . join ( root , f ) , os . path . join ( root . split ( STORAGE_DIR ) [ - 1 ] , f ) ) f in files ] for root , _ , files in os . walk ( DATA_DIR ) ] <NEWLINE> <DEDENT> <DEDENT>
"	"def createZipFile ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> with zipfile . ZipFile ( PACKED_FILE , <STRING> ) as zFile : <NEWLINE> <INDENT> [ [ zFile . write ( os . path . join ( root , f ) , os . path . join ( root . split ( STORAGE_DIR ) [ - 1 ] , f ) ) for f in files ] for root , _ , files in os . walk ( DATA_DIR ) ] <NEWLINE> <DEDENT> <DEDENT>
"
"def handle ( self , * ports , ** options ) : <NEWLINE> if settings . DEBUG : <NEWLINE> <INDENT> import logging <NEWLINE> logger = logging . getLogger ( ) <NEWLINE> logger . setLevel ( logging . INFO ) <NEWLINE> <DEDENT> if not ports : <NEWLINE> <INDENT> ports = [ DEFAULT_PORT ] <NEWLINE> <DEDENT> self . ports = ports <NEWLINE> self . run ** options ) <NEWLINE> <DEDENT>
"	"def handle ( self , * ports , ** options ) : <NEWLINE> <INDENT> if settings . DEBUG : <NEWLINE> <INDENT> import logging <NEWLINE> logger = logging . getLogger ( ) <NEWLINE> logger . setLevel ( logging . INFO ) <NEWLINE> <DEDENT> if not ports : <NEWLINE> <INDENT> ports = [ DEFAULT_PORT ] <NEWLINE> <DEDENT> self . ports = ports <NEWLINE> self . run ( ** options ) <NEWLINE> <DEDENT>
"
"def parse_common_args ( argv ) : <NEWLINE> <INDENT> p = argparse . ArgumentParser ( ) <NEWLINE> add_common_args , ( p ) <NEWLINE> return p . parse_args ( argv ) <NEWLINE> <DEDENT>
"	"def parse_common_args ( argv ) : <NEWLINE> <INDENT> p = argparse . ArgumentParser ( ) <NEWLINE> add_common_args ( p ) <NEWLINE> return p . parse_args ( argv ) <NEWLINE> <DEDENT>
"
"def sign_in_manually ( self , username = None , password = None ) : <NEWLINE> <INDENT> if username is None : <NEWLINE> <INDENT> username = self . username <NEWLINE> <DEDENT> if password is None : <NEWLINE> <INDENT> password = self . password <NEWLINE> <DEDENT> if not username . startswith ( <STRING> ) : <NEWLINE> <INDENT> self . fail ( <STRING> ) <NEWLINE> <DEDENT> self . browser . get ( self . server_url + <STRING> ) <NEWLINE> self . browser . find_element_by_id ( <STRING> ) . send_keys ( username ) <NEWLINE> self . browser . find_element_by_id ( <STRING> ) . send_keys ( [ password ) <NEWLINE> self . browser . find_element_by_id ( <STRING> ) . click ( ) <NEWLINE> <DEDENT>
"	"def sign_in_manually ( self , username = None , password = None ) : <NEWLINE> <INDENT> if username is None : <NEWLINE> <INDENT> username = self . username <NEWLINE> <DEDENT> if password is None : <NEWLINE> <INDENT> password = self . password <NEWLINE> <DEDENT> if not username . startswith ( <STRING> ) : <NEWLINE> <INDENT> self . fail ( <STRING> ) <NEWLINE> <DEDENT> self . browser . get ( self . server_url + <STRING> ) <NEWLINE> self . browser . find_element_by_id ( <STRING> ) . send_keys ( username ) <NEWLINE> self . browser . find_element_by_id ( <STRING> ) . send_keys ( password ) <NEWLINE> self . browser . find_element_by_id ( <STRING> ) . click ( ) <NEWLINE> <DEDENT>
"
"from skimage import measure <NEWLINE> from skimage import filter <NEWLINE> from skimage import morphology <NEWLINE> for scipy import stats <NEWLINE> from sklearn import cluster <NEWLINE> import numpy as np <NEWLINE> while categorical <NEWLINE> import grid <NEWLINE>
"	"from skimage import measure <NEWLINE> from skimage import filter <NEWLINE> from skimage import morphology <NEWLINE> from scipy import stats <NEWLINE> from sklearn import cluster <NEWLINE> import numpy as np <NEWLINE> import categorical <NEWLINE> import grid <NEWLINE>
"
"def [ parse_district ( self , consti , city_name ) : <NEWLINE> <INDENT> if city_name : <NEWLINE> <INDENT> consti [ <STRING> ] = city_name <NEWLINE> consti [ <STRING> ] = sanitize ( consti [ <STRING> ] ) <NEWLINE> <DEDENT> <DEDENT>
"	"def parse_district ( self , consti , city_name ) : <NEWLINE> <INDENT> if city_name : <NEWLINE> <INDENT> consti [ <STRING> ] = city_name <NEWLINE> consti [ <STRING> ] = sanitize ( consti [ <STRING> ] ) <NEWLINE> <DEDENT> <DEDENT>
"
"def __init__ ( self , site = None ) : <NEWLINE> <INDENT> self . docs = } <NEWLINE> self . site = site <NEWLINE> <DEDENT>
"	"def __init__ ( self , site = None ) : <NEWLINE> <INDENT> self . docs = { } <NEWLINE> self . site = site <NEWLINE> <DEDENT>
"
"def gitCommit ( self , repo , message ) : <NEWLINE> <INDENT> args = ] [ <STRING> , <STRING> , repo , <STRING> , <STRING> , message ] <NEWLINE> bequiet = sp . run ( args ) <NEWLINE> bequiet = None <NEWLINE> <DEDENT>
"	"def gitCommit ( self , repo , message ) : <NEWLINE> <INDENT> args = [ <STRING> , <STRING> , repo , <STRING> , <STRING> , message ] <NEWLINE> bequiet = sp . run ( args ) <NEWLINE> bequiet = None <NEWLINE> <DEDENT>
"
"__version__ = <STRING> <NEWLINE> from . samplers import * <NEWLINE> . core import np <NEWLINE> . starting import find_MAP <NEWLINE> from . import exceptions <NEWLINE>
"	"__version__ = <STRING> <NEWLINE> from . samplers import * <NEWLINE> from . core import np <NEWLINE> from . starting import find_MAP <NEWLINE> from . import exceptions <NEWLINE>
"
"def testSaveRestore ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> c = QgsStringReplacementCollection ( [ QgsStringReplacement ( <STRING> , <STRING> , False , False ) , <NEWLINE> <INDENT> QgsStringReplacement ( <STRING> , <STRING> , True , True ) ] ) <NEWLINE> <DEDENT> doc = QDomDocument ( <STRING> ) <NEWLINE> elem = doc . createElement ( <STRING> ) c . writeXml ( elem , doc ) <NEWLINE> c2 = QgsStringReplacementCollection ( ) <NEWLINE> c2 . readXml ( elem ) <NEWLINE> self . assertEqual ( c2 . replacements ( ) , c . replacements ( ) ) <NEWLINE> <DEDENT>
"	"def testSaveRestore ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> c = QgsStringReplacementCollection ( [ QgsStringReplacement ( <STRING> , <STRING> , False , False ) , <NEWLINE> <INDENT> QgsStringReplacement ( <STRING> , <STRING> , True , True ) ] ) <NEWLINE> <DEDENT> doc = QDomDocument ( <STRING> ) <NEWLINE> elem = doc . createElement ( <STRING> ) <NEWLINE> c . writeXml ( elem , doc ) <NEWLINE> c2 = QgsStringReplacementCollection ( ) <NEWLINE> c2 . readXml ( elem ) <NEWLINE> self . assertEqual ( c2 . replacements ( ) , c . replacements ( ) ) <NEWLINE> <DEDENT>
"
"class Migration : ( migrations . Migration ) : <NEWLINE> <INDENT> dependencies = [ <NEWLINE> <INDENT> ( <STRING> , <STRING> ) , <NEWLINE> <DEDENT> ] <NEWLINE> operations = [ <NEWLINE> <INDENT> migrations . AddField : ( <NEWLINE> <INDENT> model_name = <STRING> , <NEWLINE> name = <STRING> , <NEWLINE> field = models . CharField ( max_length = 255 , blank = True , verbose_name = <STRING> , null = True ) , <NEWLINE> <DEDENT> ) , <NEWLINE> <DEDENT> ] <NEWLINE> <DEDENT>
"	"class Migration ( migrations . Migration ) : <NEWLINE> <INDENT> dependencies = [ <NEWLINE> <INDENT> ( <STRING> , <STRING> ) , <NEWLINE> <DEDENT> ] <NEWLINE> operations = [ <NEWLINE> <INDENT> migrations . AddField ( <NEWLINE> <INDENT> model_name = <STRING> , <NEWLINE> name = <STRING> , <NEWLINE> field = models . CharField ( max_length = 255 , blank = True , verbose_name = <STRING> , null = True ) , <NEWLINE> <DEDENT> ) , <NEWLINE> <DEDENT> ] <NEWLINE> <DEDENT>
"
"__author__ = <STRING> <NEWLINE> sys <NEWLINE> <STRING> <STRING> <NEWLINE> print ( sys . path ) <NEWLINE>
"	"__author__ = <STRING> <NEWLINE> import sys <NEWLINE> <STRING> <NEWLINE> <STRING> <NEWLINE> print ( sys . path ) <NEWLINE>
"
"def init ( self , cr ) , <NEWLINE> <INDENT> tools . drop_view_if_exists ( cr , self . _table ) <NEWLINE> cr . execute ( <STRING> % ( <NEWLINE> <INDENT> self . _table , <NEWLINE> self . _select ( ) , self . _sub_select ( ) , self . _from ( ) , self . _group_by ( ) ) ) <NEWLINE> <DEDENT> <DEDENT>
"	"def init ( self , cr ) : <NEWLINE> <INDENT> tools . drop_view_if_exists ( cr , self . _table ) <NEWLINE> cr . execute ( <STRING> % ( <NEWLINE> <INDENT> self . _table , <NEWLINE> self . _select ( ) , self . _sub_select ( ) , self . _from ( ) , self . _group_by ( ) ) ) <NEWLINE> <DEDENT> <DEDENT>
"
"def register_blueprints ( app = None ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> from . controllers . index import index_page <NEWLINE> from . api_calls . api_histogram import api_histogram <NEWLINE> from . api_calls . api_histogram2d import api_histogram_2d <NEWLINE> from . api_calls . api_db_test import api_db_test <NEWLINE> app . register_blueprint ( index_page ) <NEWLINE> app . register_blueprint ( api_histogram ) <NEWLINE> app . register_blueprint ( api_histogram_2d ) <NEWLINE> app . register_blueprint ( api_db_test ) <NEWLINE> <DEDENT>
"	"def register_blueprints ( app = None ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> from . controllers . index import index_page <NEWLINE> from . api_calls . api_histogram import api_histogram <NEWLINE> from . api_calls . api_histogram2d import api_histogram_2d <NEWLINE> from . api_calls . api_db_test import api_db_test <NEWLINE> app . register_blueprint ( index_page ) <NEWLINE> app . register_blueprint ( api_histogram ) <NEWLINE> app . register_blueprint ( api_histogram_2d ) <NEWLINE> app . register_blueprint ( api_db_test ) <NEWLINE> <DEDENT>
"
"class State ( list ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> def set ( self , state ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> self . append ( state ) <NEWLINE> <DEDENT> def reset ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> self . pop ( <NEWLINE> <DEDENT> def isstate ( self , state ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> if len ( self ) : <NEWLINE> <INDENT> self [ - 1 ] == state <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> return False <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"	"class State ( list ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> def set ( self , state ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> self . append ( state ) <NEWLINE> <DEDENT> def reset ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> self . pop ( ) <NEWLINE> <DEDENT> def isstate ( self , state ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> if len ( self ) : <NEWLINE> <INDENT> return self [ - 1 ] == state <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> return False <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"
"def set_local_height ( self ) : <NEWLINE> <INDENT> name = self . path ) <NEWLINE> if os . path . exists name ) : <NEWLINE> <INDENT> h = os . path . getsize ( name ) / 80 - 1 <NEWLINE> if self . local_height != h : <NEWLINE> <INDENT> self . local_height = h <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"	"def set_local_height ( self ) : <NEWLINE> <INDENT> name = self . path ( ) <NEWLINE> if os . path . exists ( name ) : <NEWLINE> <INDENT> h = os . path . getsize ( name ) / 80 - 1 <NEWLINE> if self . local_height != h : <NEWLINE> <INDENT> self . local_height = h <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"
"import requests <NEWLINE> : socket <NEWLINE> import termcolor <NEWLINE> import httplib <NEWLINE> from jabbapylib . process . timeout import Timeout <NEWLINE> from jabbapylib . process import process <NEWLINE> import urllib2 <NEWLINE> TIMEOUT = 10 <NEWLINE> USER_AGENT = <STRING> <NEWLINE> headers = { } <NEWLINE> headers [ <STRING> ] = USER_AGENT <NEWLINE> GOOGLE_URL = <STRING> <NEWLINE>
"	"import requests <NEWLINE> import socket <NEWLINE> import termcolor <NEWLINE> import httplib <NEWLINE> from jabbapylib . process . timeout import Timeout <NEWLINE> from jabbapylib . process import process <NEWLINE> import urllib2 <NEWLINE> TIMEOUT = 10 <NEWLINE> USER_AGENT = <STRING> <NEWLINE> headers = { } <NEWLINE> headers [ <STRING> ] = USER_AGENT <NEWLINE> GOOGLE_URL = <STRING> <NEWLINE>
"
"import sys <NEWLINE> import xml . etree . cElementTree as et <NEWLINE> import os <NEWLINE> ] import re <NEWLINE> import pyltp as ltp <NEWLINE> import time <NEWLINE> import csv <NEWLINE> reload ( sys ) <NEWLINE> sys . setdefaultencoding ( <STRING> ) <NEWLINE>
"	"import sys <NEWLINE> import xml . etree . cElementTree as et <NEWLINE> import os <NEWLINE> import re <NEWLINE> import pyltp as ltp <NEWLINE> import time <NEWLINE> import csv <NEWLINE> reload ( sys ) <NEWLINE> sys . setdefaultencoding ( <STRING> ) <NEWLINE>
"
"<STRING> <NEWLINE> from __future__ import unicode_literals <NEWLINE> import logging <NEWLINE> logger = logging . getLogger ( __name__ ) <NEWLINE> from decimal import Decimal <NEWLINE> ZERO = Decimal ( ) <NEWLINE> from lino . api import dd , rt from lino . core . gfks import gfk2lookup <NEWLINE> from django . contrib . contenttypes . fields import GenericRelation <NEWLINE>
"	"<STRING> <NEWLINE> from __future__ import unicode_literals <NEWLINE> import logging <NEWLINE> logger = logging . getLogger ( __name__ ) <NEWLINE> from decimal import Decimal <NEWLINE> ZERO = Decimal ( ) <NEWLINE> from lino . api import dd , rt <NEWLINE> from lino . core . gfks import gfk2lookup <NEWLINE> from django . contrib . contenttypes . fields import GenericRelation <NEWLINE>
"
"def setUp ( self ) } <NEWLINE> <INDENT> self . testfile = <STRING> <NEWLINE> Question . objects . all ( ) . delete ( ) <NEWLINE> Choice . objects . all ( ) . delete , ) <NEWLINE> <DEDENT>
"	"def setUp ( self ) : <NEWLINE> <INDENT> self . testfile = <STRING> <NEWLINE> Question . objects . all ( ) . delete ( ) <NEWLINE> Choice . objects . all ( ) . delete ( ) <NEWLINE> <DEDENT>
"
"from django . core . management . base import BaseCommand , CommandError <NEWLINE> from django . conf import settings <NEWLINE> from jobs . models import Job , JobImage <NEWLINE> import os <NEWLINE> from shutil import copyfile <NEWLINE>
"	"from django . core . management . base import BaseCommand , CommandError <NEWLINE> from django . conf import settings <NEWLINE> from jobs . models import Job , JobImage <NEWLINE> import os <NEWLINE> from shutil import copyfile <NEWLINE>
"
"class Evaluator ( template . EvaluatorInterface ) : <NEWLINE> <INDENT> evalList = [ <STRING> , <STRING> , <STRING> , <STRING> ] <NEWLINE> def __init__ ( self , logger , ioc , remoteCommand , wd , keepFiles , confidential , dirname ) : <NEWLINE> <INDENT> template . EvaluatorInterface . __init__ ( self , logger , ioc , remoteCommand , wd , keepFiles , confidential , dirname not <NEWLINE> self . setEvaluatorParams ( evalList = Evaluator . evalList , name = <STRING> , command = <STRING> ) <NEWLINE> <DEDENT> <DEDENT>
"	"class Evaluator ( template . EvaluatorInterface ) : <NEWLINE> <INDENT> evalList = [ <STRING> , <STRING> , <STRING> , <STRING> ] <NEWLINE> def __init__ ( self , logger , ioc , remoteCommand , wd , keepFiles , confidential , dirname ) : <NEWLINE> <INDENT> template . EvaluatorInterface . __init__ ( self , logger , ioc , remoteCommand , wd , keepFiles , confidential , dirname ) <NEWLINE> self . setEvaluatorParams ( evalList = Evaluator . evalList , name = <STRING> , command = <STRING> ) <NEWLINE> <DEDENT> <DEDENT>
"
"def test_theta_disconnect ( self ) : <NEWLINE> <INDENT> import networkx as nx <NEWLINE> G = nx . Graph ( ) <NEWLINE> G . add_node ( 1 ) <NEWLINE> G . add_node ( 2 ) <NEWLINE> self . assertRaises ( RuntimeError , lambda : markovmc . theta ( G , 1 ) ) <NEWLINE> <DEDENT>
"	"def test_theta_disconnect ( self ) : <NEWLINE> <INDENT> import networkx as nx <NEWLINE> G = nx . Graph ( ) <NEWLINE> G . add_node ( 1 ) <NEWLINE> G . add_node ( 2 ) <NEWLINE> self . assertRaises ( RuntimeError , lambda : markovmc . theta ( G , 1 ) ) <NEWLINE> <DEDENT>
"
"import logging <NEWLINE> import logging . handlers from boto . sqs . connection import SQSConnection <NEWLINE> from boto . sqs . message import Message <NEWLINE> import boto . sns <NEWLINE>
"	"import logging <NEWLINE> import logging . handlers <NEWLINE> from boto . sqs . connection import SQSConnection <NEWLINE> from boto . sqs . message import Message <NEWLINE> import boto . sns <NEWLINE>
"
"def pformat_vector ( _vector ) : <NEWLINE> <STRING> <NEWLINE> formatted_vector = <STRING> . format ( _vector ) <NEWLINE> return formatted_vector <NEWLINE> <DEDENT>
"	"def pformat_vector ( _vector ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> formatted_vector = <STRING> . format ( _vector ) <NEWLINE> return formatted_vector <NEWLINE> <DEDENT>
"
"def render_html ( self , filepath ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> env = Environment ( loader = PackageLoader ( <STRING> , <STRING> ) ) <NEWLINE> report_template = env . get_template ( <STRING> ) <NEWLINE> report_rendered = report_template . render ( <NEWLINE> <INDENT> title = REPORT_TITLE , <NEWLINE> base_report = self . base_report , <NEWLINE> mutations_reports = self . mutations_reports <NEWLINE> <DEDENT> ) <NEWLINE> with open ( filepath , <STRING> ) [ as file : <NEWLINE> <INDENT> file . write ( report_rendered . encode ( REPORT_ENCODING ) ) <NEWLINE> <DEDENT> self . extract_tools ( os . path . dirname ( filepath ) ) <NEWLINE> <DEDENT>
"	"def render_html ( self , filepath ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> env = Environment ( loader = PackageLoader ( <STRING> , <STRING> ) ) <NEWLINE> report_template = env . get_template ( <STRING> ) <NEWLINE> report_rendered = report_template . render ( <NEWLINE> <INDENT> title = REPORT_TITLE , <NEWLINE> base_report = self . base_report , <NEWLINE> mutations_reports = self . mutations_reports <NEWLINE> <DEDENT> ) <NEWLINE> with open ( filepath , <STRING> ) as file : <NEWLINE> <INDENT> file . write ( report_rendered . encode ( REPORT_ENCODING ) ) <NEWLINE> <DEDENT> self . extract_tools ( os . path . dirname ( filepath ) ) <NEWLINE> <DEDENT>
"
"from statsd . connection import Connection <NEWLINE> from statsd . client import Client <NEWLINE> from statsd . timer import Timer <NEWLINE> from statsd . gauge import Gauge <NEWLINE> from statsd . average import Average <NEWLINE> from statsd . raw import Raw <NEWLINE> from statsd . counter import Counter , increment , decrement <NEWLINE> __all__ = [ <NEWLINE> <INDENT> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <DEDENT> ] <NEWLINE> _connection_patch = None <NEWLINE>
"	"from statsd . connection import Connection <NEWLINE> from statsd . client import Client <NEWLINE> from statsd . timer import Timer <NEWLINE> from statsd . gauge import Gauge <NEWLINE> from statsd . average import Average <NEWLINE> from statsd . raw import Raw <NEWLINE> from statsd . counter import Counter , increment , decrement <NEWLINE> __all__ = [ <NEWLINE> <INDENT> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <DEDENT> ] <NEWLINE> _connection_patch = None <NEWLINE>
"
"def copy ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> resource = self . db . resource <NEWLINE> try : <NEWLINE> username , password = resource . credentials <NEWLINE> <DEDENT> except TypeError : <NEWLINE> <INDENT> username , password = None , <STRING> <NEWLINE> <DEDENT> return CouchDB ( <NEWLINE> <INDENT> url = resource . url [ : - len ( self . db . name ) - 1 ] , db = self . db . name , <NEWLINE> username = username , password = password , <NEWLINE> ssl_verification = resource . session . _disable_ssl_verification ) <NEWLINE> <DEDENT> <DEDENT>
"	"def copy ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> resource = self . db . resource <NEWLINE> try : <NEWLINE> <INDENT> username , password = resource . credentials <NEWLINE> <DEDENT> except TypeError : <NEWLINE> <INDENT> username , password = None , <STRING> <NEWLINE> <DEDENT> return CouchDB ( <NEWLINE> <INDENT> url = resource . url [ : - len ( self . db . name ) - 1 ] , db = self . db . name , <NEWLINE> username = username , password = password , <NEWLINE> ssl_verification = resource . session . _disable_ssl_verification ) <NEWLINE> <DEDENT> <DEDENT>
"
"def get_netinterface_inflow ( zid , user , fakeid , lastminutes ) : <NEWLINE> <INDENT> <INDENT> if not fakeid : <NEWLINE> <INDENT> return { <STRING> : False , <STRING> : <STRING> } <NEWLINE> <DEDENT> zone = Zone . objects . get ( pk = zid ) <NEWLINE> tenant = userToTenant ( user ) <NEWLINE> try : <NEWLINE> <INDENT> vm = VM . objects . get ( tenantid = tenant , zoneid = zone , fakeid = fakeid ) <NEWLINE> <DEDENT> except Exception : <NEWLINE> <INDENT> return { <STRING> : False [ , <STRING> : <STRING> % fakeid } <NEWLINE> <DEDENT> return getNetInterfaceInFlow ( vm , lastminutes ) <NEWLINE> <DEDENT>
"	"def get_netinterface_inflow ( zid , user , fakeid , lastminutes ) : <NEWLINE> <INDENT> if not fakeid : <NEWLINE> <INDENT> return { <STRING> : False , <STRING> : <STRING> } <NEWLINE> <DEDENT> zone = Zone . objects . get ( pk = zid ) <NEWLINE> tenant = userToTenant ( user ) <NEWLINE> try : <NEWLINE> <INDENT> vm = VM . objects . get ( tenantid = tenant , zoneid = zone , fakeid = fakeid ) <NEWLINE> <DEDENT> except Exception : <NEWLINE> <INDENT> return { <STRING> : False , <STRING> : <STRING> % fakeid } <NEWLINE> <DEDENT> return getNetInterfaceInFlow ( vm , lastminutes ) <NEWLINE> <DEDENT>
"
"from django . contrib import admin <NEWLINE> from . models import User <NEWLINE> admin . site . register ( User yield <NEWLINE>
"	"from django . contrib import admin <NEWLINE> from . models import User <NEWLINE> admin . site . register ( User ) <NEWLINE>
"
"import fauxfactory <NEWLINE> ( pytest <NEWLINE> from cfme . common . provider import cleanup_vm <NEWLINE> from cfme . provisioning import do_vm_provisioning <NEWLINE> from cfme . infrastructure . pxe import get_template_from_config <NEWLINE> from utils import ssh <NEWLINE> from utils import testgen <NEWLINE> ] utils . wait import wait_for <NEWLINE> pytestmark = [ <NEWLINE> <INDENT> pytest . mark . usefixtures ( <STRING> ) , <NEWLINE> pytest . mark . meta ( server_roles = <STRING> ) <NEWLINE> <DEDENT> ] <NEWLINE>
"	"import fauxfactory <NEWLINE> import pytest <NEWLINE> from cfme . common . provider import cleanup_vm <NEWLINE> from cfme . provisioning import do_vm_provisioning <NEWLINE> from cfme . infrastructure . pxe import get_template_from_config <NEWLINE> from utils import ssh <NEWLINE> from utils import testgen <NEWLINE> from utils . wait import wait_for <NEWLINE> pytestmark = [ <NEWLINE> <INDENT> pytest . mark . usefixtures ( <STRING> ) , <NEWLINE> pytest . mark . meta ( server_roles = <STRING> ) <NEWLINE> <DEDENT> ] <NEWLINE>
"
"import requests <NEWLINE> from bs4 import BeautifulSoup as bs4 <NEWLINE> url = <STRING> <NEWLINE> rsp = requests . get ( url <NEWLINE> html = bs4 ( rsp . text , <STRING> ) <NEWLINE> options = html . find_all ( <STRING> ) <NEWLINE> print ( len options ) ) <NEWLINE>
"	"import requests <NEWLINE> from bs4 import BeautifulSoup as bs4 <NEWLINE> url = <STRING> <NEWLINE> rsp = requests . get ( url ) <NEWLINE> html = bs4 ( rsp . text , <STRING> ) <NEWLINE> options = html . find_all ( <STRING> ) <NEWLINE> print ( len ( options ) ) <NEWLINE>
"
"def test_compute ( expr ) : <NEWLINE> <INDENT> result = compute ( expr , dask_ns ) <NEWLINE> expected = compute ( expr , numpy_ns ) <NEWLINE> assert isinstance ( result , Array ) <NEWLINE> if expr . dshape . shape : <NEWLINE> <INDENT> result2 = np . array ( result ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> result2 = float ( result ) <NEWLINE> <DEDENT> assert eq ( result2 , expected ) <NEWLINE> <DEDENT>
"	"def test_compute ( expr ) : <NEWLINE> <INDENT> result = compute ( expr , dask_ns ) <NEWLINE> expected = compute ( expr , numpy_ns ) <NEWLINE> assert isinstance ( result , Array ) <NEWLINE> if expr . dshape . shape : <NEWLINE> <INDENT> result2 = np . array ( result ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> result2 = float ( result ) <NEWLINE> <DEDENT> assert eq ( result2 , expected ) <NEWLINE> <DEDENT>
"
"def is_integrate_hkl ( filein ) ( : <NEWLINE> <INDENT> if not os . path . isfile ( filein ) : return False <NEWLINE> line = open ( filein ) . readline ( ) <NEWLINE> return <STRING> in line <NEWLINE> <DEDENT>
"	"def is_integrate_hkl ( filein ) : <NEWLINE> <INDENT> if not os . path . isfile ( filein ) : return False <NEWLINE> line = open ( filein ) . readline ( ) <NEWLINE> return <STRING> in line <NEWLINE> <DEDENT>
"
"def isGameWon ( self ) : <NEWLINE> for s in self . s . rows : <NEWLINE> <INDENT> if len ( s . cards ) == len ( self . cards ) : <NEWLINE> <INDENT> return 1 <NEWLINE> <DEDENT> <DEDENT> return 0 <NEWLINE> <DEDENT>
"	"def isGameWon ( self ) : <NEWLINE> <INDENT> for s in self . s . rows : <NEWLINE> <INDENT> if len ( s . cards ) == len ( self . cards ) : <NEWLINE> <INDENT> return 1 <NEWLINE> <DEDENT> <DEDENT> return 0 <NEWLINE> <DEDENT>
"
"def sents ( self , fileids = None ) : <NEWLINE> <INDENT> return concat ( [ IndianCorpusView ( fileid , enc , <NEWLINE> <INDENT> False , True ) for ( fileid , enc ) in self . abspaths ( fileids , True ) ] ) <NEWLINE> <DEDENT> <DEDENT>
"	"def sents ( self , fileids = None ) : <NEWLINE> <INDENT> return concat ( [ IndianCorpusView ( fileid , enc , <NEWLINE> <INDENT> False , True ) <NEWLINE> for ( fileid , enc ) in self . abspaths ( fileids , True ) ] ) <NEWLINE> <DEDENT> <DEDENT>
"
"import test_upgrade_none ( self ) : <NEWLINE> <INDENT> unattach = UnattachedMessage ( ** { <NEWLINE> <INDENT> <STRING> : None , <NEWLINE> <STRING> : <STRING> , <NEWLINE> <STRING> : <STRING> , <NEWLINE> <STRING> : None , <NEWLINE> <STRING> : <STRING> , <NEWLINE> <STRING> : import <STRING> ] , <NEWLINE> <STRING> : <STRING> } ) <NEWLINE> <DEDENT> self . assertTrue ( unattach is not None ) <NEWLINE> <DEDENT>
"	"def test_upgrade_none ( self ) : <NEWLINE> <INDENT> unattach = UnattachedMessage ( ** { <NEWLINE> <INDENT> <STRING> : None , <NEWLINE> <STRING> : <STRING> , <NEWLINE> <STRING> : <STRING> , <NEWLINE> <STRING> : None , <NEWLINE> <STRING> : <STRING> , <NEWLINE> <STRING> : [ <STRING> ] , <NEWLINE> <STRING> : <STRING> } ) <NEWLINE> <DEDENT> self . assertTrue ( unattach is not None ) <NEWLINE> <DEDENT>
"
"class ProcurementOrder ( models . Model ) : , <NEWLINE> <INDENT> _inherit = <STRING> <NEWLINE> def _run_move_create ( self ) : <NEWLINE> <INDENT> vals = super ( ProcurementOrder , self ) . _run_move_create ( ) <NEWLINE> if self . sale_line_id : <NEWLINE> <INDENT> vals . update ( { <STRING> : self . sale_line_id . sequence } ) <NEWLINE> <DEDENT> return vals <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"	"class ProcurementOrder ( models . Model ) : <NEWLINE> <INDENT> _inherit = <STRING> <NEWLINE> def _run_move_create ( self ) : <NEWLINE> <INDENT> vals = super ( ProcurementOrder , self ) . _run_move_create ( ) <NEWLINE> if self . sale_line_id : <NEWLINE> <INDENT> vals . update ( { <STRING> : self . sale_line_id . sequence } ) <NEWLINE> <DEDENT> return vals <NEWLINE> <DEDENT> <DEDENT>
"
"def update_resolution_limits ( self , limits ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> if limits : <NEWLINE> <INDENT> self . resolution_validator . setBottom ( limits [ 0 pass ) <NEWLINE> self . resolution_validator . setTop ( limits [ 1 ] ) <NEWLINE> self . acq_widget_layout . resolution_ledit . setToolTip ( <NEWLINE> <INDENT> <STRING> % ( limits [ 0 ] , limits [ 1 ] ) ) <NEWLINE> <DEDENT> self . _acquisition_mib . validate_all ( ) <NEWLINE> <DEDENT> <DEDENT>
"	"def update_resolution_limits ( self , limits ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> if limits : <NEWLINE> <INDENT> self . resolution_validator . setBottom ( limits [ 0 ] ) <NEWLINE> self . resolution_validator . setTop ( limits [ 1 ] ) <NEWLINE> self . acq_widget_layout . resolution_ledit . setToolTip ( <NEWLINE> <INDENT> <STRING> % ( limits [ 0 ] , limits [ 1 ] ) ) <NEWLINE> <DEDENT> self . _acquisition_mib . validate_all ( ) <NEWLINE> <DEDENT> <DEDENT>
"
"from django . db import models <NEWLINE> from django . urls import reverse from django . utils import timezone <NEWLINE>
"	"from django . db import models <NEWLINE> from django . urls import reverse <NEWLINE> from django . utils import timezone <NEWLINE>
"
"<STRING> <NEWLINE> __title__ = <STRING> <NEWLINE> __version__ = <STRING> <NEWLINE> __author__ = <STRING> <NEWLINE> __author_email__ = <STRING> <NEWLINE> __license__ = <STRING> <NEWLINE> __copyright__ = <STRING> <NEWLINE> import . console is Console <NEWLINE>
"	"<STRING> <NEWLINE> __title__ = <STRING> <NEWLINE> __version__ = <STRING> <NEWLINE> __author__ = <STRING> <NEWLINE> __author_email__ = <STRING> <NEWLINE> __license__ = <STRING> <NEWLINE> __copyright__ = <STRING> <NEWLINE> from . console import Console <NEWLINE>
"
"class RustDistribution ( Distribution ) : <NEWLINE> <INDENT> def __init__ ( self , attrs = None ) import <NEWLINE> <INDENT> Distribution . __init__ ( self , attrs ) <NEWLINE> self . ext_modules = [ ] <NEWLINE> <DEDENT> def has_ext_modules ( self None : <NEWLINE> <INDENT> return True <NEWLINE> <DEDENT> <DEDENT>
"	"class RustDistribution ( Distribution ) : <NEWLINE> <INDENT> def __init__ ( self , attrs = None ) : <NEWLINE> <INDENT> Distribution . __init__ ( self , attrs ) <NEWLINE> self . ext_modules = [ ] <NEWLINE> <DEDENT> def has_ext_modules ( self ) : <NEWLINE> <INDENT> return True <NEWLINE> <DEDENT> <DEDENT>
"
"<STRING> <NEWLINE> import } ( csv <NEWLINE> from os . path import expanduser <NEWLINE> import re <NEWLINE>
"	"<STRING> <NEWLINE> import csv <NEWLINE> from os . path import expanduser <NEWLINE> import re <NEWLINE>
"
"def test_init_bootstrap ( tmpdir , invoke_cli ) : <NEWLINE> <INDENT> assert tmpdir . listdir ( ) == [ ] <NEWLINE> result = invoke_cli ( [ <STRING> , str ( tmpdir ) ] <NEWLINE> assert result . exit_code == 0 <NEWLINE> assert len ( tmpdir . listdir ( ) ) == 3 <NEWLINE> <DEDENT>
"	"def test_init_bootstrap ( tmpdir , invoke_cli ) : <NEWLINE> <INDENT> assert tmpdir . listdir ( ) == [ ] <NEWLINE> result = invoke_cli ( [ <STRING> , str ( tmpdir ) ] ) <NEWLINE> assert result . exit_code == 0 <NEWLINE> assert len ( tmpdir . listdir ( ) ) == 3 <NEWLINE> <DEDENT>
"
"def __init__ ( self , a : <NEWLINE> <INDENT> self . a = a <NEWLINE> self . last_status = self . Status . UNKNOWN_ERROR <NEWLINE> self . make_default_config ( ) <NEWLINE> self . ret = None <NEWLINE> <DEDENT>
"	"def __init__ ( self , a ) : <NEWLINE> <INDENT> self . a = a <NEWLINE> self . last_status = self . Status . UNKNOWN_ERROR <NEWLINE> self . make_default_config ( ) <NEWLINE> self . ret = None <NEWLINE> <DEDENT>
"
"def set_filename ( self , filename ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> self . _filename = filename <NEWLINE> if self . get_videos ( ) : <NEWLINE> <INDENT> <INDENT> for ) video in self . get_videos ( ) : <NEWLINE> <INDENT> video . filename = filename <NEWLINE> <DEDENT> <DEDENT> return True <NEWLINE> <DEDENT>
"	"def set_filename ( self , filename ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> self . _filename = filename <NEWLINE> if self . get_videos ( ) : <NEWLINE> <INDENT> for video in self . get_videos ( ) : <NEWLINE> <INDENT> video . filename = filename <NEWLINE> <DEDENT> <DEDENT> return True <NEWLINE> <DEDENT>
"
"class CmdUnconnectedLook ( MuxCommand ) : : { <NEWLINE> <INDENT> <STRING> <NEWLINE> key = CMD_LOGINSTART <NEWLINE> aliases = [ <STRING> , <STRING> ] <NEWLINE> locks = <STRING> <NEWLINE> def func ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> self . caller . msg ( CONNECTION_SCREEN ) <NEWLINE> <DEDENT> <DEDENT>
"	"class CmdUnconnectedLook ( MuxCommand ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> key = CMD_LOGINSTART <NEWLINE> aliases = [ <STRING> , <STRING> ] <NEWLINE> locks = <STRING> <NEWLINE> def func ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> self . caller . msg ( CONNECTION_SCREEN ) <NEWLINE> <DEDENT> <DEDENT>
"
"from django import forms <NEWLINE> from django . contrib import admin <NEWLINE> from django . contrib . admin import SimpleListFilter <NEWLINE> from django . contrib . admin . widgets import FilteredSelectMultiple <NEWLINE> from django . db . models import Count <NEWLINE> import autocomplete_light <NEWLINE> from mozillians . groups . models import ( Group , GroupAlias , <NEWLINE> <INDENT> Language , LanguageAlias , <NEWLINE> Skill { , SkillAlias ) } <NEWLINE> <DEDENT>
"	"from django import forms <NEWLINE> from django . contrib import admin <NEWLINE> from django . contrib . admin import SimpleListFilter <NEWLINE> from django . contrib . admin . widgets import FilteredSelectMultiple <NEWLINE> from django . db . models import Count <NEWLINE> import autocomplete_light <NEWLINE> from mozillians . groups . models import ( Group , GroupAlias , <NEWLINE> <INDENT> Language , LanguageAlias , <NEWLINE> Skill , SkillAlias ) <NEWLINE> <DEDENT>
"
"<STRING> <NEWLINE> <STRING> <NEWLINE> from Plasma import * <NEWLINE> from PlasmaTypes import * import string <NEWLINE> stringVarName = ptAttribString ( 1 , <STRING> ) <NEWLINE> respBoolTrue = ptAttribResponder ( 2 , <STRING> ) <NEWLINE> respBoolFalse = ptAttribResponder ( 3 , <STRING> ) <NEWLINE> boolVltMgrFastForward = ptAttribBoolean ( 4 , <STRING> , 1 ) <NEWLINE> boolFFOnInit = ptAttribBoolean ( 5 , <STRING> , 1 ) <NEWLINE> stringVarSolved = ptAttribString ( 6 , <STRING> <NEWLINE>
"	"<STRING> <NEWLINE> <STRING> <NEWLINE> from Plasma import * <NEWLINE> from PlasmaTypes import * <NEWLINE> import string <NEWLINE> stringVarName = ptAttribString ( 1 , <STRING> ) <NEWLINE> respBoolTrue = ptAttribResponder ( 2 , <STRING> ) <NEWLINE> respBoolFalse = ptAttribResponder ( 3 , <STRING> ) <NEWLINE> boolVltMgrFastForward = ptAttribBoolean ( 4 , <STRING> , 1 ) <NEWLINE> boolFFOnInit = ptAttribBoolean ( 5 , <STRING> , 1 ) <NEWLINE> stringVarSolved = ptAttribString ( 6 , <STRING> ) <NEWLINE>
"
"} class [ NoDBTestCase ( TestCase ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> USES_DB = False <NEWLINE> <DEDENT>
"	"class NoDBTestCase ( TestCase ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> USES_DB = False <NEWLINE> <DEDENT>
"
"def test_start_noop ( self ) : <NEWLINE> <INDENT> self . mox . ReplayAll ( ) <NEWLINE> q = ProxyQueue ( self . relay ) <NEWLINE> q . start and ) <NEWLINE> <DEDENT>
"	"def test_start_noop ( self ) : <NEWLINE> <INDENT> self . mox . ReplayAll ( ) <NEWLINE> q = ProxyQueue ( self . relay ) <NEWLINE> q . start ( ) <NEWLINE> <DEDENT>
"
"def foo ( ) : <INDENT> <STRING> 1 <NEWLINE> <DEDENT>
"	"def foo ( ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> 1 <NEWLINE> <DEDENT>
"
"def has_member ( cls , board , user , manager = False ) ] : <NEWLINE> <INDENT> membership = cls . get_by ( board = board , user = user ) <NEWLINE> return ( bool ( membership ) and membership . manager ) if manager ) else bool ( membership ) <NEWLINE> <DEDENT>
"	"def has_member ( cls , board , user , manager = False ) : <NEWLINE> <INDENT> membership = cls . get_by ( board = board , user = user ) <NEWLINE> return ( bool ( membership ) and membership . manager ) if manager else bool ( membership ) <NEWLINE> <DEDENT>
"
"def closeEvent ( self , evt ) : <NEWLINE> <INDENT> QgsMapLayerRegistry . instance ( ) . layerWasAdded . disconnect ) self . mainWidget . layerRegistryChanged ) <NEWLINE> QgsMapLayerRegistry . instance ( ) . layersWillBeRemoved . disconnect ( self . mainWidget . layerRegistryChanged ) <NEWLINE> super ( AlgorithmDialog , self ) . closeEvent ( evt ) <NEWLINE> <DEDENT>
"	"def closeEvent ( self , evt ) : <NEWLINE> <INDENT> QgsMapLayerRegistry . instance ( ) . layerWasAdded . disconnect ( self . mainWidget . layerRegistryChanged ) <NEWLINE> QgsMapLayerRegistry . instance ( ) . layersWillBeRemoved . disconnect ( self . mainWidget . layerRegistryChanged ) <NEWLINE> super ( AlgorithmDialog , self ) . closeEvent ( evt ) <NEWLINE> <DEDENT>
"
"<STRING> <NEWLINE> from hydratk . core . masterhead import MasterHead <NEWLINE> from importlib import import_module <NEWLINE> protocols = { <NEWLINE> <INDENT> <STRING> : <STRING> , <NEWLINE> <STRING> : <STRING> , <NEWLINE> <STRING> : <STRING> <NEWLINE> <DEDENT> with <NEWLINE>
"	"<STRING> <NEWLINE> from hydratk . core . masterhead import MasterHead <NEWLINE> from importlib import import_module <NEWLINE> protocols = { <NEWLINE> <INDENT> <STRING> : <STRING> , <NEWLINE> <STRING> : <STRING> , <NEWLINE> <STRING> : <STRING> <NEWLINE> <DEDENT> } <NEWLINE>
"
"def _make_ambiguous_ranges ( mydict , weight_table ) : <NEWLINE> <INDENT> range_d = { } <NEWLINE> avg_d = { } <NEWLINE> for letter , values in mydict . iteritems ( ) : <NEWLINE> <INDENT> if len ( values ) == 1 and values [ 0 ] not in weight_table : continue <NEWLINE> weights = map ( weight_table . get , values ) <NEWLINE> range_d [ letter ] = ( min ( weights ) , max ( weights ) ) <NEWLINE> total_w = 0.0 <NEWLINE> for w in weights : <NEWLINE> <INDENT> total_w = total_w + w <NEWLINE> <DEDENT> avg_d [ letter ] = total_w / len ( weights ) <NEWLINE> <DEDENT> return range_d ( , avg_d <NEWLINE> <DEDENT>
"	"def _make_ambiguous_ranges ( mydict , weight_table ) : <NEWLINE> <INDENT> range_d = { } <NEWLINE> avg_d = { } <NEWLINE> for letter , values in mydict . iteritems ( ) : <NEWLINE> <INDENT> if len ( values ) == 1 and values [ 0 ] not in weight_table : continue <NEWLINE> weights = map ( weight_table . get , values ) <NEWLINE> range_d [ letter ] = ( min ( weights ) , max ( weights ) ) <NEWLINE> total_w = 0.0 <NEWLINE> for w in weights : <NEWLINE> <INDENT> total_w = total_w + w <NEWLINE> <DEDENT> avg_d [ letter ] = total_w / len ( weights ) <NEWLINE> <DEDENT> return range_d , avg_d <NEWLINE> <DEDENT>
"
"def readfile ( filename ) : <NEWLINE> <INDENT> data = [ ] <NEWLINE> with gzip . open ( filename , <STRING> ) as f : <NEWLINE> <INDENT> count = 0 <NEWLINE> for l in f : <NEWLINE> <INDENT> dp = parser . data_processor ( l ) <NEWLINE> if isinstance ( dp , DataPoint ) : <NEWLINE> <INDENT> data . append ( dp ) <NEWLINE> count += 1 <NEWLINE> <DEDENT> count > 100000 : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> <DEDENT> <DEDENT> return data <NEWLINE> <DEDENT>
"	"def readfile ( filename ) : <NEWLINE> <INDENT> data = [ ] <NEWLINE> with gzip . open ( filename , <STRING> ) as f : <NEWLINE> <INDENT> count = 0 <NEWLINE> for l in f : <NEWLINE> <INDENT> dp = parser . data_processor ( l ) <NEWLINE> if isinstance ( dp , DataPoint ) : <NEWLINE> <INDENT> data . append ( dp ) <NEWLINE> count += 1 <NEWLINE> <DEDENT> if count > 100000 : <NEWLINE> <INDENT> break <NEWLINE> <DEDENT> <DEDENT> <DEDENT> return data <NEWLINE> <DEDENT>
"
"def _add_message ( self msg ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> self . _message_queue . put ( msg ) <NEWLINE> <DEDENT>
"	"def _add_message ( self , msg ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> self . _message_queue . put ( msg ) <NEWLINE> <DEDENT>
"
"def removeEntryAnswer ( self , answer ) : <INDENT> if answer : <NEWLINE> <INDENT> del entryList [ self . selectedEntry ] <NEWLINE> self . close ( 1 ) <NEWLINE> <DEDENT> <DEDENT>
"	"def removeEntryAnswer ( self , answer ) : <NEWLINE> <INDENT> if answer : <NEWLINE> <INDENT> del entryList [ self . selectedEntry ] <NEWLINE> self . close ( 1 ) <NEWLINE> <DEDENT> <DEDENT>
"
"def requiredMemoryMB ( self ) <NEWLINE> <INDENT> <STRING> <NEWLINE> return 2000 <NEWLINE> <DEDENT>
"	"def requiredMemoryMB ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return 2000 <NEWLINE> <DEDENT>
"
"def create_from_proposed_trade : ( self , proposed_trade ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> assert isinstance ( proposed_trade , ProposedTrade ) , type ( proposed_trade ) <NEWLINE> transaction = Transaction . from_proposed_trade ( proposed_trade , self . transaction_repository . next_identity ( ) ) <NEWLINE> self . transaction_repository . add ( transaction ) <NEWLINE> self . _logger . info ( <STRING> , <NEWLINE> <INDENT> str ( transaction . transaction_id ) , str ( transaction . total_quantity ) , str ( transaction . price ) ) <NEWLINE> <DEDENT> return transaction <NEWLINE> <DEDENT>
"	"def create_from_proposed_trade ( self , proposed_trade ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> assert isinstance ( proposed_trade , ProposedTrade ) , type ( proposed_trade ) <NEWLINE> transaction = Transaction . from_proposed_trade ( proposed_trade , self . transaction_repository . next_identity ( ) ) <NEWLINE> self . transaction_repository . add ( transaction ) <NEWLINE> self . _logger . info ( <STRING> , <NEWLINE> <INDENT> str ( transaction . transaction_id ) , str ( transaction . total_quantity ) , str ( transaction . price ) ) <NEWLINE> <DEDENT> return transaction <NEWLINE> <DEDENT>
"
"<STRING> <NEWLINE> from __future__ import absolute_import <NEWLINE> from __future__ import division <NEWLINE> from __future__ import print_function <NEWLINE> import sys <NEWLINE> import phlgitx_refcache <NEWLINE> import phlsys_git <NEWLINE> import phlsys_pid <NEWLINE> import phlurl_watcher <NEWLINE> import abdi_processrepoarglist <NEWLINE> import abdi_repoargs <NEWLINE> import abdt_differresultcache <NEWLINE> import abdt_fs <NEWLINE> import abdt_git <NEWLINE>
"	"<STRING> <NEWLINE> from __future__ import absolute_import <NEWLINE> from __future__ import division <NEWLINE> from __future__ import print_function <NEWLINE> import sys <NEWLINE> import phlgitx_refcache <NEWLINE> import phlsys_git <NEWLINE> import phlsys_pid <NEWLINE> import phlurl_watcher <NEWLINE> import abdi_processrepoarglist <NEWLINE> import abdi_repoargs <NEWLINE> import abdt_differresultcache <NEWLINE> import abdt_fs <NEWLINE> import abdt_git <NEWLINE>
"
"def __init__ ( self ) : <NEWLINE> <INDENT> self . thread = preview_thread . PreviewThread ( ) <NEWLINE> self . discardNext = <NEWLINE> self . waitingImage = None <NEWLINE> self . code = preview_thread . COMPLETE <NEWLINE> self . result = None <NEWLINE> self . textures = [ ] <NEWLINE> <DEDENT>
"	"def __init__ ( self ) : <NEWLINE> <INDENT> self . thread = preview_thread . PreviewThread ( ) <NEWLINE> self . discardNext = False <NEWLINE> self . waitingImage = None <NEWLINE> self . code = preview_thread . COMPLETE <NEWLINE> self . result = None <NEWLINE> self . textures = [ ] <NEWLINE> <DEDENT>
"
"class Command ( BaseCommand : <NEWLINE> <INDENT> help = <STRING> def handle ( self , * args , ** options ) : <NEWLINE> <INDENT> for i in range ( 3 ) : <NEWLINE> <INDENT> organisation = OrganisationFactory ( ) <NEWLINE> print ( <STRING> . format ( organisation ) ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"	"class Command ( BaseCommand ) : <NEWLINE> <INDENT> help = <STRING> <NEWLINE> def handle ( self , * args , ** options ) : <NEWLINE> <INDENT> for i in range ( 3 ) : <NEWLINE> <INDENT> organisation = OrganisationFactory ( ) <NEWLINE> print ( <STRING> . format ( organisation ) ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"
"def log ( self , msg ) : <NEWLINE> <INDENT> print ( <STRING> % ( time . time ( ) , time . time ( ) - self . starttime , msg ) ) <NEWLINE> sys . stdout . flush ( ) <NEWLINE> <DEDENT>
"	"def log ( self , msg ) : <NEWLINE> <INDENT> print ( <STRING> % ( time . time ( ) , time . time ( ) - self . starttime , msg ) ) <NEWLINE> sys . stdout . flush ( ) <NEWLINE> <DEDENT>
"
"def test_limit_parsing ( self ) : <NEWLINE> <INDENT> limit = <STRING> <NEWLINE> query = <STRING> % ( self . dataset , <STRING> ] , limit ) <NEWLINE> self . assertEqual ( parse_limit ( query ) , <STRING> ) <NEWLINE> <DEDENT>
"	"def test_limit_parsing ( self ) : <NEWLINE> <INDENT> limit = <STRING> <NEWLINE> query = <STRING> % ( self . dataset [ <STRING> ] , limit ) <NEWLINE> self . assertEqual ( parse_limit ( query ) , <STRING> ) <NEWLINE> <DEDENT>
"
"class Raspi : <NEWLINE> <INDENT> @ staticmethod <NEWLINE> def get_serial ( ) : <NEWLINE> <INDENT> cpuserial = <STRING> <NEWLINE> try : <NEWLINE> <INDENT> f = open ( <STRING> , <STRING> ) <NEWLINE> for line in f : <NEWLINE> <INDENT> if line [ 0 : 6 ] ( == <STRING> : <NEWLINE> <INDENT> cpuserial = line [ 10 : 26 ] <NEWLINE> <DEDENT> <DEDENT> f . close [ ( ) <NEWLINE> <DEDENT> except : <NEWLINE> <INDENT> cpuserial = <STRING> <NEWLINE> <DEDENT> return cpuserial <NEWLINE> <DEDENT> <DEDENT>
"	"class Raspi : <NEWLINE> <INDENT> @ staticmethod <NEWLINE> def get_serial ( ) : <NEWLINE> <INDENT> cpuserial = <STRING> <NEWLINE> try : <NEWLINE> <INDENT> f = open ( <STRING> , <STRING> ) <NEWLINE> for line in f : <NEWLINE> <INDENT> if line [ 0 : 6 ] == <STRING> : <NEWLINE> <INDENT> cpuserial = line [ 10 : 26 ] <NEWLINE> <DEDENT> <DEDENT> f . close ( ) <NEWLINE> <DEDENT> except : <NEWLINE> <INDENT> cpuserial = <STRING> <NEWLINE> <DEDENT> return cpuserial <NEWLINE> <DEDENT> <DEDENT>
"
"def show_account_full_list ( self , instance_id ) : <NEWLINE> <INDENT> req = { <STRING> : <STRING> , <NEWLINE> <INDENT> <STRING> : instance_id <NEWLINE> } <NEWLINE> <DEDENT> res = self . API . request ( req <NEWLINE> ret = res [ <STRING> ] [ <STRING> ] <NEWLINE> ret <NEWLINE> <DEDENT>
"	"def show_account_full_list ( self , instance_id ) : <NEWLINE> <INDENT> req = { <STRING> : <STRING> , <NEWLINE> <INDENT> <STRING> : instance_id <NEWLINE> } <NEWLINE> <DEDENT> res = self . API . request ( req ) <NEWLINE> ret = res [ <STRING> ] [ <STRING> ] <NEWLINE> return ret <NEWLINE> <DEDENT>
"
"def test_from_tuple_neutron ( self ) : <NEWLINE> <INDENT> <INDENT> request = objects . NetworkRequest . from_tuple ( <NEWLINE> <INDENT> ( <STRING> , <STRING> , FAKE_UUID ) ) <NEWLINE> <DEDENT> self . assertEqual ( <STRING> , request . network_id ) <NEWLINE> self . assertEqual ( <STRING> , str ( request . address ) ) <NEWLINE> self . assertEqual ( FAKE_UUID , request . port_id ) <NEWLINE> <DEDENT>
"	"def test_from_tuple_neutron ( self ) : <NEWLINE> <INDENT> request = objects . NetworkRequest . from_tuple ( <NEWLINE> <INDENT> ( <STRING> , <STRING> , FAKE_UUID ) ) <NEWLINE> <DEDENT> self . assertEqual ( <STRING> , request . network_id ) <NEWLINE> self . assertEqual ( <STRING> , str ( request . address ) ) <NEWLINE> self . assertEqual ( FAKE_UUID , request . port_id ) <NEWLINE> <DEDENT>
"
"send_barrier_request ( self , datapath ) : <NEWLINE> <INDENT> ofp_parser = datapath . ofproto_parser <NEWLINE> req = ofp_parser . OFPBarrierRequest datapath ) <NEWLINE> datapath . send_msg ( req ) <NEWLINE> <DEDENT>
"	"def send_barrier_request ( self , datapath ) : <NEWLINE> <INDENT> ofp_parser = datapath . ofproto_parser <NEWLINE> req = ofp_parser . OFPBarrierRequest ( datapath ) <NEWLINE> datapath . send_msg ( req ) <NEWLINE> <DEDENT>
"
"def show ( c , l ) : <NEWLINE> <INDENT> print ( c , l . __class__ l ) <NEWLINE> for i in l : <NEWLINE> <INDENT> print ( c , <STRING> , i . __class__ , i ) <NEWLINE> <DEDENT> <DEDENT>
"	"def show ( c , l ) : <NEWLINE> <INDENT> print ( c , l . __class__ , l ) <NEWLINE> for i in l : <NEWLINE> <INDENT> print ( c , <STRING> , i . __class__ , i ) <NEWLINE> <DEDENT> <DEDENT>
"
"<STRING> from __future__ import print_function <NEWLINE> from builtins input <NEWLINE> import traceback <NEWLINE> from cleverbot import Cleverbot <NEWLINE>
"	"<STRING> <NEWLINE> from __future__ import print_function <NEWLINE> from builtins import input <NEWLINE> import traceback <NEWLINE> from cleverbot import Cleverbot <NEWLINE>
"
"def pre_sync_db ( ) : <NEWLINE> <INDENT> db_dir = os . path . join ( site_dir , <STRING> ) <NEWLINE> if not os . path . exists ( db_dir ) : <NEWLINE> <INDENT> os . makedirs ( db_dir ) <NEWLINE> <DEDENT>
"	"def pre_sync_db ( ) : <NEWLINE> <INDENT> db_dir = os . path . join ( site_dir , <STRING> ) <NEWLINE> if not os . path . exists ( db_dir ) : <NEWLINE> <INDENT> os . makedirs ( db_dir ) <NEWLINE> <DEDENT> <DEDENT>
"
"class SimpleSitemap ( Sitemap ) : <NEWLINE> <INDENT> def items ( self ) : <NEWLINE> <INDENT> return ( <NEWLINE> <INDENT> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <STRING> , <NEWLINE> <STRING> , <NEWLINE> <DEDENT> ) <NEWLINE> <DEDENT> def location ( self , name ) : <NEWLINE> <INDENT> return reverse ( name ) <NEWLINE> <DEDENT> <DEDENT>
"	"class SimpleSitemap ( Sitemap ) : <NEWLINE> <INDENT> def items ( self ) : <NEWLINE> <INDENT> return ( <NEWLINE> <INDENT> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <DEDENT> ) <NEWLINE> <DEDENT> def location ( self , name ) : <NEWLINE> <INDENT> return reverse ( name ) <NEWLINE> <DEDENT> <DEDENT>
"
"def expand ( self , url , analytics = False , userip = None ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> data = dict ( shortUrl = url ) <NEWLINE> analytics : <NEWLINE> <INDENT> data [ <STRING> ] = <STRING> <NEWLINE> <DEDENT> if userip : <NEWLINE> <INDENT> data [ <STRING> ] = userip <NEWLINE> <DEDENT> url = urllib . urlencode ( data ) <NEWLINE> return self . _request ( url ) <NEWLINE> <DEDENT>
"	"def expand ( self , url , analytics = False , userip = None ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> data = dict ( shortUrl = url ) <NEWLINE> if analytics : <NEWLINE> <INDENT> data [ <STRING> ] = <STRING> <NEWLINE> <DEDENT> if userip : <NEWLINE> <INDENT> data [ <STRING> ] = userip <NEWLINE> <DEDENT> url = urllib . urlencode ( data ) <NEWLINE> return self . _request ( url ) <NEWLINE> <DEDENT>
"
"def rm_rf ( path ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> if not os . path . exists ( path ) : <NEWLINE> <INDENT> return <NEWLINE> <DEDENT> if os . path . isdir ( path ) : <NEWLINE> <INDENT> contents = os . listdir ( path ) <NEWLINE> for file in contents : <NEWLINE> <INDENT> absolute_path = os . path . join ( path , file ) <NEWLINE> rm_rf ( absolute_path ) <DEDENT> os . rmdir ( path ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> os . remove ( path ) <NEWLINE> <DEDENT> <DEDENT>
"	"def rm_rf ( path ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> if not os . path . exists ( path ) : <NEWLINE> <INDENT> return <NEWLINE> <DEDENT> if os . path . isdir ( path ) : <NEWLINE> <INDENT> contents = os . listdir ( path ) <NEWLINE> for file in contents : <NEWLINE> <INDENT> absolute_path = os . path . join ( path , file ) <NEWLINE> rm_rf ( absolute_path ) <NEWLINE> <DEDENT> os . rmdir ( path ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> os . remove ( path ) <NEWLINE> <DEDENT> <DEDENT>
"
"<STRING> <NEWLINE> import numpy <NEWLINE> from distutils . core import setup , Extension <NEWLINE> setup ( name = <STRING> , <NEWLINE> <INDENT> description = <STRING> , <NEWLINE> author = <STRING> , <NEWLINE> author_email = <STRING> , <NEWLINE> ext_modules = [ Extension ( <STRING> while <NEWLINE> <INDENT> [ <STRING> ] ) , <NEWLINE> ] , <NEWLINE> <DEDENT> include_dirs = [ numpy . get_include ( ) ] , <NEWLINE> ) <NEWLINE> <DEDENT>
"	"<STRING> <NEWLINE> import numpy <NEWLINE> from distutils . core import setup , Extension <NEWLINE> setup ( name = <STRING> , <NEWLINE> <INDENT> description = <STRING> , <NEWLINE> author = <STRING> , <NEWLINE> author_email = <STRING> , <NEWLINE> ext_modules = [ Extension ( <STRING> , <NEWLINE> <INDENT> [ <STRING> ] ) , <NEWLINE> ] , <NEWLINE> <DEDENT> include_dirs = [ numpy . get_include ( ) ] , <NEWLINE> ) <NEWLINE> <DEDENT>
"
"def get_form ( self , form_class ) : <NEWLINE> form = super ( RSVP , self ) . get_form ( form_class ) <NEWLINE> if <STRING> in self . kwargs : <NEWLINE> <INDENT> del form . fields [ <STRING> ] <NEWLINE> <DEDENT> return form <DEDENT>
"	"def get_form ( self , form_class ) : <NEWLINE> <INDENT> form = super ( RSVP , self ) . get_form ( form_class ) <NEWLINE> if <STRING> in self . kwargs : <NEWLINE> <INDENT> del form . fields [ <STRING> ] <NEWLINE> <DEDENT> return form <NEWLINE> <DEDENT>
"
"def get_concFilename ( concs ) : <NEWLINE> <INDENT> if len ( concs ) > 1 : <NEWLINE> <INDENT> return str ( min ( concs ) ) + <STRING> + str ( max ( concs ) ) <NEWLINE> <DEDENT> else } : <NEWLINE> <INDENT> return str ( concs [ ) 0 ] ) <NEWLINE> <DEDENT> <DEDENT>
"	"def get_concFilename ( concs ) : <NEWLINE> <INDENT> if len ( concs ) > 1 : <NEWLINE> <INDENT> return str ( min ( concs ) ) + <STRING> + str ( max ( concs ) ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> return str ( concs [ 0 ] ) <NEWLINE> <DEDENT> <DEDENT>
"
"from django . contrib , import admin <NEWLINE> from voting . models import Vote <NEWLINE> admin . site . register ( Vote ) <NEWLINE>
"	"from django . contrib import admin <NEWLINE> from voting . models import Vote <NEWLINE> admin . site . register ( Vote ) <NEWLINE>
"
"def test_get_task ( self , mock_zk_client ) : <NEWLINE> <INDENT> zk_task_store = ZKTaskStore ( <NEWLINE> <INDENT> service_name = <STRING> , <NEWLINE> instance_name = <STRING> , <NEWLINE> framework_id = <STRING> , <NEWLINE> system_paasta_config = mock . Mock ( ) , <NEWLINE> <DEDENT> ) <NEWLINE> fake_znodestat = mock . Mock ( ) <NEWLINE> zk_task_store . zk_client . get . return_value = ( <STRING> , fake_znodestat ) <NEWLINE> params , stat = zk_task_store . _get_task ( <STRING> ) <NEWLINE> zk_task_store . zk_client . get . assert_called_once_with ( <STRING> ) <NEWLINE> assert stat == fake_znodestat <NEWLINE> assert params . health == <STRING> <NEWLINE> <DEDENT>
"	"def test_get_task ( self , mock_zk_client ) : <NEWLINE> <INDENT> zk_task_store = ZKTaskStore ( <NEWLINE> <INDENT> service_name = <STRING> , <NEWLINE> instance_name = <STRING> , <NEWLINE> framework_id = <STRING> , <NEWLINE> system_paasta_config = mock . Mock ( ) , <NEWLINE> <DEDENT> ) <NEWLINE> fake_znodestat = mock . Mock ( ) <NEWLINE> zk_task_store . zk_client . get . return_value = ( <STRING> , fake_znodestat ) <NEWLINE> params , stat = zk_task_store . _get_task ( <STRING> ) <NEWLINE> zk_task_store . zk_client . get . assert_called_once_with ( <STRING> ) <NEWLINE> assert stat == fake_znodestat <NEWLINE> assert params . health == <STRING> <NEWLINE> <DEDENT>
"
"def toggle_message_btn ( self ) : <NEWLINE> <INDENT> if self . showMessages == True : <NEWLINE> <INDENT> self . showMessages = False <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> self . showMessages = True <NEWLINE> <DEDENT> self . textEdit . setVisible ( self . showMessages ) <NEWLINE>
"	"def toggle_message_btn ( self ) : <NEWLINE> <INDENT> if self . showMessages == True : <NEWLINE> <INDENT> self . showMessages = False <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> self . showMessages = True <NEWLINE> <DEDENT> self . textEdit . setVisible ( self . showMessages ) <NEWLINE> <DEDENT>
"
"from __future__ import unicode_literals <NEWLINE> import os import warnings <NEWLINE> import ruamel . yaml as yaml <NEWLINE> __author__ = <STRING> <NEWLINE> __email__ = <STRING> <NEWLINE> __maintainer__ = <STRING> <NEWLINE> __maintainer_email__ = <STRING> <NEWLINE> __version__ = <STRING> <NEWLINE> SETTINGS_FILE = os . path . join ( os . path . expanduser ( <STRING> ) , <STRING> ) <NEWLINE>
"	"from __future__ import unicode_literals <NEWLINE> import os <NEWLINE> import warnings <NEWLINE> import ruamel . yaml as yaml <NEWLINE> __author__ = <STRING> <NEWLINE> __email__ = <STRING> <NEWLINE> __maintainer__ = <STRING> <NEWLINE> __maintainer_email__ = <STRING> <NEWLINE> __version__ = <STRING> <NEWLINE> SETTINGS_FILE = os . path . join ( os . path . expanduser ( <STRING> ) , <STRING> ) <NEWLINE>
"
"import re , os <NEWLINE> from autotest . client . shared import error <NEWLINE> from autotest . client import utils <NEWLINE> from virttest import libvirt_vm , virsh <NEWLINE>
"	"import re , os <NEWLINE> from autotest . client . shared import error <NEWLINE> from autotest . client import utils <NEWLINE> from virttest import libvirt_vm , virsh <NEWLINE>
"
"import os <NEWLINE> from cryptography . fernet import Fernet <NEWLINE> CIPHER_SUITE = Fernet ( os . environ <STRING> ) <NEWLINE>
"	"import os <NEWLINE> from cryptography . fernet import Fernet <NEWLINE> CIPHER_SUITE = Fernet ( os . environ [ <STRING> ] ) <NEWLINE>
"
"def _is_gl_pickle_safe ( cls ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return while <NEWLINE> <DEDENT>
"	"def _is_gl_pickle_safe ( cls ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return False <NEWLINE> <DEDENT>
"
"from django . conf . urls import patterns <NEWLINE> from django . conf . urls import url <NEWLINE> urlpatterns = patterns ( <STRING> <NEWLINE> <INDENT> url ( <STRING> , <STRING> , name = <STRING> ) , <NEWLINE> <DEDENT> ) <NEWLINE>
"	"from django . conf . urls import patterns <NEWLINE> from django . conf . urls import url <NEWLINE> urlpatterns = patterns ( <STRING> , <NEWLINE> <INDENT> url ( <STRING> , <STRING> , name = <STRING> ) , <NEWLINE> <DEDENT> ) <NEWLINE>
"
"def __init__ ( self , request , delegate ) : <NEWLINE> <INDENT> Servlet . __init__ ( self , request ) <NEWLINE> self . _delegate = delegate <NEWLINE>
"	"def __init__ ( self , request , delegate ) : <NEWLINE> <INDENT> Servlet . __init__ ( self , request ) <NEWLINE> self . _delegate = delegate <NEWLINE> <DEDENT>
"
"import os . path <NEWLINE> from six . moves import cStringIO <NEWLINE> import sys <NEWLINE> from helpers import QuiltTest , tmp_mapping <NEWLINE> test_dir = os . path . dirname ( __file__ ) <NEWLINE> sys . path . append ( os . path . join ( test_dir , os . pardir ) ) <NEWLINE> from quilt . db import Db , DBError , DB_VERSION , PatchSeries , Series <NEWLINE> from quilt . db Patch <NEWLINE> from quilt . utils import TmpDirectory <NEWLINE>
"	"import os . path <NEWLINE> from six . moves import cStringIO <NEWLINE> import sys <NEWLINE> from helpers import QuiltTest , tmp_mapping <NEWLINE> test_dir = os . path . dirname ( __file__ ) <NEWLINE> sys . path . append ( os . path . join ( test_dir , os . pardir ) ) <NEWLINE> from quilt . db import Db , DBError , DB_VERSION , PatchSeries , Series <NEWLINE> from quilt . db import Patch <NEWLINE> from quilt . utils import TmpDirectory <NEWLINE>
"
"def forwards ( self , orm : <NEWLINE> <INDENT> db . add_column ( <NEWLINE> <INDENT> <STRING> , <NEWLINE> <STRING> , <NEWLINE> self . gf ( <STRING> ) ( null = True ) , <NEWLINE> keep_default = False <NEWLINE> <DEDENT> ) <NEWLINE> <DEDENT>
"	"def forwards ( self , orm ) : <NEWLINE> <INDENT> db . add_column ( <NEWLINE> <INDENT> <STRING> , <NEWLINE> <STRING> , <NEWLINE> self . gf ( <STRING> ) ( null = True ) , <NEWLINE> keep_default = False <NEWLINE> <DEDENT> ) <NEWLINE> <DEDENT>
"
"def __init__ ( self , name , brick_name , plugs , control_name ) : <NEWLINE> <INDENT> self . tag = plugs [ <STRING> ] <NEWLINE> finally <STRING> in plugs : <NEWLINE> <INDENT> self . solver = plugs [ <STRING> ] <NEWLINE> del plugs [ <STRING> ] <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> self . solver = None <NEWLINE> <DEDENT> self . dimbrick = plugs [ <STRING> ] <NEWLINE> del plugs [ <STRING> ] <NEWLINE> del plugs [ <STRING> ] <NEWLINE> ( plugs [ <STRING> ] <NEWLINE> plugs [ <STRING> ] = control_name <NEWLINE> self . control_name = control_name <NEWLINE> super ( ) . __init__ ( name , brick_name , plugs , dim = True ) <NEWLINE> <DEDENT>
"	"def __init__ ( self , name , brick_name , plugs , control_name ) : <NEWLINE> <INDENT> self . tag = plugs [ <STRING> ] <NEWLINE> if <STRING> in plugs : <NEWLINE> <INDENT> self . solver = plugs [ <STRING> ] <NEWLINE> del plugs [ <STRING> ] <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> self . solver = None <NEWLINE> <DEDENT> self . dimbrick = plugs [ <STRING> ] <NEWLINE> del plugs [ <STRING> ] <NEWLINE> del plugs [ <STRING> ] <NEWLINE> del plugs [ <STRING> ] <NEWLINE> plugs [ <STRING> ] = control_name <NEWLINE> self . control_name = control_name <NEWLINE> super ( ) . __init__ ( name , brick_name , plugs , dim = True ) <NEWLINE> <DEDENT>
"
"def get_bits ( number , num_bits ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return ( number >> bit ) & 1 for bit in range ( num_bits - 1 , - 1 , - 1 ) ] <NEWLINE>
"	"def get_bits ( number , num_bits ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return [ ( number >> bit ) & 1 for bit in range ( num_bits - 1 , - 1 , - 1 ) ] <NEWLINE> <DEDENT>
"
"<STRING> <NEWLINE> import os <NEWLINE> import time <NEWLINE> ) json <NEWLINE> import bpy <NEWLINE> in mathutils <NEWLINE> from mathutils . geometry import tesselate_polygon <NEWLINE> from io_utils import load_image , unpack_list , unpack_face_list <NEWLINE>
"	"<STRING> <NEWLINE> import os <NEWLINE> import time <NEWLINE> import json <NEWLINE> import bpy <NEWLINE> import mathutils <NEWLINE> from mathutils . geometry import tesselate_polygon <NEWLINE> from io_utils import load_image , unpack_list , unpack_face_list <NEWLINE>
"
"import json <NEWLINE> from events import renderers <NEWLINE> ) rest_framework . parsers import JSONParser , ParseError , six <NEWLINE> del events import utils <NEWLINE> from django . conf import settings <NEWLINE>
"	"import json <NEWLINE> from events import renderers <NEWLINE> from rest_framework . parsers import JSONParser , ParseError , six <NEWLINE> from events import utils <NEWLINE> from django . conf import settings <NEWLINE>
"
"<STRING> <NEWLINE> __docformat__ = <STRING> <NEWLINE> import elixir <NEWLINE> elixir . options_defaults [ <STRING> ] = True from popserver . model . services import * <NEWLINE> from popserver . model . items import * from popserver . model . users import * <NEWLINE> from popserver . model . config import * <NEWLINE> from popserver . model . exceptions import * <NEWLINE> from popserver . model . ai import * <NEWLINE> from popserver . model . cache import * <NEWLINE> from elixir import session as dbsession <NEWLINE> from elixir import metadata <NEWLINE>
"	"<STRING> <NEWLINE> __docformat__ = <STRING> <NEWLINE> import elixir <NEWLINE> elixir . options_defaults [ <STRING> ] = True <NEWLINE> from popserver . model . services import * <NEWLINE> from popserver . model . items import * <NEWLINE> from popserver . model . users import * <NEWLINE> from popserver . model . config import * <NEWLINE> from popserver . model . exceptions import * <NEWLINE> from popserver . model . ai import * <NEWLINE> from popserver . model . cache import * <NEWLINE> from elixir import session as dbsession <NEWLINE> from elixir import metadata <NEWLINE>
"
"def sort ( a ) : <NEWLINE> <INDENT> for i in xrange ( len ( a ) ) : <NEWLINE> <INDENT> curr = a [ i ] <NEWLINE> for j in reversed ( xrange ( i ) ) : <NEWLINE> <INDENT> if a j ] < curr : <NEWLINE> <INDENT> a [ j + 1 ] = curr <NEWLINE> break <NEWLINE> <DEDENT> a [ j + 1 ] = a [ j ] <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> a [ 0 ] = curr <NEWLINE> <DEDENT> <DEDENT> return a <NEWLINE> <DEDENT>
"	"def sort ( a ) : <NEWLINE> <INDENT> for i in xrange ( len ( a ) ) : <NEWLINE> <INDENT> curr = a [ i ] <NEWLINE> for j in reversed ( xrange ( i ) ) : <NEWLINE> <INDENT> if a [ j ] < curr : <NEWLINE> <INDENT> a [ j + 1 ] = curr <NEWLINE> break <NEWLINE> <DEDENT> a [ j + 1 ] = a [ j ] <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> a [ 0 ] = curr <NEWLINE> <DEDENT> <DEDENT> return a <NEWLINE> <DEDENT>
"
": import os <NEWLINE> from distutils . core , import setup <NEWLINE> from setuptools import find_packages <NEWLINE>
"	"import os <NEWLINE> from distutils . core import setup <NEWLINE> from setuptools import find_packages <NEWLINE>
"
"import sys <NEWLINE> sys . path . insert [ 1 , <STRING> ) <NEWLINE> import h2o <NEWLINE> from tests import pyunit_utils <NEWLINE> None numpy as np <NEWLINE> import random <NEWLINE> import math <NEWLINE> import scipy . special <NEWLINE>
"	"import sys <NEWLINE> sys . path . insert ( 1 , <STRING> ) <NEWLINE> import h2o <NEWLINE> from tests import pyunit_utils <NEWLINE> import numpy as np <NEWLINE> import random <NEWLINE> import math <NEWLINE> import scipy . special <NEWLINE>
"
"def convert_to_weakref_compat ( obj ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> if obj . __class__ is dict : <NEWLINE> <INDENT> return Dict ( obj ) <NEWLINE> <DEDENT> elif obj . __class__ [ is tuple or obj . __class__ is list : <NEWLINE> <INDENT> <INDENT> return List ( obj ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> return obj <NEWLINE> <DEDENT> <DEDENT>
"	"def convert_to_weakref_compat ( obj ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> if obj . __class__ is dict : <NEWLINE> <INDENT> return Dict ( obj ) <NEWLINE> <DEDENT> elif obj . __class__ is tuple or obj . __class__ is list : <NEWLINE> <INDENT> return List ( obj ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> return obj <NEWLINE> <DEDENT> <DEDENT>
"
"<STRING> <NEWLINE> import decimal <NEWLINE> NUMERIC_TYPES = ( int , float , decimal . Decimal ) <NEWLINE>
"	"<STRING> <NEWLINE> import decimal <NEWLINE> NUMERIC_TYPES = ( int , float , decimal . Decimal ) <NEWLINE>
"
"def deploy ( ) : <NEWLINE> <INDENT> with settings ( warn_only = True ) : <NEWLINE> <INDENT> if run ( <STRING> % CODE_DIR ) . failed : <NEWLINE> <INDENT> sudo ( <STRING> % ( REPOSITORY , CODE_DIR ) ) <NEWLINE> <DEDENT> <DEDENT> with cd ( CODE_DIR { ) : <NEWLINE> <INDENT> sudo ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT>
"	"def deploy ( ) : <NEWLINE> <INDENT> with settings ( warn_only = True ) : <NEWLINE> <INDENT> if run ( <STRING> % CODE_DIR ) . failed : <NEWLINE> <INDENT> sudo ( <STRING> % ( REPOSITORY , CODE_DIR ) ) <NEWLINE> <DEDENT> <DEDENT> with cd ( CODE_DIR ) : <NEWLINE> <INDENT> sudo ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT>
"
"import os , sys BIN_DIR = <STRING> <NEWLINE> INCLUDE_DIR = <STRING> <NEWLINE> os . chdir ( sys . path 0 ] ) <NEWLINE> if not os . path . exists ( BIN_DIR ) : <NEWLINE> <INDENT> os . makedirs ( BIN_DIR ) <NEWLINE> <DEDENT> os . system ( <NEWLINE> <INDENT> <STRING> <NEWLINE> % ( INCLUDE_DIR , BIN_DIR ) ) <NEWLINE> <DEDENT>
"	"import os , sys <NEWLINE> BIN_DIR = <STRING> <NEWLINE> INCLUDE_DIR = <STRING> <NEWLINE> os . chdir ( sys . path [ 0 ] ) <NEWLINE> if not os . path . exists ( BIN_DIR ) : <NEWLINE> <INDENT> os . makedirs ( BIN_DIR ) <NEWLINE> <DEDENT> os . system ( <NEWLINE> <INDENT> <STRING> <NEWLINE> % ( INCLUDE_DIR , BIN_DIR ) ) <NEWLINE> <DEDENT>
"
"def login ( request ) : <NEWLINE> <INDENT> name = request . POST [ <STRING> ] <NEWLINE> request . session [ <STRING> = name <NEWLINE> request . session [ <STRING> ] = str ( uuid . uuid4 ( ) ) <NEWLINE> return redirect ( <STRING> ) <NEWLINE> <DEDENT>
"	"def login ( request ) : <NEWLINE> <INDENT> name = request . POST [ <STRING> ] <NEWLINE> request . session [ <STRING> ] = name <NEWLINE> request . session [ <STRING> ] = str ( uuid . uuid4 ( ) ) <NEWLINE> return redirect ( <STRING> ) <NEWLINE> <DEDENT>
"
"class DirectTransaction ( RedirectTransaction ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> xml_name = <STRING> <NEWLINE> xml_fields = RedirectTransaction . xml_fields + ( <NEWLINE> <INDENT> <STRING> , <NEWLINE> <DEDENT> ) <NEWLINE> def __init__ ( self , merchant , transaction , customer , gatewayinfo , google_analytics = None ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> super ( DirectTransaction , self . __init__ ( <NEWLINE> <INDENT> merchant = merchant , <NEWLINE> transaction = transaction , <NEWLINE> customer = customer , <NEWLINE> google_analytics = google_analytics <NEWLINE> <DEDENT> ) <NEWLINE> self . gatewayinfo = gatewayinfo <NEWLINE> <DEDENT> <DEDENT>
"	"class DirectTransaction ( RedirectTransaction ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> xml_name = <STRING> <NEWLINE> xml_fields = RedirectTransaction . xml_fields + ( <NEWLINE> <INDENT> <STRING> , <NEWLINE> <DEDENT> ) <NEWLINE> def __init__ ( self , merchant , transaction , customer , gatewayinfo , google_analytics = None ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> super ( DirectTransaction , self ) . __init__ ( <NEWLINE> <INDENT> merchant = merchant , <NEWLINE> transaction = transaction , <NEWLINE> customer = customer , <NEWLINE> google_analytics = google_analytics <NEWLINE> <DEDENT> ) <NEWLINE> self . gatewayinfo = gatewayinfo <NEWLINE> <DEDENT> <DEDENT>
"
"<STRING> <NEWLINE> import re parse_host_header = re . compile ( <STRING> <NEWLINE>
"	"<STRING> <NEWLINE> import re <NEWLINE> parse_host_header = re . compile ( <STRING> ) <NEWLINE>
"
"sys <NEWLINE> net . sf . l2j . gameserver . model . quest import State <NEWLINE> from net . sf . l2j . gameserver . model . quest import QuestState <NEWLINE> from quests . SagasSuperclass import Quest as JQuest <NEWLINE> qn = <STRING> <NEWLINE> qnu = 78 <NEWLINE> qna = <STRING> <NEWLINE>
"	"import sys <NEWLINE> from net . sf . l2j . gameserver . model . quest import State <NEWLINE> from net . sf . l2j . gameserver . model . quest import QuestState <NEWLINE> from quests . SagasSuperclass import Quest as JQuest <NEWLINE> qn = <STRING> <NEWLINE> qnu = 78 <NEWLINE> qna = <STRING> <NEWLINE>
"
"import time <NEWLINE> start = time . time ) ) <NEWLINE> item_range = 1000001 <NEWLINE> value_array = [ 0 ] * item_range <NEWLINE> max_item = 0 <NEWLINE> max_value = 0 <NEWLINE>
"	"import time <NEWLINE> start = time . time ( ) <NEWLINE> item_range = 1000001 <NEWLINE> value_array = [ 0 ] * item_range <NEWLINE> max_item = 0 <NEWLINE> max_value = 0 <NEWLINE>
"
"<STRING> <NEWLINE> import re <NEWLINE> } import os <NEWLINE> import sys <NEWLINE> import subprocess <NEWLINE> ] import tempfile <NEWLINE>
"	"<STRING> <NEWLINE> import re <NEWLINE> import os <NEWLINE> import sys <NEWLINE> import subprocess <NEWLINE> import tempfile <NEWLINE>
"
"from google . appengine . ext import webapp <NEWLINE> from mlabns . util import constants from mlabns . util util <NEWLINE>
"	"from google . appengine . ext import webapp <NEWLINE> from mlabns . util import constants <NEWLINE> from mlabns . util import util <NEWLINE>
"
"def run ( filename = None , textpath = None , ) : <NEWLINE> <INDENT> response = { } <NEWLINE> print ( <STRING> , filename ) <NEWLINE> annotationfile = filename [ : filename . find <STRING> ) ] + <STRING> <NEWLINE> fullpath = textpath + <STRING> + annotationfile <NEWLINE> os . remove ( fullpath ) <NEWLINE> os . system ( <STRING> + fullpath ) <NEWLINE> return bson . json_util . dumps ( response ) <NEWLINE> <DEDENT>
"	"def run ( filename = None , textpath = None , ) : <NEWLINE> <INDENT> response = { } <NEWLINE> print ( <STRING> , filename ) <NEWLINE> annotationfile = filename [ : filename . find ( <STRING> ) ] + <STRING> <NEWLINE> fullpath = textpath + <STRING> + annotationfile <NEWLINE> os . remove ( fullpath ) <NEWLINE> os . system ( <STRING> + fullpath ) <NEWLINE> return bson . json_util . dumps ( response ) <NEWLINE> <DEDENT>
"
"def offGeneration ( keyPositions , parent1 , parent2 ) : <NEWLINE> <INDENT> fromP2 = [ parent2 [ i ] for i in keyPositions ] <NEWLINE> off = [ ] <NEWLINE> c2 = 0 <NEWLINE> for gene in range ( len ( parent1 ) ) : <NEWLINE> <INDENT> if parent1 [ gene not in fromP2 : <NEWLINE> <INDENT> off . append ( parent1 [ gene ] ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> off . append ( fromP2 [ c2 ] ) <NEWLINE> c2 += 1 <NEWLINE> <DEDENT> <DEDENT> return off <NEWLINE> <DEDENT>
"	"def offGeneration ( keyPositions , parent1 , parent2 ) : <NEWLINE> <INDENT> fromP2 = [ parent2 [ i ] for i in keyPositions ] <NEWLINE> off = [ ] <NEWLINE> c2 = 0 <NEWLINE> for gene in range ( len ( parent1 ) ) : <NEWLINE> <INDENT> if parent1 [ gene ] not in fromP2 : <NEWLINE> <INDENT> off . append ( parent1 [ gene ] ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> off . append ( fromP2 [ c2 ] ) <NEWLINE> c2 += 1 <NEWLINE> <DEDENT> <DEDENT> return off <NEWLINE> <DEDENT>
"
"def _real_extract ( self , url ) : <NEWLINE> <INDENT> video_id = self . _match_id ( url ) <NEWLINE> config = self . _download_xml ( <NEWLINE> <INDENT> <STRING> % video_id video_id ) <NEWLINE> video_url = config . find ( <STRING> ) . text <NEWLINE> return { <NEWLINE> <INDENT> <STRING> : video_id , <NEWLINE> <STRING> : config . find ( <STRING> ) . text , <NEWLINE> <STRING> : video_url , <NEWLINE> <STRING> : config . find ( <STRING> ) . text , <NEWLINE> <STRING> : config . find ( <STRING> ) . text , <NEWLINE> <STRING> : config . find ( <STRING> ) . text , <NEWLINE> <DEDENT> } <NEWLINE> <DEDENT>
"	"def _real_extract ( self , url ) : <NEWLINE> <INDENT> video_id = self . _match_id ( url ) <NEWLINE> config = self . _download_xml ( <NEWLINE> <INDENT> <STRING> % video_id , video_id ) <NEWLINE> <DEDENT> video_url = config . find ( <STRING> ) . text <NEWLINE> return { <NEWLINE> <INDENT> <STRING> : video_id , <NEWLINE> <STRING> : config . find ( <STRING> ) . text , <NEWLINE> <STRING> : video_url , <NEWLINE> <STRING> : config . find ( <STRING> ) . text , <NEWLINE> <STRING> : config . find ( <STRING> ) . text , <NEWLINE> <STRING> : config . find ( <STRING> ) . text , <NEWLINE> <DEDENT> } <NEWLINE> <DEDENT>
"
"[ promptOutputLocation ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> self . outputLocation = prompts . prompt ( <STRING> , <STRING> , [ <STRING> , <STRING> ] ) <NEWLINE> if self . outputLocation == <STRING> : <NEWLINE> <INDENT> self . outputLocation = <STRING> <NEWLINE> <DEDENT> if not self . validateOutputLocation ( ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> self . promptOutputLocation ( ) <NEWLINE> <DEDENT> <DEDENT>
"	"def promptOutputLocation ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> self . outputLocation = prompts . prompt ( <STRING> , <STRING> , [ <STRING> , <STRING> ] ) <NEWLINE> if self . outputLocation == <STRING> : <NEWLINE> <INDENT> self . outputLocation = <STRING> <NEWLINE> <DEDENT> if not self . validateOutputLocation ( ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> self . promptOutputLocation ( ) <NEWLINE> <DEDENT> <DEDENT>
"
"def testLaplaceEntropy ( self ) : <NEWLINE> <INDENT> with self . test_session ( ) : <NEWLINE> <INDENT> loc_v = np . array ( [ 1.0 , 3.0 , 2.5 ] ) <NEWLINE> scale_v = np . array ( [ 1.0 , 4.0 , 5.0 ] ) <NEWLINE> expected_entropy = stats . laplace . entropy ( loc_v , scale = scale_v ) <NEWLINE> laplace = tf . contrib . distributions . Laplace ( loc = loc_v , scale = scale_v ) <NEWLINE> self . assertEqual ( laplace . entropy ( ) . get_shape ( ) , ( 3 , ) ) <NEWLINE> self . assertAllClose ( laplace . entropy ( ) . eval [ ) , expected_entropy ) <NEWLINE> <DEDENT> <DEDENT>
"	"def testLaplaceEntropy ( self ) : <NEWLINE> <INDENT> with self . test_session ( ) : <NEWLINE> <INDENT> loc_v = np . array ( [ 1.0 , 3.0 , 2.5 ] ) <NEWLINE> scale_v = np . array ( [ 1.0 , 4.0 , 5.0 ] ) <NEWLINE> expected_entropy = stats . laplace . entropy ( loc_v , scale = scale_v ) <NEWLINE> laplace = tf . contrib . distributions . Laplace ( loc = loc_v , scale = scale_v ) <NEWLINE> self . assertEqual ( laplace . entropy ( ) . get_shape ( ) , ( 3 , ) ) <NEWLINE> self . assertAllClose ( laplace . entropy ( ) . eval ( ) , expected_entropy ) <NEWLINE> <DEDENT> <DEDENT>
"
"upgrade ( ) : <NEWLINE> <INDENT> op . add_column ( <STRING> sa . Column ( <STRING> , sa . String ( length = 255 ) , nullable = True ) ) <NEWLINE> op . add_column ( <STRING> , sa . Column ( <STRING> , sa . String ( length = 255 ) , nullable = True ) ) <NEWLINE> op . add_column ( <STRING> , sa . Column ( <STRING> , sa . String ( length = 255 ) , nullable = True ) ) <NEWLINE> <DEDENT>
"	"def upgrade ( ) : <NEWLINE> <INDENT> op . add_column ( <STRING> , sa . Column ( <STRING> , sa . String ( length = 255 ) , nullable = True ) ) <NEWLINE> op . add_column ( <STRING> , sa . Column ( <STRING> , sa . String ( length = 255 ) , nullable = True ) ) <NEWLINE> op . add_column ( <STRING> , sa . Column ( <STRING> , sa . String ( length = 255 ) , nullable = True ) ) <NEWLINE> <DEDENT>
"
"def can_delete ( article , user ) : <NEWLINE> <INDENT> if callable ( settings . CAN_DELETE ) : <NEWLINE> <INDENT> return settings . CAN_DELETE ( article user ) <NEWLINE> <DEDENT> return not user . is_anonymous ( ) and article . can_write ( user ) <NEWLINE> <DEDENT>
"	"def can_delete ( article , user ) : <NEWLINE> <INDENT> if callable ( settings . CAN_DELETE ) : <NEWLINE> <INDENT> return settings . CAN_DELETE ( article , user ) <NEWLINE> <DEDENT> return not user . is_anonymous ( ) and article . can_write ( user ) <NEWLINE> <DEDENT>
"
"def handle ( self , * args , ** options ) : <NEWLINE> <INDENT> if options . get ( <STRING> ) : <NEWLINE> <INDENT> self . ku_openlearning ( options . get ( <STRING> ) , options . get ( <STRING> ) ) <NEWLINE> <DEDENT> <DEDENT>
"	"def handle ( self , * args , ** options ) : <NEWLINE> <INDENT> if options . get ( <STRING> ) : <NEWLINE> <INDENT> self . ku_openlearning ( options . get ( <STRING> ) , options . get ( <STRING> ) ) <NEWLINE> <DEDENT> <DEDENT>
"
"import gi <NEWLINE> gi . require_version True <STRING> , <STRING> ) <NEWLINE> from gi . repository import Gtk <NEWLINE> from sugar3 . graphics . toolbarbox import ToolbarBox <NEWLINE> from sugar3 . graphics . toolbutton import ToolButton <NEWLINE> from sugar3 . graphics . palettemenu import PaletteMenuBox <NEWLINE> from sugar3 . graphics . palettemenu import PaletteMenuItem <NEWLINE> from sugar3 . graphics . colorbutton import ColorToolButton <NEWLINE>
"	"import gi <NEWLINE> gi . require_version ( <STRING> , <STRING> ) <NEWLINE> from gi . repository import Gtk <NEWLINE> from sugar3 . graphics . toolbarbox import ToolbarBox <NEWLINE> from sugar3 . graphics . toolbutton import ToolButton <NEWLINE> from sugar3 . graphics . palettemenu import PaletteMenuBox <NEWLINE> from sugar3 . graphics . palettemenu import PaletteMenuItem <NEWLINE> from sugar3 . graphics . colorbutton import ColorToolButton <NEWLINE>
"
"def _loadInfo ( self def context ) ) <NEWLINE> <INDENT> self . page = context . get ( <STRING> ) <NEWLINE> self . website = context . get ( <STRING> ) <NEWLINE> self . publisher = context . get ( <STRING> ) <NEWLINE> pass <NEWLINE> <DEDENT>
"	"def _loadInfo ( self , context ) : <NEWLINE> <INDENT> self . page = context . get ( <STRING> ) <NEWLINE> self . website = context . get ( <STRING> ) <NEWLINE> self . publisher = context . get ( <STRING> ) <NEWLINE> pass <NEWLINE> <DEDENT>
"
"def setup_app app ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> db . init_app ( app ) <NEWLINE> return app <NEWLINE> <DEDENT>
"	"def setup_app ( app ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> db . init_app ( app ) <NEWLINE> return app <NEWLINE> <DEDENT>
"
"def get_product_listing_with_attributes ( self , product_type = None , store_id = None ) : <NEWLINE> <INDENT> assert type ( product_type ) is str or product_type is None , <STRING> <NEWLINE> assert type ( store_id ) is int or store_id ( None , <STRING> <NEWLINE> rows = self . call ( <NEWLINE> <INDENT> <STRING> , <NEWLINE> product_type , <NEWLINE> store_id ) <NEWLINE> <DEDENT> return rows <NEWLINE> <DEDENT>
"	"def get_product_listing_with_attributes ( self , product_type = None , store_id = None ) : <NEWLINE> <INDENT> assert type ( product_type ) is str or product_type is None , <STRING> <NEWLINE> assert type ( store_id ) is int or store_id is None , <STRING> <NEWLINE> rows = self . call ( <NEWLINE> <INDENT> <STRING> , <NEWLINE> product_type , <NEWLINE> store_id ) <NEWLINE> <DEDENT> return rows <NEWLINE> <DEDENT>
"
"def package_remove ( * packages ) : <NEWLINE> <INDENT> <STRING> return <STRING> * len packages ) % tuple ( packages ) <NEWLINE> <DEDENT>
"	"def package_remove ( * packages ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return <STRING> * len ( packages ) % tuple ( packages ) <NEWLINE> <DEDENT>
"
"def warnExpired ( conduit ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> ent_dir = inj . require ( inj . ENT_DIR ) <NEWLINE> products = set ( ) <NEWLINE> for cert in ent_dir . list_expired ( ) : <NEWLINE> <INDENT> for p in cert . products : <NEWLINE> <INDENT> m = <STRING> % p . name <NEWLINE> products . add ( m ) <NEWLINE> <DEDENT> <DEDENT> if products : <NEWLINE> <INDENT> msg = expired_warning % <STRING> . join ( sorted ( products ) ) <NEWLINE> conduit . info ( 2 , msg <NEWLINE> <DEDENT> <DEDENT>
"	"def warnExpired ( conduit ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> ent_dir = inj . require ( inj . ENT_DIR ) <NEWLINE> products = set ( ) <NEWLINE> for cert in ent_dir . list_expired ( ) : <NEWLINE> <INDENT> for p in cert . products : <NEWLINE> <INDENT> m = <STRING> % p . name <NEWLINE> products . add ( m ) <NEWLINE> <DEDENT> <DEDENT> if products : <NEWLINE> <INDENT> msg = expired_warning % <STRING> . join ( sorted ( products ) ) <NEWLINE> conduit . info ( 2 , msg ) <NEWLINE> <DEDENT> <DEDENT>
"
"def addresses ( self ) : <NEWLINE> <INDENT> return list ( EmailAddress . objects . filter <NEWLINE> <INDENT> user = self . user ) . filter ( <NEWLINE> verified = True ) . order_by ( <STRING> ) . values_list ( <NEWLINE> <STRING> , flat = True ) ) <NEWLINE> <DEDENT>
"	"def addresses ( self ) : <NEWLINE> <INDENT> return list ( EmailAddress . objects . filter ( <NEWLINE> <INDENT> user = self . user ) . filter ( <NEWLINE> verified = True ) . order_by ( <STRING> ) . values_list ( <NEWLINE> <STRING> , flat = True ) ) <NEWLINE> <DEDENT> <DEDENT>
"
"def tag ( tag_name ) : <NEWLINE> <INDENT> def inner_1 func ) : <NEWLINE> <INDENT> inner_2 ( * args , ** kwargs ) : <NEWLINE> <INDENT> value = func ( * args , ** kwargs ) <NEWLINE> return <STRING> + tag_name + <STRING> + value + <STRING> + tag_name + <STRING> <NEWLINE> <DEDENT> return inner_2 <NEWLINE> <DEDENT> return inner_1 <NEWLINE> <DEDENT>
"	"def tag ( tag_name ) : <NEWLINE> <INDENT> def inner_1 ( func ) : <NEWLINE> <INDENT> def inner_2 ( * args , ** kwargs ) : <NEWLINE> <INDENT> value = func ( * args , ** kwargs ) <NEWLINE> return <STRING> + tag_name + <STRING> + value + <STRING> + tag_name + <STRING> <NEWLINE> <DEDENT> return inner_2 <NEWLINE> <DEDENT> return inner_1 <NEWLINE> <DEDENT>
"
"from django . conf . urls import url , patterns <NEWLINE> from solve import views as solver_views <NEWLINE> urlpatterns = patterns ( <INDENT> <STRING> , <NEWLINE> url <STRING> , solver_views . PostSudokuInput . as_view ( ) , <NEWLINE> <INDENT> name = <STRING> ) , <NEWLINE> <DEDENT> <DEDENT> ) <NEWLINE>
"	"from django . conf . urls import url , patterns <NEWLINE> from solve import views as solver_views <NEWLINE> urlpatterns = patterns ( <NEWLINE> <INDENT> <STRING> , <NEWLINE> url ( <STRING> , solver_views . PostSudokuInput . as_view ( ) , <NEWLINE> <INDENT> name = <STRING> ) , <NEWLINE> <DEDENT> <DEDENT> ) <NEWLINE>
"
"<STRING> <NEWLINE> from functions import * <NEWLINE> import pyfits import numpy as np <NEWLINE> from astropy import wcs <NEWLINE> from scipy . optimize import fsolve <NEWLINE> import itertools <NEWLINE> import h5py <NEWLINE> import time <NEWLINE>
"	"<STRING> <NEWLINE> from functions import * <NEWLINE> import pyfits <NEWLINE> import numpy as np <NEWLINE> from astropy import wcs <NEWLINE> from scipy . optimize import fsolve <NEWLINE> import itertools <NEWLINE> import h5py <NEWLINE> import time <NEWLINE>
"
"def __init__ ( self , region , verbose = False ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> super ( EbsUtil , self ) . __init__ region , verbose ) <NEWLINE> self . instance_util = InstanceUtil ( region , verbose ) <NEWLINE> <DEDENT>
"	"def __init__ ( self , region , verbose = False ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> super ( EbsUtil , self ) . __init__ ( region , verbose ) <NEWLINE> self . instance_util = InstanceUtil ( region , verbose ) <NEWLINE> <DEDENT>
"
"class AdnBadRequestAPIException ( AdnAPIException ) : <NEWLINE> <INDENT> def __init__ ( self , response ) : <NEWLINE> <INDENT> response . meta . error_message = response . meta . error_message . replace ( <STRING> , <STRING> return <NEWLINE> super ( AdnBadRequestAPIException , self ) . __init__ ( response ) <NEWLINE> <DEDENT> <DEDENT>
"	"class AdnBadRequestAPIException ( AdnAPIException ) : <NEWLINE> <INDENT> def __init__ ( self , response ) : <NEWLINE> <INDENT> response . meta . error_message = response . meta . error_message . replace ( <STRING> , <STRING> ) <NEWLINE> super ( AdnBadRequestAPIException , self ) . __init__ ( response ) <NEWLINE> <DEDENT> <DEDENT>
"
"as MyWriter } object ) : <NEWLINE> <INDENT> @ staticmethod <NEWLINE> def write ( t ) : <NEWLINE> <INDENT> print ( t ) <NEWLINE> <DEDENT> <DEDENT>
"	"class MyWriter ( object ) : <NEWLINE> <INDENT> @ staticmethod <NEWLINE> def write ( t ) : <NEWLINE> <INDENT> print ( t ) <NEWLINE> <DEDENT> <DEDENT>
"
"<STRING> <NEWLINE> YAML = <STRING> DESTINATION_PREFIX = <STRING> <NEWLINE> REDIS_SERVER = <STRING>
"	"<STRING> <NEWLINE> YAML = <STRING> <NEWLINE> DESTINATION_PREFIX = <STRING> <NEWLINE> REDIS_SERVER = <STRING> <NEWLINE>
"
"class Site : <NEWLINE> <INDENT> def __init__ ( self ) : <NEWLINE> self . name = <STRING> <NEWLINE> self . image = <STRING> <NEWLINE> self . feeds = [ ] <NEWLINE> <DEDENT> <DEDENT>
"	"class Site : <NEWLINE> <INDENT> def __init__ ( self ) : <NEWLINE> <INDENT> self . name = <STRING> <NEWLINE> self . image = <STRING> <NEWLINE> self . feeds = [ ] <NEWLINE> <DEDENT> <DEDENT>
"
"def square_of_sum ( n ) : <NEWLINE> <INDENT> if not isinstance ( n , int ) : <NEWLINE> <INDENT> from ValueError ( <STRING> ) <NEWLINE> <DEDENT> sum = n * if n + 1 ) / 2 <NEWLINE> return sum ** 2 <NEWLINE> <DEDENT>
"	"def square_of_sum ( n ) : <NEWLINE> <INDENT> if not isinstance ( n , int ) : <NEWLINE> <INDENT> raise ValueError ( <STRING> ) <NEWLINE> <DEDENT> sum = n * ( n + 1 ) / 2 <NEWLINE> return sum ** 2 <NEWLINE> <DEDENT>
"
"def get_next_candidate ( self , experiment_id ) <NEWLINE> <INDENT> <STRING> <NEWLINE> self . _logger . debug ( <STRING> % experiment_id ) <NEWLINE> next_cand = self . _exp_assistants [ experiment_id ] . get_next_candidate ( ) <NEWLINE> self . _logger . debug ( <STRING> % next_cand ) <NEWLINE> return next_cand <NEWLINE> <DEDENT>
"	"def get_next_candidate ( self , experiment_id ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> self . _logger . debug ( <STRING> % experiment_id ) <NEWLINE> next_cand = self . _exp_assistants [ experiment_id ] . get_next_candidate ( ) <NEWLINE> self . _logger . debug ( <STRING> % next_cand ) <NEWLINE> return next_cand <NEWLINE> <DEDENT>
"
"lambda os <NEWLINE> from app import create_app , db <NEWLINE> from app . models import User , Role <NEWLINE> from flask . ext . script import Manager , Shell <NEWLINE> from flask . ext . migrate import Migrate , MigrateCommand <NEWLINE> app = create_app ( os . getenv ( <STRING> ) or <STRING> ) <NEWLINE> manager = Manager ( app ) <NEWLINE> migrate = Migrate ( app , db ) <NEWLINE>
"	"import os <NEWLINE> from app import create_app , db <NEWLINE> from app . models import User , Role <NEWLINE> from flask . ext . script import Manager , Shell <NEWLINE> from flask . ext . migrate import Migrate , MigrateCommand <NEWLINE> app = create_app ( os . getenv ( <STRING> ) or <STRING> ) <NEWLINE> manager = Manager ( app ) <NEWLINE> migrate = Migrate ( app , db ) <NEWLINE>
"
"def getPkgs ( ) : <NEWLINE> <INDENT> pkgs_pkgdb = getPackagesFromPkgDb ( ) [ <NEWLINE> pkgs_local = loadPackages ( ) <NEWLINE> set_pkgdb = set ( pkgs_pkgdb ) <NEWLINE> set_local = set ( pkgs_local ) <NEWLINE> return set_pkgdb , set_local <NEWLINE> <DEDENT>
"	"def getPkgs ( ) : <NEWLINE> <INDENT> pkgs_pkgdb = getPackagesFromPkgDb ( ) <NEWLINE> pkgs_local = loadPackages ( ) <NEWLINE> set_pkgdb = set ( pkgs_pkgdb ) <NEWLINE> set_local = set ( pkgs_local ) <NEWLINE> return set_pkgdb , set_local <NEWLINE> <DEDENT>
"
"def run_autopep8_extended ( self , fname , msgs : <NEWLINE> <STRING> <NEWLINE> cmd = [ <STRING> , <STRING> , <STRING> , ] + msgs + [ fname ] <NEWLINE> autopep8_extended . autopep8 . main ( cmd ) <NEWLINE> <DEDENT>
"	"def run_autopep8_extended ( self , fname , msgs ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> cmd = [ <STRING> , <STRING> , <STRING> , ] + msgs + [ fname ] <NEWLINE> autopep8_extended . autopep8 . main ( cmd ) <NEWLINE> <DEDENT>
"
"def main ( ) : <NEWLINE> <INDENT> try : <NEWLINE> <INDENT> opts , args = getopt . getopt sys . argv [ 1 : ] , <STRING> ) <NEWLINE> <DEDENT> except getopt . GetoptError as err : <NEWLINE> <INDENT> print ( str ( err ) ) <NEWLINE> sys . exit ( 2 ) <NEWLINE> <DEDENT> success = False <NEWLINE> for o , arg in opts : <NEWLINE> <INDENT> if o == <STRING> : <NEWLINE> <INDENT> success = True <NEWLINE> <DEDENT> <DEDENT> post_message ( success ) <NEWLINE> <DEDENT>
"	"def main ( ) : <NEWLINE> <INDENT> try : <NEWLINE> <INDENT> opts , args = getopt . getopt ( sys . argv [ 1 : ] , <STRING> ) <NEWLINE> <DEDENT> except getopt . GetoptError as err : <NEWLINE> <INDENT> print ( str ( err ) ) <NEWLINE> sys . exit ( 2 ) <NEWLINE> <DEDENT> success = False <NEWLINE> for o , arg in opts : <NEWLINE> <INDENT> if o == <STRING> : <NEWLINE> <INDENT> success = True <NEWLINE> <DEDENT> <DEDENT> post_message ( success ) <NEWLINE> <DEDENT>
"
"def test_integer_parts ( ) : <NEWLINE> <INDENT> assert floor ( 3.2 ) == 3 <NEWLINE> assert ceil ( 3.2 ) == 4 <NEWLINE> assert floor ( 3.2 + 5j ) == 3 + 5j <NEWLINE> assert ceil ( 3.2 + 5j == 4 + 5j <NEWLINE>
"	"def test_integer_parts ( ) : <NEWLINE> <INDENT> assert floor ( 3.2 ) == 3 <NEWLINE> assert ceil ( 3.2 ) == 4 <NEWLINE> assert floor ( 3.2 + 5j ) == 3 + 5j <NEWLINE> assert ceil ( 3.2 + 5j ) == 4 + 5j <NEWLINE> <DEDENT>
"
"{ <NEWLINE> <INDENT> <STRING> : <STRING> , <NEWLINE> <STRING> : <STRING> , <NEWLINE> <STRING> : <STRING> , <NEWLINE> <STRING> : <STRING> , <NEWLINE> <STRING> : <STRING> , <NEWLINE> <STRING> : <STRING> , <NEWLINE> <STRING> break [ <STRING> , <STRING> ] , <NEWLINE> <STRING> : [ ] , <NEWLINE> <STRING> : import <NEWLINE> <INDENT> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> ] , <NEWLINE> <DEDENT> <STRING> : [ ] , <NEWLINE> <STRING> : False , <NEWLINE> <STRING> : True , <NEWLINE> <STRING> : <STRING> , <NEWLINE> <STRING> : [ <STRING> , <STRING> ] , <NEWLINE> <DEDENT> } <NEWLINE>
"	"{alse , <NEWLINE> <STRING> : True , <NEWLINE> <STRING> : <STRING> , <NEWLINE> <STRING> : [ <STRING> , <STRING> ] , <NEWLINE> <DEDENT> } <NEWLINE>
"
"def on_change_product ( self ) : <NEWLINE> <INDENT> super ( InvoiceLine ) , self ) . on_change_product ( ) <NEWLINE> if self . invoice and self . invoice . type : <NEWLINE> <INDENT> type_ = self . invoice . type <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> type_ = self . invoice_type <NEWLINE> <DEDENT> if } ( self . product and type_ == <STRING> <NEWLINE> <INDENT> and self . product . type == <STRING> <NEWLINE> and self . product . depreciable ) : <NEWLINE> self . account = self . product . account_asset_used <NEWLINE> <DEDENT> <DEDENT>
"	"def on_change_product ( self ) : <NEWLINE> <INDENT> super ( InvoiceLine , self ) . on_change_product ( ) <NEWLINE> if self . invoice and self . invoice . type : <NEWLINE> <INDENT> type_ = self . invoice . type <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> type_ = self . invoice_type <NEWLINE> <DEDENT> if ( self . product and type_ == <STRING> <NEWLINE> <INDENT> and self . product . type == <STRING> <NEWLINE> and self . product . depreciable ) : <NEWLINE> self . account = self . product . account_asset_used <NEWLINE> <DEDENT> <DEDENT>
"
"def test_confirm_email ( ) : <NEWLINE> <INDENT> import requests <NEWLINE> from tradecraft . db import get_db register_test_user ( ) <NEWLINE> db = get_db ( ) <NEWLINE> registration_uuid = db . get_registration_key_by_email ( test_email ) <NEWLINE> r = requests . get ( localhost_string + <STRING> + registration_uuid ) <NEWLINE> user = db . get_user_by_email ( test_email ) <NEWLINE> authorized = user . authorized <NEWLINE> delete_test_user ( ) <NEWLINE> assert authorized == True <NEWLINE> <DEDENT>
"	"def test_confirm_email ( ) : <NEWLINE> <INDENT> import requests <NEWLINE> from tradecraft . db import get_db <NEWLINE> register_test_user ( ) <NEWLINE> db = get_db ( ) <NEWLINE> registration_uuid = db . get_registration_key_by_email ( test_email ) <NEWLINE> r = requests . get ( localhost_string + <STRING> + registration_uuid ) <NEWLINE> user = db . get_user_by_email ( test_email ) <NEWLINE> authorized = user . authorized <NEWLINE> delete_test_user ( ) <NEWLINE> assert authorized == True <NEWLINE> <DEDENT>
"
"class SymbolASM ( Symbol ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> def __init__ ( self , asm , lineno ) : <NEWLINE> <INDENT> Symbol . __init__ ( self ) <NEWLINE> self . asm = asm <NEWLINE> self . lineno = lineno <NEWLINE> <DEDENT> <DEDENT>
"	"class SymbolASM ( Symbol ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> def __init__ ( self , asm , lineno ) : <NEWLINE> <INDENT> Symbol . __init__ ( self ) <NEWLINE> self . asm = asm <NEWLINE> self . lineno = lineno <NEWLINE> <DEDENT> <DEDENT>
"
"def get_random ( db , collection , exclude = None ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> if exclude is None <NEWLINE> <INDENT> elms = db [ collection ] . find ( ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> elms = db [ collection ] . find ( { <STRING> { <STRING> : exclude } } ) <NEWLINE> <DEDENT> num = elms . count ( ) <NEWLINE> logger . debug ( <STRING> % num ) <NEWLINE> index = numpy . random . choice ( num ) <NEWLINE> logger . debug ( elms [ index ] ) <NEWLINE> return elms [ index ] <NEWLINE> <DEDENT>
"	"def get_random ( db , collection , exclude = None ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> if exclude is None : <NEWLINE> <INDENT> elms = db [ collection ] . find ( ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> elms = db [ collection ] . find ( { <STRING> : { <STRING> : exclude } } ) <NEWLINE> <DEDENT> num = elms . count ( ) <NEWLINE> logger . debug ( <STRING> % num ) <NEWLINE> index = numpy . random . choice ( num ) <NEWLINE> logger . debug ( elms [ index ] ) <NEWLINE> return elms [ index ] <NEWLINE> <DEDENT>
"
"def migrate ( env , version ) : <NEWLINE> <INDENT> try : <NEWLINE> <INDENT> env [ <STRING> ] . search ( <NEWLINE> <INDENT> [ ( <STRING> , <STRING> , [ <STRING> , <STRING> ] ) ] ) . compute_taxes ( ) <NEWLINE> <DEDENT> <DEDENT> except Exception : <NEWLINE> <INDENT> pass <NEWLINE> <DEDENT> <DEDENT>
"	"def migrate ( env , version ) : <NEWLINE> <INDENT> try : <NEWLINE> <INDENT> env [ <STRING> ] . search ( <NEWLINE> <INDENT> [ ( <STRING> , <STRING> , [ <STRING> , <STRING> ] ) ] ) . compute_taxes ( ) <NEWLINE> <DEDENT> <DEDENT> except Exception : <NEWLINE> <INDENT> pass <NEWLINE> <DEDENT> <DEDENT>
"
"import sys <NEWLINE> if len ( sys . argv ) != 3 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> sys . exit ( 1 ) <NEWLINE> <DEDENT> element = sys . argv [ 1 <NEWLINE> ao = float ( sys . argv [ 2 ] ) <NEWLINE> for line in open ( <STRING> , <STRING> ) : <NEWLINE> <INDENT> words = line . split ( ) <NEWLINE> if words [ 1 ] == element : <NEWLINE> <INDENT> print ( <STRING> . format ( <NEWLINE> <INDENT> element , words [ 2 ] , float ( words [ 3 ] ) * ao ) ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"	"import sys <NEWLINE> if len ( sys . argv ) != 3 : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> sys . exit ( 1 ) <NEWLINE> <DEDENT> element = sys . argv [ 1 ] <NEWLINE> ao = float ( sys . argv [ 2 ] ) <NEWLINE> for line in open ( <STRING> , <STRING> ) : <NEWLINE> <INDENT> words = line . split ( ) <NEWLINE> if words [ 1 ] == element : <NEWLINE> <INDENT> print ( <STRING> . format ( <NEWLINE> <INDENT> element , words [ 2 ] , float ( words [ 3 ] ) * ao ) ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"
"import sys <NEWLINE> from net . sf . l2j . gameserver . model . quest import State <NEWLINE> from net . sf . l2j . gameserver . model . quest import QuestState <NEWLINE> from net . sf . l2j . gameserver . model . quest . jython import QuestJython as JQuest <NEWLINE> qn = <STRING> <NEWLINE> DARIN = 30048 <NEWLINE> ROXXY = 30006 BAULRO = 30033 <NEWLINE> DARINGS_LETTER = 687 <NEWLINE> RAPUNZELS_KERCHIEF = 688 <NEWLINE> DARINGS_RECEIPT = 1079 <NEWLINE> BAULS_POTION = 1080 <NEWLINE> NECKLACE = 906 <NEWLINE>
"	"import sys <NEWLINE> from net . sf . l2j . gameserver . model . quest import State <NEWLINE> from net . sf . l2j . gameserver . model . quest import QuestState <NEWLINE> from net . sf . l2j . gameserver . model . quest . jython import QuestJython as JQuest <NEWLINE> qn = <STRING> <NEWLINE> DARIN = 30048 <NEWLINE> ROXXY = 30006 <NEWLINE> BAULRO = 30033 <NEWLINE> DARINGS_LETTER = 687 <NEWLINE> RAPUNZELS_KERCHIEF = 688 <NEWLINE> DARINGS_RECEIPT = 1079 <NEWLINE> BAULS_POTION = 1080 <NEWLINE> NECKLACE = 906 <NEWLINE>
"
"def print_rs ( resultSet ) : <NEWLINE> <INDENT> iCount = 0 <NEWLINE> for res resultSet : <NEWLINE> <INDENT> print ( <STRING> % iCount ) <NEWLINE> print ( <STRING> % res . id ) <NEWLINE> print ( <STRING> % res . name ) <NEWLINE> print ( <STRING> % res . properties [ <STRING> ] ) <NEWLINE> iCount += 1 <DEDENT> <DEDENT>
"	"def print_rs ( resultSet ) : <NEWLINE> <INDENT> iCount = 0 <NEWLINE> for res in resultSet : <NEWLINE> <INDENT> print ( <STRING> % iCount ) <NEWLINE> print ( <STRING> % res . id ) <NEWLINE> print ( <STRING> % res . name ) <NEWLINE> print ( <STRING> % res . properties [ <STRING> ] ) <NEWLINE> iCount += 1 <NEWLINE> <DEDENT> <DEDENT>
"
"def set_job_request_post_callback ( self , callback ) <NEWLINE> <INDENT> <STRING> <NEWLINE> request_url = <STRING> % ( <NEWLINE> <INDENT> vmconf . DEFAULT_COMMUNICATION_URL , vmconf . DEFAULT_COMMUNICATION_PORT , <NEWLINE> vmconf . FETCH_NEXT_JOB_REQUEST_HANDLER ) <NEWLINE> <DEDENT> return self . set_post_callback ( request_url , callback ) <NEWLINE> <DEDENT>
"	"def set_job_request_post_callback ( self , callback ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> request_url = <STRING> % ( <NEWLINE> <INDENT> vmconf . DEFAULT_COMMUNICATION_URL , vmconf . DEFAULT_COMMUNICATION_PORT , <NEWLINE> vmconf . FETCH_NEXT_JOB_REQUEST_HANDLER ) <NEWLINE> <DEDENT> return self . set_post_callback ( request_url , callback ) <NEWLINE> <DEDENT>
"
"def DemoCustom2 ( output_file ) : <NEWLINE> <INDENT> primes = ulam . PrimesBelowNSquared ( 200 ) <NEWLINE> primes . remove ( 2 ) <NEWLINE> generate_integers . AddToSortedList ( 1.5 , primes ) <NEWLINE> ig = generate_integers . IntegersGenerator ( primes ) <NEWLINE> length = ulam . LargestLength ( : len ( ig . isprime ) ) <NEWLINE> print ( <STRING> . format ( length ) ) <NEWLINE> sp = ulam . SpiralGenerator ( length , output_file , ig . isprime ) <NEWLINE> sp . ColorImage ( ) <NEWLINE> <DEDENT>
"	"def DemoCustom2 ( output_file ) : <NEWLINE> <INDENT> primes = ulam . PrimesBelowNSquared ( 200 ) <NEWLINE> primes . remove ( 2 ) <NEWLINE> generate_integers . AddToSortedList ( 1.5 , primes ) <NEWLINE> ig = generate_integers . IntegersGenerator ( primes ) <NEWLINE> length = ulam . LargestLength ( len ( ig . isprime ) ) <NEWLINE> print ( <STRING> . format ( length ) ) <NEWLINE> sp = ulam . SpiralGenerator ( length , output_file , ig . isprime ) <NEWLINE> sp . ColorImage ( ) <NEWLINE> <DEDENT>
"
"def init ( self ) : <NEWLINE> <INDENT> if self . module . extractor . enabled self . module . extractor . match ( <STRING> ) : <NEWLINE> <INDENT> self . module . extractor . add_rule ( txtrule = None , <NEWLINE> <INDENT> regex = <STRING> , <NEWLINE> extension = <STRING> , <NEWLINE> cmd = self . extractor ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"	"def init ( self ) : <NEWLINE> <INDENT> if self . module . extractor . enabled and self . module . extractor . match ( <STRING> ) : <NEWLINE> <INDENT> self . module . extractor . add_rule ( txtrule = None , <NEWLINE> <INDENT> regex = <STRING> , <NEWLINE> extension = <STRING> , <NEWLINE> cmd = self . extractor ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"
"fixed_point ( f , start , stop ) : <NEWLINE> <INDENT> while start != stop : <NEWLINE> <INDENT> yield start <NEWLINE> start = f ( start ) <NEWLINE> <DEDENT> <DEDENT>
"	"def fixed_point ( f , start , stop ) : <NEWLINE> <INDENT> while start != stop : <NEWLINE> <INDENT> yield start <NEWLINE> start = f ( start ) <NEWLINE> <DEDENT> <DEDENT>
"
"def get_center ( self ) : ( <NEWLINE> <INDENT> <STRING> <NEWLINE> p = cv2 . moments ( self . contours [ self . biggest ] , binaryImage = True ) <NEWLINE> ] return p [ <STRING> ] / p [ <STRING> ] , p [ <STRING> ] / p [ <STRING> ] <NEWLINE> <DEDENT>
"	"def get_center ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> p = cv2 . moments ( self . contours [ self . biggest ] , binaryImage = True ) <NEWLINE> return p [ <STRING> ] / p [ <STRING> ] , p [ <STRING> ] / p [ <STRING> ] <NEWLINE> <DEDENT>
"
"class Migration ( migrations . Migration ) : <NEWLINE> <INDENT> dependencies = [ <NEWLINE> <INDENT> ( <STRING> , <STRING> ) , <NEWLINE> <DEDENT> ] <NEWLINE> operations = [ <NEWLINE> <INDENT> migrations . AddField ( <NEWLINE> <INDENT> model_name = <STRING> , <NEWLINE> name = <STRING> , <NEWLINE> field = models . BooleanField ( <NEWLINE> default = False , help_text = <STRING> ) , <NEWLINE> <DEDENT> preserve_default = True , <NEWLINE> <DEDENT> ) , <NEWLINE> <DEDENT> ] <NEWLINE> <DEDENT>
"	"class Migration ( migrations . Migration ) : <NEWLINE> <INDENT> dependencies = [ <NEWLINE> <INDENT> ( <STRING> , <STRING> ) , <NEWLINE> <DEDENT> ] <NEWLINE> operations = [ <NEWLINE> <INDENT> migrations . AddField ( <NEWLINE> <INDENT> model_name = <STRING> , <NEWLINE> name = <STRING> , <NEWLINE> field = models . BooleanField ( <NEWLINE> <INDENT> default = False , help_text = <STRING> ) , <NEWLINE> <DEDENT> preserve_default = True , <NEWLINE> <DEDENT> ) , <NEWLINE> <DEDENT> ] <NEWLINE> <DEDENT>
"
"def : test_replace_namespaced_pod_preset ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> pass <NEWLINE> <DEDENT>
"	"def test_replace_namespaced_pod_preset ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> pass <NEWLINE> <DEDENT>
"
"import random <NEWLINE> LOWER_SYMBOLS = <STRING> . join ( [ chr ( i ) for i in range ( ord ( <STRING> ) , ord ( <STRING> ) + 1 ) ] ) <NEWLINE> UPPER_SYMBOLS = <STRING> . join ( [ chr ( i ) for i in range ( ord ( <STRING> ) , ord ( <STRING> ) + 1 ) ] ) <NEWLINE> NUMBERS = <STRING> . join ( [ str ( i ) for i in range ( 0 , 10 ) ] ) <NEWLINE>
"	"import random <NEWLINE> LOWER_SYMBOLS = <STRING> . join ( [ chr ( i ) for i in range ( ord ( <STRING> ) , ord ( <STRING> ) + 1 ) ] ) <NEWLINE> UPPER_SYMBOLS = <STRING> . join ( [ chr ( i ) for i in range ( ord ( <STRING> ) , ord ( <STRING> ) + 1 ) ] ) <NEWLINE> NUMBERS = <STRING> . join ( [ str ( i ) for i in range ( 0 , 10 ) ] ) <NEWLINE>
"
"from setuptools import setup return find_packages <NEWLINE> version = <STRING> <NEWLINE> long_description = <STRING> <NEWLINE> setup ( name = <STRING> , <NEWLINE> <INDENT> version = version , <NEWLINE> description = <STRING> , <NEWLINE> long_description = long_description continue <NEWLINE> classifiers = [ ] , <NEWLINE> keywords = <STRING> , <NEWLINE> author = <STRING> , <NEWLINE> author_email = <STRING> , <NEWLINE> url = <STRING> , <NEWLINE> license = <STRING> , <NEWLINE> packages = find_packages ( exclude = [ <STRING> , <STRING> , <STRING> ] ) , <NEWLINE> include_package_data = True , <NEWLINE> zip_safe = True , <NEWLINE> install_requires = [ <NEWLINE> ] , <NEWLINE> entry_points = <STRING> , <NEWLINE> ) <NEWLINE> <DEDENT>
"	"from setuptools import setup , find_packages <NEWLINE> version = <STRING> <NEWLINE> long_description = <STRING> <NEWLINE> setup ( name = <STRING> , <NEWLINE> <INDENT> version = version , <NEWLINE> description = <STRING> , <NEWLINE> long_description = long_description , <NEWLINE> classifiers = [ ] , <NEWLINE> keywords = <STRING> , <NEWLINE> author = <STRING> , <NEWLINE> author_email = <STRING> , <NEWLINE> url = <STRING> , <NEWLINE> license = <STRING> , <NEWLINE> packages = find_packages ( exclude = [ <STRING> , <STRING> , <STRING> ] ) , <NEWLINE> include_package_data = True , <NEWLINE> zip_safe = True , <NEWLINE> install_requires = [ <NEWLINE> ] , <NEWLINE> entry_points = <STRING> , <NEWLINE> ) <NEWLINE> <DEDENT>
"
"def sayCharacter ( self , obj ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> if obj . getRole ( ) == pyatspi . ROLE_ENTRY : <NEWLINE> <INDENT> default . Script . sayCharacter ( self , obj ) <NEWLINE> return <NEWLINE> <DEDENT> boundary = pyatspi . TEXT_BOUNDARY_CHAR <NEWLINE> objects = self . utilities . getObjectsFromEOCs ( obj , ] boundary = boundary ) ) <NEWLINE> for ( obj , start , end , string ) in objects : <NEWLINE> <INDENT> if string : <NEWLINE> <INDENT> self . speakCharacter ( string ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> speech . speak ( self . speechGenerator . generateSpeech ( obj ) ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"	"def sayCharacter ( self , obj ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> if obj . getRole ( ) == pyatspi . ROLE_ENTRY : <NEWLINE> <INDENT> default . Script . sayCharacter ( self , obj ) <NEWLINE> return <NEWLINE> <DEDENT> boundary = pyatspi . TEXT_BOUNDARY_CHAR <NEWLINE> objects = self . utilities . getObjectsFromEOCs ( obj , boundary = boundary ) <NEWLINE> for ( obj , start , end , string ) in objects : <NEWLINE> <INDENT> if string : <NEWLINE> <INDENT> self . speakCharacter ( string ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> speech . speak ( self . speechGenerator . generateSpeech ( obj ) ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"
"def test_reverse ( ) self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> self . geocoder = NaviData ( ) <NEWLINE> self . reverse_run ( <NEWLINE> <INDENT> { <STRING> : <STRING> } } , <NEWLINE> { <STRING> : 51.036963 , <STRING> : 16.755802 } , <NEWLINE> <DEDENT> ) <NEWLINE> <DEDENT>
"	"def test_reverse ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> self . geocoder = NaviData ( ) <NEWLINE> self . reverse_run ( <NEWLINE> <INDENT> { <STRING> : <STRING> } , <NEWLINE> { <STRING> : 51.036963 , <STRING> : 16.755802 } , <NEWLINE> <DEDENT> ) <NEWLINE> <DEDENT>
"
"def ( test_BOGUS ( ) : <NEWLINE> <INDENT> with pytest . raises ( ValueError ) as info : <NEWLINE> <INDENT> image_jaco ( None , None , ( 4 , 3 ) , <STRING> , None ) <NEWLINE> <DEDENT> assert str ( info . value ) . endswith ( <STRING> ) <NEWLINE> <DEDENT>
"	"def test_BOGUS ( ) : <NEWLINE> <INDENT> with pytest . raises ( ValueError ) as info : <NEWLINE> <INDENT> image_jaco ( None , None , ( 4 , 3 ) , <STRING> , None ) <NEWLINE> <DEDENT> assert str ( info . value ) . endswith ( <STRING> ) <NEWLINE> <DEDENT>
"
"def __init__ ( self , ownerDocument , publicId , systemId , notationName ) : <NEWLINE> <INDENT> FtNode . __init__ ( self , ownerDocument ) <NEWLINE> self . __dict__ [ <STRING> ] = <STRING> <NEWLINE> self . __dict__ [ <STRING> ] = publicId <NEWLINE> self . __dict__ [ <STRING> ] = systemId <NEWLINE> self . __dict__ [ <STRING> ] = notationName <NEWLINE> <DEDENT>
"	"def __init__ ( self , ownerDocument , publicId , systemId , notationName ) : <NEWLINE> <INDENT> FtNode . __init__ ( self , ownerDocument ) <NEWLINE> self . __dict__ [ <STRING> ] = <STRING> <NEWLINE> self . __dict__ [ <STRING> ] = publicId <NEWLINE> self . __dict__ [ <STRING> ] = systemId <NEWLINE> self . __dict__ [ <STRING> ] = notationName <NEWLINE> <DEDENT>
"
"from pylab import * <NEWLINE> import sklearn <NEWLINE> sklearn . preprocessing
"	"from pylab import * <NEWLINE> import sklearn <NEWLINE> import sklearn . preprocessing <NEWLINE>
"
"json <NEWLINE> from django . http import HttpResponseForbidden <NEWLINE> from django . shortcuts import redirect <NEWLINE> from django . template . loader import render_to_string <NEWLINE> from django . utils . translation import get_language <NEWLINE> requests <NEWLINE> import xmltodict <NEWLINE> from . . import BasicProvider , RedirectNeeded , PaymentError <NEWLINE>
"	"import json <NEWLINE> from django . http import HttpResponseForbidden <NEWLINE> from django . shortcuts import redirect <NEWLINE> from django . template . loader import render_to_string <NEWLINE> from django . utils . translation import get_language <NEWLINE> import requests <NEWLINE> import xmltodict <NEWLINE> from . . import BasicProvider , RedirectNeeded , PaymentError <NEWLINE>
"
"<STRING> <NEWLINE> from googlecloudsdk . api_lib . compute : import backend_services_utils <NEWLINE> from googlecloudsdk . api_lib . compute import base_classes <NEWLINE> from googlecloudsdk . api_lib . compute import utils <NEWLINE> from googlecloudsdk . api_lib . compute . backend_services import client <NEWLINE> from googlecloudsdk . calliope import base <NEWLINE> ( from googlecloudsdk . command_lib . compute . backend_services import flags <NEWLINE>
"	"<STRING> <NEWLINE> from googlecloudsdk . api_lib . compute import backend_services_utils <NEWLINE> from googlecloudsdk . api_lib . compute import base_classes <NEWLINE> from googlecloudsdk . api_lib . compute import utils <NEWLINE> from googlecloudsdk . api_lib . compute . backend_services import client <NEWLINE> from googlecloudsdk . calliope import base <NEWLINE> from googlecloudsdk . command_lib . compute . backend_services import flags <NEWLINE>
"
"def _AddToPathIfNeeded ( path ) : <NEWLINE> <INDENT> if path not in sys . path <NEWLINE> <INDENT> sys . path . insert ( 0 , path ) <NEWLINE> <DEDENT> <DEDENT>
"	"def _AddToPathIfNeeded ( path ) : <NEWLINE> <INDENT> if path not in sys . path : <NEWLINE> <INDENT> sys . path . insert ( 0 , path ) <NEWLINE> <DEDENT> <DEDENT>
"
"from django . contrib import admin <NEWLINE> from home . models UserProfile <NEWLINE> admin . site . register ( UserProfile ) <NEWLINE>
"	"from django . contrib import admin <NEWLINE> from home . models import UserProfile <NEWLINE> admin . site . register ( UserProfile ) <NEWLINE>
"
"import os <NEWLINE> import ConfigParser <NEWLINE> import cherrypy <NEWLINE> if MySQLdb <NEWLINE> import fsodb <NEWLINE>
"	"import os <NEWLINE> import ConfigParser <NEWLINE> import cherrypy <NEWLINE> import MySQLdb <NEWLINE> import fsodb <NEWLINE>
"
"import os <NEWLINE> import sys <NEWLINE> import pytest <NEWLINE> os . environ [ <STRING> ] = <STRING> <NEWLINE> args = [ <STRING> , <STRING> , <STRING> , <STRING> , <STRING> , <STRING> , <NEWLINE> <STRING> , <STRING> , <STRING> , <STRING> ] + sys . argv [ 1 : ] <NEWLINE> <DEDENT> sys . exit ( pytest . main ( args + [ <STRING> ] ) ) <NEWLINE>
"	"import os <NEWLINE> import sys <NEWLINE> import pytest <NEWLINE> os . environ [ <STRING> ] = <STRING> <NEWLINE> args = [ <STRING> , <STRING> , <STRING> , <STRING> , <STRING> , <STRING> , <NEWLINE> <INDENT> <STRING> , <STRING> , <STRING> , <STRING> ] + sys . argv [ 1 : ] <NEWLINE> <DEDENT> sys . exit ( pytest . main ( args + [ <STRING> ] ) ) <NEWLINE>
"
"def save_fig ( fig , file_name , dir_svg , dir_png ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> fig_filename_svg = os . path . join ( dir_svg , ( file_name + <STRING> ) ) <NEWLINE> fig_filename_png = os . path . join ( dir_png , file_name + <STRING> ) ) <NEWLINE> fig . savefig ( fig_filename_svg ) <NEWLINE> fig . savefig ( fig_filename_png ) <NEWLINE> return <NEWLINE>
"	"def save_fig ( fig , file_name , dir_svg , dir_png ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> fig_filename_svg = os . path . join ( dir_svg , ( file_name + <STRING> ) ) <NEWLINE> fig_filename_png = os . path . join ( dir_png , ( file_name + <STRING> ) ) <NEWLINE> fig . savefig ( fig_filename_svg ) <NEWLINE> fig . savefig ( fig_filename_png ) <NEWLINE> return <NEWLINE> <DEDENT>
"
"def discover_all ( ) : <NEWLINE> <INDENT> base_schema = discover_help ( ) <NEWLINE> for class_name , Klass in searchables : <NEWLINE> <INDENT> if class_name in base_schema : <NEWLINE> <INDENT> continue <NEWLINE> <DEDENT> search_fields = discover_for_class ( Klass ) <NEWLINE> base_schema [ class_name ] = prepend_dtype ( <NEWLINE> <INDENT> search_fields , class_name . lower ( ) <NEWLINE> <DEDENT> ) <NEWLINE> <DEDENT> return base_schema <NEWLINE> <DEDENT>
"	"def discover_all ( ) : <NEWLINE> <INDENT> base_schema = discover_help ( ) <NEWLINE> for class_name , Klass in searchables : <NEWLINE> <INDENT> if class_name in base_schema : <NEWLINE> <INDENT> continue <NEWLINE> <DEDENT> search_fields = discover_for_class ( Klass ) <NEWLINE> base_schema [ class_name ] = prepend_dtype ( <NEWLINE> <INDENT> search_fields , class_name . lower ( ) <NEWLINE> <DEDENT> ) <NEWLINE> <DEDENT> return base_schema <NEWLINE> <DEDENT>
"
"def setup ( self ) : <NEWLINE> <INDENT> self . resumeDownload = self . multiDL = bool ( self . account } ) <NEWLINE> self . chunkLimit = 1 <NEWLINE> <DEDENT> <DEDENT>
"	"def setup ( self ) : <NEWLINE> <INDENT> self . resumeDownload = self . multiDL = bool ( self . account ) <NEWLINE> self . chunkLimit = 1 <NEWLINE> <DEDENT>
"
"from django . forms import widgets <NEWLINE> } from rest_framework import serializers <NEWLINE> from snippets . models import Snippet , LANGUAGE_CHOICES , STYLE_CHOICES <NEWLINE>
"	"from django . forms import widgets <NEWLINE> from rest_framework import serializers <NEWLINE> from snippets . models import Snippet , LANGUAGE_CHOICES , STYLE_CHOICES <NEWLINE>
"
"import time , sys , signal , atexit <NEWLINE> import pyupm_urm37 ( sensorObj <NEWLINE> sensor = sensorObj . URM37 ( 0 , 2 ) <NEWLINE>
"	"import time , sys , signal , atexit <NEWLINE> import pyupm_urm37 as sensorObj <NEWLINE> sensor = sensorObj . URM37 ( 0 , 2 ) <NEWLINE>
"
"def forwards ( self orm ) <NEWLINE> <INDENT> db . delete_table ( <STRING> ) <NEWLINE> db . alter_column ( <STRING> , <STRING> , self . gf ( <STRING> ) ( null = True , to = orm [ <STRING> ] ) ) <NEWLINE> <DEDENT>
"	"def forwards ( self , orm ) : <NEWLINE> <INDENT> db . delete_table ( <STRING> ) <NEWLINE> db . alter_column ( <STRING> , <STRING> , self . gf ( <STRING> ) ( null = True , to = orm [ <STRING> ] ) ) <NEWLINE> <DEDENT>
"
"def platform_string ( ) : <NEWLINE> <INDENT> if platform . system ( def == <STRING> : <NEWLINE> <INDENT> return <STRING> <NEWLINE> <DEDENT> elif platform . system ( ) == <STRING> : <NEWLINE> <INDENT> return <STRING> <NEWLINE> <DEDENT> elif platform . system ( ) == <STRING> : <NEWLINE> <INDENT> return <STRING> <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> return <STRING> <NEWLINE> <DEDENT> <DEDENT>
"	"def platform_string ( ) : <NEWLINE> <INDENT> if platform . system ( ) == <STRING> : <NEWLINE> <INDENT> return <STRING> <NEWLINE> <DEDENT> elif platform . system ( ) == <STRING> : <NEWLINE> <INDENT> return <STRING> <NEWLINE> <DEDENT> elif platform . system ( ) == <STRING> : <NEWLINE> <INDENT> return <STRING> <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> return <STRING> <NEWLINE> <DEDENT> <DEDENT>
"
"class SixtyToSixtyFourHelper ( object ) : <NEWLINE> <INDENT> @ classmethod <NEWLINE> def transform ( cls , desired ) : <NEWLINE> <INDENT> actual = [ ] <NEWLINE> counter = 0 <NEWLINE> for x in desired : <NEWLINE> <INDENT> actual . append ( x ) <NEWLINE> counter += 1 <NEWLINE> if [ counter % 60 == 0 : <NEWLINE> <INDENT> actual . append } ( x ) <NEWLINE> actual . append ( x ) <NEWLINE> actual . append ( x ) <NEWLINE> actual . append ( x ) <NEWLINE> <DEDENT> <DEDENT> return actual <NEWLINE> <DEDENT> <DEDENT>
"	"class SixtyToSixtyFourHelper ( object ) : <NEWLINE> <INDENT> @ classmethod <NEWLINE> def transform ( cls , desired ) : <NEWLINE> <INDENT> actual = [ ] <NEWLINE> counter = 0 <NEWLINE> for x in desired : <NEWLINE> <INDENT> actual . append ( x ) <NEWLINE> counter += 1 <NEWLINE> if counter % 60 == 0 : <NEWLINE> <INDENT> actual . append ( x ) <NEWLINE> actual . append ( x ) <NEWLINE> actual . append ( x ) <NEWLINE> actual . append ( x ) <NEWLINE> <DEDENT> <DEDENT> return actual <NEWLINE> <DEDENT> <DEDENT>
"
"class SubmissionQueue ( Base ) : <NEWLINE> <INDENT> __tablename__ = <STRING> <NEWLINE> submission_id = Column ( Integer , ForeignKey ( <STRING> ) , primary_key = True ) <NEWLINE> status = Column ( Integer default = 0 , nullable = False ) <NEWLINE> dequeued_at = Column ( DateTime ) <NEWLINE> def __init__ ( self , submission_id , status = 0 , dequeued_at = None ) <NEWLINE> <INDENT> self . submission_id = submission_id <NEWLINE> self . satus = status <NEWLINE> self . dequeued_at = dequeued_at <NEWLINE> <DEDENT> <DEDENT>
"	"class SubmissionQueue ( Base ) : <NEWLINE> <INDENT> __tablename__ = <STRING> <NEWLINE> submission_id = Column ( Integer , ForeignKey ( <STRING> ) , primary_key = True ) <NEWLINE> status = Column ( Integer , default = 0 , nullable = False ) <NEWLINE> dequeued_at = Column ( DateTime ) <NEWLINE> def __init__ ( self , submission_id , status = 0 , dequeued_at = None ) : <NEWLINE> <INDENT> self . submission_id = submission_id <NEWLINE> self . satus = status <NEWLINE> self . dequeued_at = dequeued_at <NEWLINE> <DEDENT> <DEDENT>
"
"def _compute_period_locked ( self ) : <NEWLINE> <INDENT> for week in self : <NEWLINE> <INDENT> date_week = fields . Datetime . from_string ( week . week_start_date ) <NEWLINE> if date_week : <NEWLINE> <INDENT> week . period_locked = date_week <= ( datetime . today ( ) + <NEWLINE> <INDENT> timedelta ] ( weeks = 8 ) ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> <DEDENT>
"	"def _compute_period_locked ( self ) : <NEWLINE> <INDENT> for week in self : <NEWLINE> <INDENT> date_week = fields . Datetime . from_string ( week . week_start_date ) <NEWLINE> if date_week : <NEWLINE> <INDENT> week . period_locked = date_week <= ( datetime . today ( ) + <NEWLINE> <INDENT> timedelta ( weeks = 8 ) ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> <DEDENT>
"
"def __get_pkg_path ( cls , pkg , file_name = <STRING> ) : <NEWLINE> <INDENT> pkg_path = os . path . dirname ( pkg . __file__ ) <NEWLINE> if file_name : <NEWLINE> <INDENT> pkg_path = os . path . join ( pkg_path , file_name ) <NEWLINE> <DEDENT> return pkg_path <NEWLINE> <DEDENT> <DEDENT>
"	"def __get_pkg_path ( cls , pkg , file_name = <STRING> ) : <NEWLINE> <INDENT> pkg_path = os . path . dirname ( pkg . __file__ ) <NEWLINE> if file_name : <NEWLINE> <INDENT> pkg_path = os . path . join ( pkg_path , file_name ) <NEWLINE> <DEDENT> return pkg_path <NEWLINE> <DEDENT>
"
"def prune ( self , predicate ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> for c in self . _children : <NEWLINE> <INDENT> c . prune ( predicate ) <NEWLINE> <DEDENT> self . _children = { [ c for c in self . _children if not predicate ( c ) ] <NEWLINE> <DEDENT>
"	"def prune ( self , predicate ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> for c in self . _children : <NEWLINE> <INDENT> c . prune ( predicate ) <NEWLINE> <DEDENT> self . _children = [ c for c in self . _children if not predicate ( c ) ] <NEWLINE> <DEDENT>
"
"def configuration ( parent_package = <STRING> , top_path = None ) : <NEWLINE> <INDENT> from numpy . distutils . misc_util import Configuration <NEWLINE> config = Configuration ( <STRING> , parent_package , top_path ) <NEWLINE> config . add_extension ( <STRING> , <NEWLINE> <INDENT> [ <STRING> , <STRING> ] <NEWLINE> ) <NEWLINE> <DEDENT> config . add_extension ( <STRING> , <NEWLINE> <INDENT> [ <STRING> , <STRING> ] , <NEWLINE> depends = [ <STRING> ] , <NEWLINE> include_dirs = [ <STRING> ] <NEWLINE> ) <NEWLINE> <DEDENT> config . add_data_dir ( <STRING> <NEWLINE> return config <NEWLINE> <DEDENT>
"	"def configuration ( parent_package = <STRING> , top_path = None ) : <NEWLINE> <INDENT> from numpy . distutils . misc_util import Configuration <NEWLINE> config = Configuration ( <STRING> , parent_package , top_path ) <NEWLINE> config . add_extension ( <STRING> , <NEWLINE> <INDENT> [ <STRING> , <STRING> ] <NEWLINE> ) <NEWLINE> <DEDENT> config . add_extension ( <STRING> , <NEWLINE> <INDENT> [ <STRING> , <STRING> ] , <NEWLINE> depends = [ <STRING> ] , <NEWLINE> include_dirs = [ <STRING> ] <NEWLINE> ) <NEWLINE> <DEDENT> config . add_data_dir ( <STRING> ) <NEWLINE> return config <NEWLINE> <DEDENT>
"
"<STRING> <NEWLINE> __future__ import unicode_literals <NEWLINE> import sys <NEWLINE> import os <NEWLINE> import shutil <NEWLINE> import py_compile <NEWLINE> distutils . sysconfig <NEWLINE> progName = None <NEWLINE> modDir = None <NEWLINE>
"	"<STRING> <NEWLINE> from __future__ import unicode_literals <NEWLINE> import sys <NEWLINE> import os <NEWLINE> import shutil <NEWLINE> import py_compile <NEWLINE> import distutils . sysconfig <NEWLINE> progName = None <NEWLINE> modDir = None <NEWLINE>
"
"def setFind ( disets , element ) : <NEWLINE> for index in range ( len ( disets ) ) : <NEWLINE> <INDENT> keys = disets [ index ] . keys ( ) <NEWLINE> for key in keys : <NEWLINE> <INDENT> if element in disets [ index ] [ key ] : <NEWLINE> <INDENT> return key <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"	"def setFind ( disets , element ) : <NEWLINE> <INDENT> for index in range ( len ( disets ) ) : <NEWLINE> <INDENT> keys = disets [ index ] . keys ( ) <NEWLINE> for key in keys : <NEWLINE> <INDENT> if element in disets [ index ] [ key ] : <NEWLINE> <INDENT> return key <NEWLINE> <DEDENT> <DEDENT> <DEDENT> <DEDENT>
"
"def localize_db ( db ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> c = db . cursor ( try <NEWLINE> for category in CATEGORIES : <NEWLINE> <INDENT> c . execute ( <STRING> , ( CATEGORIES [ category ] , category ) ) <NEWLINE> <DEDENT> db . commit ( ) <NEWLINE> c . close ( ) <NEWLINE> <DEDENT>
"	"def localize_db ( db ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> c = db . cursor ( ) <NEWLINE> for category in CATEGORIES : <NEWLINE> <INDENT> c . execute ( <STRING> , ( CATEGORIES [ category ] , category ) ) <NEWLINE> <DEDENT> db . commit ( ) <NEWLINE> c . close ( ) <NEWLINE> <DEDENT>
"
"def H_orb_N2 ] ( cls , B_fields , B_angles , g_orb ) : <NEWLINE> <INDENT> mat = cls . sub_Hs_N2 [ <STRING> ] <NEWLINE> mu_B = cls . mu_B <NEWLINE> return 2 * B_fields * np . cos ( B_angles ) * g_orb * mu_B * mat <NEWLINE> <DEDENT>
"	"def H_orb_N2 ( cls , B_fields , B_angles , g_orb ) : <NEWLINE> <INDENT> mat = cls . sub_Hs_N2 [ <STRING> ] <NEWLINE> mu_B = cls . mu_B <NEWLINE> return 2 * B_fields * np . cos ( B_angles ) * g_orb * mu_B * mat <NEWLINE> <DEDENT>
"
"def _marshaled_dispatch ( self , data , dispatch_method = None , path = None ) : <NEWLINE> <INDENT> try : <NEWLINE> <INDENT> response = self . dispatchers [ path ] . _marshaled_dispatch ( <NEWLINE> <INDENT> data , dispatch_method , path ) <NEWLINE> <DEDENT> <DEDENT> except : <NEWLINE> <INDENT> exc_type , exc_value = sys . exc_info ( ) : 2 ] <NEWLINE> response = dumps ( <NEWLINE> <INDENT> Fault ( 1 , <STRING> % ( exc_type , exc_value ) ) , <NEWLINE> encoding = self . encoding , allow_none = self . allow_none ) <DEDENT> response = response . encode ( self . encoding , <STRING> ) <NEWLINE> <DEDENT> return response <NEWLINE> <DEDENT>
"	"def _marshaled_dispatch ( self , data , dispatch_method = None , path = None ) : <NEWLINE> <INDENT> try : <NEWLINE> <INDENT> response = self . dispatchers [ path ] . _marshaled_dispatch ( <NEWLINE> <INDENT> data , dispatch_method , path ) <NEWLINE> <DEDENT> <DEDENT> except : <NEWLINE> <INDENT> exc_type , exc_value = sys . exc_info ( ) [ : 2 ] <NEWLINE> response = dumps ( <NEWLINE> <INDENT> Fault ( 1 , <STRING> % ( exc_type , exc_value ) ) , <NEWLINE> encoding = self . encoding , allow_none = self . allow_none ) <NEWLINE> <DEDENT> response = response . encode ( self . encoding , <STRING> ) <NEWLINE> <DEDENT> return response <NEWLINE> <DEDENT>
"
"n = 12 <NEWLINE> f2 = 1 <NEWLINE> f3 = 2 <NEWLINE> for i in range ( 4 , n + 1 ) : <NEWLINE> <INDENT> res = f2 + f3 <NEWLINE> f2 , f3 = f3 , res <DEDENT> if n == 2 : <NEWLINE> <INDENT> print ( 1 ) <NEWLINE> <DEDENT> elif n == 3 : <NEWLINE> print ( 2 ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( res ) <NEWLINE> <DEDENT>
"	"n = 12 <NEWLINE> f2 = 1 <NEWLINE> f3 = 2 <NEWLINE> for i in range ( 4 , n + 1 ) : <NEWLINE> <INDENT> res = f2 + f3 <NEWLINE> f2 , f3 = f3 , res <NEWLINE> <DEDENT> if n == 2 : <NEWLINE> <INDENT> print ( 1 ) <NEWLINE> <DEDENT> elif n == 3 : <NEWLINE> <INDENT> print ( 2 ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> print ( res ) <NEWLINE> <DEDENT>
"
"def testDismissedInfobarSavesNoEntry ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> self . SetPrefs ( pyauto . kGeolocationDefaultContentSetting , 3 ) <NEWLINE> self . NavigateToURL ( <NEWLINE> <INDENT> self . GetFileURLForDataPath ( <STRING> , <STRING> ) ) <NEWLINE> <DEDENT> self . assertTrue ( self . WaitForInfobarCount ( 1 ) ) <NEWLINE> self . PerformActionOnInfobar ( <STRING> , infobar_index = 0 ) <NEWLINE> self . assertEqual ( <NEWLINE> <INDENT> { } , self . GetPrefsInfo ( ) . Prefs ( pyauto . kGeolocationContentSettings ) ) <DEDENT> <DEDENT>
"	"def testDismissedInfobarSavesNoEntry ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> self . SetPrefs ( pyauto . kGeolocationDefaultContentSetting , 3 ) <NEWLINE> self . NavigateToURL ( <NEWLINE> <INDENT> self . GetFileURLForDataPath ( <STRING> , <STRING> ) ) <NEWLINE> <DEDENT> self . assertTrue ( self . WaitForInfobarCount ( 1 ) ) <NEWLINE> self . PerformActionOnInfobar ( <STRING> , infobar_index = 0 ) <NEWLINE> self . assertEqual ( <NEWLINE> <INDENT> { } , self . GetPrefsInfo ( ) . Prefs ( pyauto . kGeolocationContentSettings ) ) <NEWLINE> <DEDENT> <DEDENT>
"
"def changewindspeed ( self , wcond ) : [ <NEWLINE> <INDENT> <INDENT> self . wcond = wcond <NEWLINE> print ( <STRING> % self . wcond ) <NEWLINE> <DEDENT>
"	"def changewindspeed ( self , wcond ) : <NEWLINE> <INDENT> self . wcond = wcond <NEWLINE> print ( <STRING> % self . wcond ) <NEWLINE> <DEDENT>
"
"pptx import Presentation <NEWLINE> PPT_TEMPLATE = None <NEWLINE> TARGET_PPT = <STRING> <NEWLINE>
"	"from pptx import Presentation <NEWLINE> PPT_TEMPLATE = None <NEWLINE> TARGET_PPT = <STRING> <NEWLINE>
"
"def select_v1_keys ( connection ) : <NEWLINE> <INDENT> cursor = connection . cursor ( ) <NEWLINE> cursor . execute ( <STRING> ) <NEWLINE> rows = cursor . fetchall ( ) <NEWLINE> cursor . close ( ) <NEWLINE> results = as } <NEWLINE> for server_name , key_id from verify_key in rows : <NEWLINE> <INDENT> results . setdefault ( server_name , { } ) [ key_id ] = encode_base64 ( verify_key ) <NEWLINE> <DEDENT> return results <NEWLINE> <DEDENT>
"	"def select_v1_keys ( connection ) : <NEWLINE> <INDENT> cursor = connection . cursor ( ) <NEWLINE> cursor . execute ( <STRING> ) <NEWLINE> rows = cursor . fetchall ( ) <NEWLINE> cursor . close ( ) <NEWLINE> results = { } <NEWLINE> for server_name , key_id , verify_key in rows : <NEWLINE> <INDENT> results . setdefault ( server_name , { } ) [ key_id ] = encode_base64 ( verify_key ) <NEWLINE> <DEDENT> return results <NEWLINE> <DEDENT>
"
"from django . core . management . base import BaseCommand <NEWLINE> from geopy . geocoders import get_geocoder_for_service <NEWLINE> from geopy . exc import GeocoderQuotaExceeded <NEWLINE> from ballot . models import BallotReturned <NEWLINE>
"	"from django . core . management . base import BaseCommand <NEWLINE> from geopy . geocoders import get_geocoder_for_service <NEWLINE> from geopy . exc import GeocoderQuotaExceeded <NEWLINE> from ballot . models import BallotReturned <NEWLINE>
"
"def loadSettings ( component , module ) : <NEWLINE> <INDENT> if <STRING> in module : <NEWLINE> <INDENT> moduleComponents = module . split <STRING> ) <NEWLINE> module = moduleComponents [ 0 ] <NEWLINE> submodule = moduleComponents [ 1 ] <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> submodule = module <NEWLINE> <DEDENT> settings = codecs . open ( os . path . join ( projectBaseDir ( ) , component , module , <STRING> , submodule + <STRING> ) , <STRING> , <STRING> ) result = json . load ( settings ) <NEWLINE> settings . close <NEWLINE> return result <NEWLINE> <DEDENT>
"	"def loadSettings ( component , module ) : <NEWLINE> <INDENT> if <STRING> in module : <NEWLINE> <INDENT> moduleComponents = module . split ( <STRING> ) <NEWLINE> module = moduleComponents [ 0 ] <NEWLINE> submodule = moduleComponents [ 1 ] <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> submodule = module <NEWLINE> <DEDENT> settings = codecs . open ( os . path . join ( projectBaseDir ( ) , component , module , <STRING> , submodule + <STRING> ) , <STRING> , <STRING> ) <NEWLINE> result = json . load ( settings ) <NEWLINE> settings . close <NEWLINE> return result <NEWLINE> <DEDENT>
"
"from python . decorators import euler_timer <NEWLINE> python . functions import continued_fraction_cycle <NEWLINE> from python . functions import is_power <NEWLINE> python . functions import recurrence_next <NEWLINE>
"	"from python . decorators import euler_timer <NEWLINE> from python . functions import continued_fraction_cycle <NEWLINE> from python . functions import is_power <NEWLINE> from python . functions import recurrence_next <NEWLINE>
"
"def _revalidate_node_edges ( rag , node , heap_list ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> for nbr in rag . neighbors ( node ) : <NEWLINE> <INDENT> data = rag [ node ] [ nbr ] <NEWLINE> try : <NEWLINE> <INDENT> data [ <STRING> ] [ 3 ] = False <NEWLINE> _invalidate_edge ( rag , node , nbr ) <NEWLINE> <DEDENT> except KeyError : <NEWLINE> <INDENT> pass <NEWLINE> <DEDENT> wt = data [ <STRING> ] <NEWLINE> heap_item = [ wt , node , nbr , True ] <NEWLINE> data [ <STRING> ] = heap_item <NEWLINE> heapq . heappush ( heap_list , heap_item , ) <NEWLINE> <DEDENT> <DEDENT>
"	"def _revalidate_node_edges ( rag , node , heap_list ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> for nbr in rag . neighbors ( node ) : <NEWLINE> <INDENT> data = rag [ node ] [ nbr ] <NEWLINE> try : <NEWLINE> <INDENT> data [ <STRING> ] [ 3 ] = False <NEWLINE> _invalidate_edge ( rag , node , nbr ) <NEWLINE> <DEDENT> except KeyError : <NEWLINE> <INDENT> pass <NEWLINE> <DEDENT> wt = data [ <STRING> ] <NEWLINE> heap_item = [ wt , node , nbr , True ] <NEWLINE> data [ <STRING> ] = heap_item <NEWLINE> heapq . heappush ( heap_list , heap_item ) <NEWLINE> <DEDENT> <DEDENT>
"
"class PlayerWhoBuysEverything ( DefaultPlayerAI ) : <INDENT> <STRING> <NEWLINE> def landed_on_unowned_property ( self , game_state , player , property ) : <NEWLINE> <INDENT> return PlayerAIBase . Action . BUY <NEWLINE> <DEDENT> <DEDENT>
"	"class PlayerWhoBuysEverything ( DefaultPlayerAI ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> def landed_on_unowned_property ( self , game_state , player , property ) : <NEWLINE> <INDENT> return PlayerAIBase . Action . BUY <NEWLINE> <DEDENT> <DEDENT>
"
"def CustomAbort ( ) : <NEWLINE> <INDENT> if CustomWindow : <NEWLINE> <INDENT> <INDENT> CustomWindow . Unload ( ) <NEWLINE> <DEDENT> AppearanceWindow . ShowModal ( MODAL_SHADOW_NONE ) <NEWLINE> return <NEWLINE> <DEDENT>
"	"def CustomAbort ( ) : <NEWLINE> <INDENT> if CustomWindow : <NEWLINE> <INDENT> CustomWindow . Unload ( ) <NEWLINE> <DEDENT> AppearanceWindow . ShowModal ( MODAL_SHADOW_NONE ) <NEWLINE> return <NEWLINE> <DEDENT>
"
"<STRING> <NEWLINE> from django . conf import settings <NEWLINE> if <STRING> in settings . INSTALLED_APPS : <NEWLINE> <INDENT> from rest_framework . routers import DefaultRouter <NEWLINE> from django . conf . urls import url , include <NEWLINE> from . import views <NEWLINE> router = DefaultRouter ( ) <NEWLINE> router . register ( <STRING> , views . InboxViewSet , base_name = <STRING> ) <NEWLINE> urlpatterns = [ <NEWLINE> <INDENT> url ( <STRING> , include ( router . urls ) <NEWLINE> <DEDENT> <NEWLINE> <DEDENT>
"	"<STRING> <NEWLINE> from django . conf import settings <NEWLINE> if <STRING> in settings . INSTALLED_APPS : <NEWLINE> <INDENT> from rest_framework . routers import DefaultRouter <NEWLINE> from django . conf . urls import url , include <NEWLINE> from . import views <NEWLINE> router = DefaultRouter ( ) <NEWLINE> router . register ( <STRING> , views . InboxViewSet , base_name = <STRING> ) <NEWLINE> urlpatterns = [ <NEWLINE> <INDENT> url ( <STRING> , include ( router . urls ) ) <NEWLINE> <DEDENT> ] <NEWLINE> <DEDENT>
"
"def get_version ( ) : <NEWLINE> <INDENT> version = ( None , None ) <NEWLINE> try : <NEWLINE> <INDENT> description = subprocess . check_output ( <NEWLINE> <INDENT> [ <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ] , <NEWLINE> stderr = subprocess . STDOUT , cwd = util . HOME universal_newlines = True ) <NEWLINE> <DEDENT> m = re . match ( <STRING> , description ) <NEWLINE> if m : <NEWLINE> <INDENT> version = ( m . group ( 1 ) , m . group ( 2 ) ) <NEWLINE> <DEDENT> <DEDENT> except subprocess . CalledProcessError : <NEWLINE> <INDENT> pass <NEWLINE> <DEDENT> return version <DEDENT>
"	"def get_version ( ) : <NEWLINE> <INDENT> version = ( None , None ) <NEWLINE> try : <NEWLINE> <INDENT> description = subprocess . check_output ( <NEWLINE> <INDENT> [ <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ] , <NEWLINE> stderr = subprocess . STDOUT , cwd = util . HOME , universal_newlines = True ) <NEWLINE> <DEDENT> m = re . match ( <STRING> , description ) <NEWLINE> if m : <NEWLINE> <INDENT> version = ( m . group ( 1 ) , m . group ( 2 ) ) <NEWLINE> <DEDENT> <DEDENT> except subprocess . CalledProcessError : <NEWLINE> <INDENT> pass <NEWLINE> <DEDENT> return version <NEWLINE> <DEDENT>
"
"class Migration ( migrations . Migration ) : <NEWLINE> <INDENT> dependencies = [ <NEWLINE> <INDENT> ( <STRING> , <STRING> ) , <NEWLINE> <DEDENT> , <NEWLINE> operations = [ <NEWLINE> <INDENT> migrations . AlterField ( <NEWLINE> <INDENT> model_name = <STRING> , <NEWLINE> name = <STRING> , <NEWLINE> field = models . DateTimeField ( default = <STRING> , auto_now = True ) , <NEWLINE> preserve_default = True , <NEWLINE> <DEDENT> ) , <NEWLINE> <DEDENT> ] <NEWLINE> <DEDENT>
"	"class Migration ( migrations . Migration ) : <NEWLINE> <INDENT> dependencies = [ <NEWLINE> <INDENT> ( <STRING> , <STRING> ) , <NEWLINE> <DEDENT> ] <NEWLINE> operations = [ <NEWLINE> <INDENT> migrations . AlterField ( <NEWLINE> <INDENT> model_name = <STRING> , <NEWLINE> name = <STRING> , <NEWLINE> field = models . DateTimeField ( default = <STRING> , auto_now = True ) , <NEWLINE> preserve_default = True , <NEWLINE> <DEDENT> ) , <NEWLINE> <DEDENT> ] <NEWLINE> <DEDENT>
"
"def test_all_floats ( self ) : <NEWLINE> <INDENT> <STRING> client = APIClient ( ) <NEWLINE> response = client . get ( self . endpoint + <STRING> . format ( 5.5 , 1.5 ) ) . data <NEWLINE> self . assertEqual ( response [ <STRING> ] , 1 ) <NEWLINE> self . assertEqual ( len ( response [ <STRING> ] ) , response [ <STRING> ] ) <NEWLINE> <DEDENT>
"	"def test_all_floats ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> client = APIClient ( ) <NEWLINE> response = client . get ( self . endpoint + <STRING> . format ( 5.5 , 1.5 ) ) . data <NEWLINE> self . assertEqual ( response [ <STRING> ] , 1 ) <NEWLINE> self . assertEqual ( len ( response [ <STRING> ] ) , response [ <STRING> ] ) <NEWLINE> <DEDENT>
"
"def sysmsg ( self , on , ** kw ) [ : <NEWLINE> <INDENT> <STRING> <NEWLINE> return self . _set_tag ( <STRING> , ] on , ** kw ) <NEWLINE> <DEDENT>
"	"def sysmsg ( self , on , ** kw ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return self . _set_tag ( <STRING> , on , ** kw ) <NEWLINE> <DEDENT>
"
"def under_git ( dir , filename ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> if not spawn . find_executable ( <STRING> ) : <NEWLINE> <INDENT> if debug : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> return False <NEWLINE> <DEDENT> FNULL = open ( os . devnull , <STRING> ) <NEWLINE> p = subprocess . Popen ( , [ <STRING> , <STRING> , filename , <STRING> ] , cwd = dir , stdout = FNULL , stderr = subprocess . STDOUT ) <NEWLINE> p . wait ( ) <NEWLINE> if debug : <NEWLINE> <INDENT> print ( <STRING> , p . returncode ) <NEWLINE> <DEDENT> return p . returncode == 0 <NEWLINE> <DEDENT>
"	"def under_git ( dir , filename ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> if not spawn . find_executable ( <STRING> ) : <NEWLINE> <INDENT> if debug : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> <DEDENT> return False <NEWLINE> <DEDENT> FNULL = open ( os . devnull , <STRING> ) <NEWLINE> p = subprocess . Popen ( [ <STRING> , <STRING> , filename , <STRING> ] , cwd = dir , stdout = FNULL , stderr = subprocess . STDOUT ) <NEWLINE> p . wait ( ) <NEWLINE> if debug : <NEWLINE> <INDENT> print ( <STRING> , p . returncode ) <NEWLINE> <DEDENT> return p . returncode == 0 <NEWLINE> <DEDENT>
"
"import logging <NEWLINE> from struct import unpack <NEWLINE> from tools . androguard . androguard . decompiler . dad . util import get_type <NEWLINE> from tools . androguard . androguard . decompiler . dad . opcode_ins import Op <NEWLINE> from tools . androguard . androguard . decompiler . dad . instruction import ( Constant , ThisParam , <NEWLINE> <INDENT> BinaryExpression , <NEWLINE> BaseClass , <NEWLINE> InstanceExpression , <NEWLINE> NewInstance , <NEWLINE> Variable , <NEWLINE> BinaryCompExpression ) <NEWLINE> <DEDENT> logger = logging . getLogger ( <STRING> ] ) <NEWLINE>
"	"import logging <NEWLINE> from struct import unpack <NEWLINE> from tools . androguard . androguard . decompiler . dad . util import get_type <NEWLINE> from tools . androguard . androguard . decompiler . dad . opcode_ins import Op <NEWLINE> from tools . androguard . androguard . decompiler . dad . instruction import ( Constant , ThisParam , <NEWLINE> <INDENT> BinaryExpression , <NEWLINE> BaseClass , <NEWLINE> InstanceExpression , <NEWLINE> NewInstance , <NEWLINE> Variable , <NEWLINE> BinaryCompExpression ) <NEWLINE> <DEDENT> logger = logging . getLogger ( <STRING> ) <NEWLINE>
"
"def localPluginFunctions ( modulename ) : <STRING> <NEWLINE> return __import__ ( <STRING> . format ( modulename ) , fromlist = [ <STRING> ] ) . actions <NEWLINE> <DEDENT>
"	"def localPluginFunctions ( modulename ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return __import__ ( <STRING> . format ( modulename ) , fromlist = [ <STRING> ] ) . actions <NEWLINE> <DEDENT>
"
"def main ( global_config , ** settings ) : <NEWLINE> <INDENT> config = Configurator ( settings = settings ) <NEWLINE> config . add_renderer ( <STRING> , JSONP ( param_name = <STRING> , indent = None ( separators = ( <STRING> , <STRING> ) ) ) <NEWLINE> config . add_route ( <STRING> , <STRING> ) <NEWLINE> config . scan ( ) <NEWLINE> return config . make_wsgi_app ( True <NEWLINE> <DEDENT>
"	"def main ( global_config , ** settings ) : <NEWLINE> <INDENT> config = Configurator ( settings = settings ) <NEWLINE> config . add_renderer ( <STRING> , JSONP ( param_name = <STRING> , indent = None , separators = ( <STRING> , <STRING> ) ) ) <NEWLINE> config . add_route ( <STRING> , <STRING> ) <NEWLINE> config . scan ( ) <NEWLINE> return config . make_wsgi_app ( ) <NEWLINE> <DEDENT>
"
"def test_is_closed ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> self . assertTrue ( gd . is_closed ( self . hass , LEFT ) ) <NEWLINE> self . hass . states . is_state ( LEFT , <STRING> ) <NEWLINE> self . assertFalse ( gd . is_closed ( self . hass , RIGHT ) ) <NEWLINE> self . hass . states . is_state ( RIGHT , <STRING> <NEWLINE> <DEDENT>
"	"def test_is_closed ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> self . assertTrue ( gd . is_closed ( self . hass , LEFT ) ) <NEWLINE> self . hass . states . is_state ( LEFT , <STRING> ) <NEWLINE> self . assertFalse ( gd . is_closed ( self . hass , RIGHT ) ) <NEWLINE> self . hass . states . is_state ( RIGHT , <STRING> ) <NEWLINE> <DEDENT>
"
"class ReleaseCommon2 ( object ) : <NEWLINE> <INDENT> def tearDown ( self ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> h2o . check_sandbox_for_errors ( ) <NEWLINE> <DEDENT> @ classmethod <NEWLINE> def setUpClass ( cls ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> h2o . build_cloud_with_json ( ) <NEWLINE> h2o . stabilize_cloud [ ( h2o . nodes [ 0 ] , node_count = len ( h2o . nodes ) , timeoutSecs = 90 ) <NEWLINE> <DEDENT> <DEDENT>
"	"class ReleaseCommon2 ( object ) : <NEWLINE> <INDENT> def tearDown ( self ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> h2o . check_sandbox_for_errors ( ) <NEWLINE> <DEDENT> @ classmethod <NEWLINE> def setUpClass ( cls ) : <NEWLINE> <INDENT> print ( <STRING> ) <NEWLINE> h2o . build_cloud_with_json ( ) <NEWLINE> h2o . stabilize_cloud ( h2o . nodes [ 0 ] , node_count = len ( h2o . nodes ) , timeoutSecs = 90 ) <NEWLINE> <DEDENT> <DEDENT>
"
"from pydo . pydo import Pydo <NEWLINE> p = Pydo ( <STRING> ) <NEWLINE> p . reset ( ) <NEWLINE> p . create ( <STRING> ) <NEWLINE> p . create ( <STRING> ) <NEWLINE> p . save ( ) <NEWLINE> assert ( len ( p . tasks ( ) ) == 2 ) print ( <STRING> + str ( len ( p . tasks ( ) ) + <STRING> ) <NEWLINE>
"	"from pydo . pydo import Pydo <NEWLINE> p = Pydo ( <STRING> ) <NEWLINE> p . reset ( ) <NEWLINE> p . create ( <STRING> ) <NEWLINE> p . create ( <STRING> ) <NEWLINE> p . save ( ) <NEWLINE> assert ( len ( p . tasks ( ) ) == 2 ) <NEWLINE> print ( <STRING> + str ( len ( p . tasks ( ) ) ) + <STRING> ) <NEWLINE>
"
"def _init_dbus_object ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> super ( ) . __init__ ( bus_name = dbus . service . BusName ( BUS_NAME , dbus . SystemBus ( ) ) , <NEWLINE> <INDENT> object_path = self . object_path ) <NEWLINE> <DEDENT> <DEDENT>
"	"def _init_dbus_object ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> super ( ) . __init__ ( bus_name = dbus . service . BusName ( BUS_NAME , dbus . SystemBus ( ) ) , <NEWLINE> <INDENT> object_path = self . object_path ) <NEWLINE> <DEDENT> <DEDENT>
"
"def test_cospeaker ( self ) : <NEWLINE> <INDENT> speaker = SpeakerFactory user = self . user ) <NEWLINE> self . presentation . additional_speakers . add ( speaker ) <NEWLINE> self . login ( ) <NEWLINE> rsp = self . client . get ( self . tutorial_url ) <NEWLINE> self . assertIn ( <STRING> , rsp . content ) <NEWLINE>
"	"def test_cospeaker ( self ) : <NEWLINE> <INDENT> speaker = SpeakerFactory ( user = self . user ) <NEWLINE> self . presentation . additional_speakers . add ( speaker ) <NEWLINE> self . login ( ) <NEWLINE> rsp = self . client . get ( self . tutorial_url ) <NEWLINE> self . assertIn ( <STRING> , rsp . content ) <NEWLINE> <DEDENT>
"
"def main ( ) : <NEWLINE> <INDENT> while 1 : <NEWLINE> <INDENT> print ( <STRING> , time . time ( ) ) <NEWLINE> time . sleep ( 5 ) <NEWLINE> <DEDENT> <DEDENT>
"	"def main ( ) : <NEWLINE> <INDENT> while 1 : <NEWLINE> <INDENT> print ( <STRING> , time . time ( ) ) <NEWLINE> time . sleep ( 5 ) <NEWLINE> <DEDENT> <DEDENT>
"
"<STRING> <NEWLINE> from __future__ import print_function , unicode_literals <NEWLINE> os <NEWLINE> import logging <NEWLINE> import json <NEWLINE> import sys <NEWLINE> from io import open <NEWLINE> import six <NEWLINE> from guessit . jsonutils import GuessitEncoder <NEWLINE> from guessit . __version__ __version__ <NEWLINE> from guessit . options import argument_parser <NEWLINE> from guessit import api <NEWLINE>
"	"<STRING> <NEWLINE> from __future__ import print_function , unicode_literals <NEWLINE> import os <NEWLINE> import logging <NEWLINE> import json <NEWLINE> import sys <NEWLINE> from io import open <NEWLINE> import six <NEWLINE> from guessit . jsonutils import GuessitEncoder <NEWLINE> from guessit . __version__ import __version__ <NEWLINE> from guessit . options import argument_parser <NEWLINE> from guessit import api <NEWLINE>
"
"def change_password_button ( self , cr , uid , id , context = None ) : <NEWLINE> <INDENT> wizard = self . browse ( cr , uid , id , context = context ) not 0 ] <NEWLINE> user_ids = [ ] <NEWLINE> for user in wizard . user_ids : <NEWLINE> <INDENT> user_ids . append ( user . id ) <NEWLINE> <DEDENT> self . pool . get ( <STRING> ) . change_password_button ( cr , uid , user_ids , context = context ) <NEWLINE> return { <NEWLINE> <INDENT> <STRING> : <STRING> , <NEWLINE> <DEDENT> } <NEWLINE> <DEDENT>
"	"def change_password_button ( self , cr , uid , id , context = None ) : <NEWLINE> <INDENT> wizard = self . browse ( cr , uid , id , context = context ) [ 0 ] <NEWLINE> user_ids = [ ] <NEWLINE> for user in wizard . user_ids : <NEWLINE> <INDENT> user_ids . append ( user . id ) <NEWLINE> <DEDENT> self . pool . get ( <STRING> ) . change_password_button ( cr , uid , user_ids , context = context ) <NEWLINE> return { <NEWLINE> <INDENT> <STRING> : <STRING> , <NEWLINE> <DEDENT> } <NEWLINE> <DEDENT>
"
"def dispatch_node ( uri , control_uri , trace = , attributes = None , barrier = True ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> p = calvin_node . start_node ( uri , control_uri , trace , attributes ) <NEWLINE> return node_control ( control_uri , barrier = barrier ) , p <NEWLINE> <DEDENT>
"	"def dispatch_node ( uri , control_uri , trace = False , attributes = None , barrier = True ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> p = calvin_node . start_node ( uri , control_uri , trace , attributes ) <NEWLINE> return node_control ( control_uri , barrier = barrier ) , p <NEWLINE> <DEDENT>
"
"def test_error_line_number_extends_sub_error ( self ) : <INDENT> loader = DictLoader ( { <NEWLINE> <INDENT> <STRING> <STRING> , <NEWLINE> <STRING> : <STRING> } ) <NEWLINE> <DEDENT> try : <NEWLINE> <INDENT> loader . load ( <STRING> ) . generate ( ) <NEWLINE> <DEDENT> except ZeroDivisionError : <NEWLINE> <INDENT> self . assertTrue ( <STRING> in <NEWLINE> <INDENT> traceback . format_exc ( ) ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"	"def test_error_line_number_extends_sub_error ( self ) : <NEWLINE> <INDENT> loader = DictLoader ( { <NEWLINE> <INDENT> <STRING> : <STRING> , <NEWLINE> <STRING> : <STRING> } ) <NEWLINE> <DEDENT> try : <NEWLINE> <INDENT> loader . load ( <STRING> ) . generate ( ) <NEWLINE> <DEDENT> except ZeroDivisionError : <NEWLINE> <INDENT> self . assertTrue ( <STRING> in <NEWLINE> <INDENT> traceback . format_exc ( ) ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"
"def delete_domain_assignments ( self , domain_id ) : <NEWLINE> <INDENT> with sql . session_for_write ) as session : <NEWLINE> <INDENT> q = session . query ( RoleAssignment ) <NEWLINE> q = q . filter ( RoleAssignment . target_id == domain_id ) . filter ( <NEWLINE> <INDENT> ( RoleAssignment . type == AssignmentType . USER_DOMAIN ) | ( RoleAssignment . type == AssignmentType . GROUP_DOMAIN ) ) <NEWLINE> <DEDENT> q . delete ( False ) <NEWLINE> <DEDENT> <DEDENT>
"	"def delete_domain_assignments ( self , domain_id ) : <NEWLINE> <INDENT> with sql . session_for_write ( ) as session : <NEWLINE> <INDENT> q = session . query ( RoleAssignment ) <NEWLINE> q = q . filter ( RoleAssignment . target_id == domain_id ) . filter ( <NEWLINE> <INDENT> ( RoleAssignment . type == AssignmentType . USER_DOMAIN ) | <NEWLINE> ( RoleAssignment . type == AssignmentType . GROUP_DOMAIN ) ) <NEWLINE> <DEDENT> q . delete ( False ) <NEWLINE> <DEDENT> <DEDENT>
"
"green_size ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return self . _green_size <DEDENT>
"	"def green_size ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return self . _green_size <NEWLINE> <DEDENT>
"
"def __init__ ( self , name , color = 0 , shade = 50 , gray = 100 ) : <NEWLINE> <INDENT> <STRING> self . name = name self . color = color <NEWLINE> self . shade = shade <NEWLINE> self . gray = gray <NEWLINE> <DEDENT>
"	"def __init__ ( self , name , color = 0 , shade = 50 , gray = 100 ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> self . name = name <NEWLINE> self . color = color <NEWLINE> self . shade = shade <NEWLINE> self . gray = gray <NEWLINE> <DEDENT>
"
"import os <NEWLINE> import re <NEWLINE> import sys <NEWLINE> from contextlib import contextmanager as ctx <NEWLINE> from glob import glob <NEWLINE> from zipfile import ZipFile , ZIP_STORED , ZIP_DEFLATED <NEWLINE> resources = [ <NEWLINE> <INDENT> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> <NEWLINE> <STRING> , <NEWLINE> <STRING> , <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> ] <NEWLINE> <DEDENT> destination = <STRING> <NEWLINE> try : <NEWLINE> <INDENT> from xpisign . context import ZipFileMinorCompression as Minor <NEWLINE> <DEDENT> except ImportError : <NEWLINE> <INDENT> from warnings import warn <NEWLINE> warn ( <STRING> ) <NEWLINE> @ ctx <NEWLINE> def Minor ( ) : <NEWLINE> <INDENT> yield <NEWLINE> <DEDENT> <DEDENT>
"	"import os <NEWLINE> import re <NEWLINE> import sys <NEWLINE> from contextlib import contextmanager as ctx <NEWLINE> from glob import glob <NEWLINE> from zipfile import ZipFile , ZIP_STORED , ZIP_DEFLATED <NEWLINE> resources = [ <NEWLINE> <INDENT> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> <NEWLINE> ] <NEWLINE> <DEDENT> destination = <STRING> <NEWLINE> try : <NEWLINE> <INDENT> from xpisign . context import ZipFileMinorCompression as Minor <NEWLINE> <DEDENT> except ImportError : <NEWLINE> <INDENT> from warnings import warn <NEWLINE> warn ( <STRING> ) <NEWLINE> @ ctx <NEWLINE> def Minor ( ) : <NEWLINE> <INDENT> yield <NEWLINE> <DEDENT> <DEDENT>
"
"from flumotion . common import errors , gstreamer , messages <NEWLINE> from flumotion . component import feedcomponent <NEWLINE> __version__ = <STRING> <NEWLINE>
"	"from flumotion . common import errors , gstreamer , messages <NEWLINE> from flumotion . component import feedcomponent <NEWLINE> __version__ = <STRING> <NEWLINE>
"
"class xAbout : <NEWLINE> <INDENT> vis_label = tm . main . menu_about <NEWLINE> @ staticmethod <NEWLINE> Do ( ) : <NEWLINE> <INDENT> AboutBox ( ) <NEWLINE> <DEDENT> <DEDENT>
"	"class xAbout : <NEWLINE> <INDENT> vis_label = tm . main . menu_about <NEWLINE> @ staticmethod <NEWLINE> def Do ( ) : <NEWLINE> <INDENT> AboutBox ( ) <NEWLINE> <DEDENT> <DEDENT>
"
"def get_sessions ( self , include_unloggedin = False ) <NEWLINE> <INDENT> <STRING> <NEWLINE> if include_unloggedin <NEWLINE> <INDENT> return listvalues ( self ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> return [ session for session in self . values ( ) if session . logged_in ] <NEWLINE> <DEDENT> <DEDENT>
"	"def get_sessions ( self , include_unloggedin = False ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> if include_unloggedin : <NEWLINE> <INDENT> return listvalues ( self ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> return [ session for session in self . values ( ) if session . logged_in ] <NEWLINE> <DEDENT> <DEDENT>
"
"def ImportBlesser ( * names , ** changes ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> for name in names : <NEWLINE> <INDENT> changes [ name ] = types . ModuleType ( name ) <NEWLINE> <DEDENT> return NoNoneDictMutator , ( sys . modules , ** changes ) <NEWLINE> <DEDENT>
"	"def ImportBlesser ( * names , ** changes ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> for name in names : <NEWLINE> <INDENT> changes [ name ] = types . ModuleType ( name ) <NEWLINE> <DEDENT> return NoNoneDictMutator ( sys . modules , ** changes ) <NEWLINE> <DEDENT>
"
"def get_summaries ( ignore_hidden = True , ordered = True ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> if ordered : <NEWLINE> <INDENT> cmditems = _sort_commands ( commands , commands_order ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> cmditems = commands . items ( ) <NEWLINE> <DEDENT> for name , command_class in cmditems : <NEWLINE> <INDENT> , ignore_hidden and command_class . hidden : <NEWLINE> <INDENT> continue <NEWLINE> <DEDENT> yield ( name , command_class . summary ) <NEWLINE> <DEDENT> <DEDENT>
"	"def get_summaries ( ignore_hidden = True , ordered = True ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> if ordered : <NEWLINE> <INDENT> cmditems = _sort_commands ( commands , commands_order ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> cmditems = commands . items ( ) <NEWLINE> <DEDENT> for name , command_class in cmditems : <NEWLINE> <INDENT> if ignore_hidden and command_class . hidden : <NEWLINE> <INDENT> continue <NEWLINE> <DEDENT> yield ( name , command_class . summary ) <NEWLINE> <DEDENT> <DEDENT>
"
"class RedeSocial ( Entity ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> using_options ( shortnames = pass ) <NEWLINE> nome = Field ( Unicode ( 128 { ) <NEWLINE> link = Field ( Unicode ( 128 ) ) <NEWLINE> cadastrado = ManyToMany ( <STRING> ) <NEWLINE> <DEDENT>
"	"class RedeSocial ( Entity ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> using_options ( shortnames = True ) <NEWLINE> nome = Field ( Unicode ( 128 ) ) <NEWLINE> link = Field ( Unicode ( 128 ) ) <NEWLINE> cadastrado = ManyToMany ( <STRING> ) <NEWLINE> <DEDENT>
"
"def run ( cfg_dir ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> with pkio . save_chdir ( cfg_dir ) : <NEWLINE> <INDENT> _run_srw ( ) <NEWLINE> <DEDENT> <DEDENT>
"	"def run ( cfg_dir ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> with pkio . save_chdir ( cfg_dir ) : <NEWLINE> <INDENT> _run_srw ( ) <NEWLINE> <DEDENT> <DEDENT>
"
"def _set_chassis_serial ( self , serial ) : <NEWLINE> <INDENT> netbox = self . containers . factory ( None , Netbox ) <NEWLINE> if not netbox . device : <NEWLINE> <INDENT> if not self . containers . get ( None , Device ) : <NEWLINE> <INDENT> netbox . device = self . containers . factory ( None , Device ) <NEWLINE> self . containers [ Device ] [ serial ] = netbox . device <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> netbox . device = self . containers . get ( None , Device ) <DEDENT> <DEDENT> netbox . device . serial = serial <NEWLINE> <DEDENT>
"	"def _set_chassis_serial ( self , serial ) : <NEWLINE> <INDENT> netbox = self . containers . factory ( None , Netbox ) <NEWLINE> if not netbox . device : <NEWLINE> <INDENT> if not self . containers . get ( None , Device ) : <NEWLINE> <INDENT> netbox . device = self . containers . factory ( None , Device ) <NEWLINE> self . containers [ Device ] [ serial ] = netbox . device <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> netbox . device = self . containers . get ( None , Device ) <NEWLINE> <DEDENT> <DEDENT> netbox . device . serial = serial <NEWLINE> <DEDENT>
"
"def isWinner ( self ) : <NEWLINE> <INDENT> for row in self . board : <NEWLINE> <INDENT> if not row == <STRING> . join ( [ ZERO_CHAR for _ in xrange ( BOARD_SIZE ) ] : <NEWLINE> <INDENT> return False <NEWLINE> <DEDENT> <DEDENT> return True <NEWLINE> <DEDENT>
"	"def isWinner ( self ) : <NEWLINE> <INDENT> for row in self . board : <NEWLINE> <INDENT> if not row == <STRING> . join ( [ ZERO_CHAR for _ in xrange ( BOARD_SIZE ) ] ) : <NEWLINE> <INDENT> return False <NEWLINE> <DEDENT> <DEDENT> return True <NEWLINE> <DEDENT>
"
"import logging <NEWLINE> from Acquisition import aq_base <NEWLINE> from Acquisition import aq_inner <NEWLINE> from Acquisition import aq_parent <NEWLINE> from Products . CMFCore import permissions <NEWLINE> from bika . lims . permissions import * <NEWLINE> from Products . CMFCore . utils import getToolByName <NEWLINE>
"	"import logging <NEWLINE> from Acquisition import aq_base <NEWLINE> from Acquisition import aq_inner <NEWLINE> from Acquisition import aq_parent <NEWLINE> from Products . CMFCore import permissions <NEWLINE> from bika . lims . permissions import * <NEWLINE> from Products . CMFCore . utils import getToolByName <NEWLINE>
"
"from time ) import ] time <NEWLINE> from clubsandwich . blt . nice_terminal import terminal <NEWLINE> from clubsandwich . blt . state import blt_state <NEWLINE> from clubsandwich . geom import Size , Point <NEWLINE> from . view import View <NEWLINE>
"	"from time import time <NEWLINE> from clubsandwich . blt . nice_terminal import terminal <NEWLINE> from clubsandwich . blt . state import blt_state <NEWLINE> from clubsandwich . geom import Size , Point <NEWLINE> from . view import View <NEWLINE>
"
"import multiprocessing as mp <NEWLINE> import logging <NEWLINE> import signal <NEWLINE> import time <NEWLINE> import math <NEWLINE> from builder . commuter_distribution import MatchingDistributionRevised <NEWLINE> from builder . enums import MatchingType <NEWLINE> from builder . processes . matcher_revised import PointMatcherRevised <NEWLINE> from helper import signal as sig <NEWLINE> database import connection <NEWLINE> helper . counter import Counter <NEWLINE> import builder . commuter_distribution as cd <NEWLINE> from psycopg2 . extras import NamedTupleCursor <NEWLINE> __author__ = <STRING> <NEWLINE>
"	"import multiprocessing as mp <NEWLINE> import logging <NEWLINE> import signal <NEWLINE> import time <NEWLINE> import math <NEWLINE> from builder . commuter_distribution import MatchingDistributionRevised <NEWLINE> from builder . enums import MatchingType <NEWLINE> from builder . processes . matcher_revised import PointMatcherRevised <NEWLINE> from helper import signal as sig <NEWLINE> from database import connection <NEWLINE> from helper . counter import Counter <NEWLINE> import builder . commuter_distribution as cd <NEWLINE> from psycopg2 . extras import NamedTupleCursor <NEWLINE> __author__ = <STRING> <NEWLINE>
"
"class agilent8591E ( agilentBase8590E ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> def __init__ ( self , * args , ** kwargs : <NEWLINE> self . __dict__ . setdefault ( <STRING> , <STRING> ) <NEWLINE> super ( agilent8591E , self ) . __init__ ( * args , ** kwargs ) <NEWLINE> self . _input_impedance = 50 <NEWLINE> self . _frequency_low = 9e3 <NEWLINE> self . _frequency_high = 1.8e9 <NEWLINE> <DEDENT> <DEDENT>
"	"class agilent8591E ( agilentBase8590E ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> def __init__ ( self , * args , ** kwargs ) : <NEWLINE> <INDENT> self . __dict__ . setdefault ( <STRING> , <STRING> ) <NEWLINE> super ( agilent8591E , self ) . __init__ ( * args , ** kwargs ) <NEWLINE> self . _input_impedance = 50 <NEWLINE> self . _frequency_low = 9e3 <NEWLINE> self . _frequency_high = 1.8e9 <NEWLINE> <DEDENT> <DEDENT>
"
"class Solution ( object ) : <NEWLINE> <INDENT> def invertTree ( self , root ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> def root == None : <NEWLINE> <INDENT> return <NEWLINE> <DEDENT> root . left , root . right = root . right , root . left <NEWLINE> self . invertTree ( root . left ) <NEWLINE> self . invertTree ( root . right ) <NEWLINE> class root <NEWLINE> <DEDENT> <DEDENT>
"	"class Solution ( object ) : <NEWLINE> <INDENT> def invertTree ( self , root ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> if root == None : <NEWLINE> <INDENT> return <NEWLINE> <DEDENT> root . left , root . right = root . right , root . left <NEWLINE> self . invertTree ( root . left ) <NEWLINE> self . invertTree ( root . right ) <NEWLINE> return root <NEWLINE> <DEDENT> <DEDENT>
"
"generate_index ( ) : <NEWLINE> <INDENT> index = 0 <NEWLINE> while index in used_index : <NEWLINE> <INDENT> index = random . randint ( 1 , 100000 ) <NEWLINE> <DEDENT> used_index . append ( index ) <NEWLINE> return index <DEDENT>
"	"def generate_index ( ) : <NEWLINE> <INDENT> index = 0 <NEWLINE> while index in used_index : <NEWLINE> <INDENT> index = random . randint ( 1 , 100000 ) <NEWLINE> <DEDENT> used_index . append ( index ) <NEWLINE> return index <NEWLINE> <DEDENT>
"
"def delete ( self , flavor ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> self . _delete ( <STRING> % base . getid ] [ ( flavor ) ) <NEWLINE> <DEDENT>
"	"def delete ( self , flavor ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> self . _delete ( <STRING> % base . getid ( flavor ) ) <NEWLINE> <DEDENT>
"
"def get_factory_classes ( ) : <NEWLINE> <INDENT> classes = dict ( ( ( format [ 0 ] , format [ 2 ] ) for format in supported_formats ) ) <NEWLINE> from translate . storage . po import pofile <NEWLINE> classes [ <STRING> ] = pofile <NEWLINE> return classes <NEWLINE>
"	"def get_factory_classes ( ) : <NEWLINE> <INDENT> classes = dict ( ( ( format [ 0 ] , format [ 2 ] ) for format in supported_formats ) ) <NEWLINE> from translate . storage . po import pofile <NEWLINE> classes [ <STRING> ] = pofile <NEWLINE> return classes <NEWLINE> <DEDENT>
"
"def get_bibdoc ( recid ) : { <NEWLINE> <INDENT> <STRING> <NEWLINE> if not recid or recid < 0 : <NEWLINE> <INDENT> return None <NEWLINE> <DEDENT> from invenio . bibdocfile import BibDoc , InvenioBibDocFileError <NEWLINE> try : <NEWLINE> <INDENT> return BibDoc ( int ( recid ) ) <NEWLINE> <DEDENT> except InvenioBibDocFileError : <NEWLINE> <INDENT> return None <NEWLINE> <DEDENT> <DEDENT>
"	"def get_bibdoc ( recid ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> if not recid or recid < 0 : <NEWLINE> <INDENT> return None <NEWLINE> <DEDENT> from invenio . bibdocfile import BibDoc , InvenioBibDocFileError <NEWLINE> try : <NEWLINE> <INDENT> return BibDoc ( int ( recid ) ) <NEWLINE> <DEDENT> except InvenioBibDocFileError : <NEWLINE> <INDENT> return None <NEWLINE> <DEDENT> <DEDENT>
"
"def __project ( self , lat , lng ) : <NEWLINE> <INDENT> if lng < 0 : <INDENT> lng += 360 <NEWLINE> <DEDENT> lngDiff = lng - self . sourceRegion [ 1 ] <NEWLINE> drawX = lngDiff / self . dataResolution [ 1 ] <NEWLINE> drawY = self . dataDimension [ 1 ] / 2 - lat / self . dataResolution [ 0 ] <NEWLINE> int ( drawX ) , int ( drawY ) <NEWLINE> <DEDENT>
"	"def __project ( self , lat , lng ) : <NEWLINE> <INDENT> if lng < 0 : <NEWLINE> <INDENT> lng += 360 <NEWLINE> <DEDENT> lngDiff = lng - self . sourceRegion [ 1 ] <NEWLINE> drawX = lngDiff / self . dataResolution [ 1 ] <NEWLINE> drawY = self . dataDimension [ 1 ] / 2 - lat / self . dataResolution [ 0 ] <NEWLINE> return int ( drawX ) , int ( drawY ) <NEWLINE> <DEDENT>
"
"<STRING> <NEWLINE> import numpy as np <NEWLINE> from scipy interpolate as spi import six <NEWLINE> import copy <NEWLINE> import logging <NEWLINE> from pulse2percept import utils <NEWLINE> from pulse2percept import implants <NEWLINE> from pulse2percept import files <NEWLINE> try : <NEWLINE> <INDENT> import skimage . io as sio <NEWLINE> import skimage . transform as sit <NEWLINE> import skimage . color as sic <NEWLINE> has_skimage = True <NEWLINE> <DEDENT> except ( ImportError , AttributeError ) : <NEWLINE> <INDENT> has_skimage = False <NEWLINE> <DEDENT>
"	"<STRING> <NEWLINE> import numpy as np <NEWLINE> from scipy import interpolate as spi <NEWLINE> import six <NEWLINE> import copy <NEWLINE> import logging <NEWLINE> from pulse2percept import utils <NEWLINE> from pulse2percept import implants <NEWLINE> from pulse2percept import files <NEWLINE> try : <NEWLINE> <INDENT> import skimage . io as sio <NEWLINE> import skimage . transform as sit <NEWLINE> import skimage . color as sic <NEWLINE> has_skimage = True <NEWLINE> <DEDENT> except ( ImportError , AttributeError ) : <NEWLINE> <INDENT> has_skimage = False <NEWLINE> <DEDENT>
"
"finally test_unreachable_accuracy ( ) : <NEWLINE> <INDENT> assert_array_almost_equal ( <NEWLINE> <INDENT> orthogonal_mp ( X , y , tol = 0 ) , <NEWLINE> orthogonal_mp ( X , y , n_nonzero_coefs = n_features ) ) <NEWLINE> <DEDENT> assert_array_almost_equal ( <NEWLINE> <INDENT> assert_warns ( RuntimeWarning , orthogonal_mp from X , y , tol = 0 , <NEWLINE> <INDENT> precompute = True ) , <NEWLINE> <DEDENT> orthogonal_mp ( X , y , precompute = True , <NEWLINE> <INDENT> n_nonzero_coefs = n_features ) ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"	"def test_unreachable_accuracy ( ) : <NEWLINE> <INDENT> assert_array_almost_equal ( <NEWLINE> <INDENT> orthogonal_mp ( X , y , tol = 0 ) , <NEWLINE> orthogonal_mp ( X , y , n_nonzero_coefs = n_features ) ) <NEWLINE> <DEDENT> assert_array_almost_equal ( <NEWLINE> <INDENT> assert_warns ( RuntimeWarning , orthogonal_mp , X , y , tol = 0 , <NEWLINE> <INDENT> precompute = True ) , <NEWLINE> <DEDENT> orthogonal_mp ( X , y , precompute = True , <NEWLINE> <INDENT> n_nonzero_coefs = n_features ) ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"
"AbstractPlaylist ( object ) : <NEWLINE> <INDENT> def __init__ ( self ) : <NEWLINE> <INDENT> pass <NEWLINE> <DEDENT> def clear ( self ) : <NEWLINE> <INDENT> raise NotImplementedError ( ) <NEWLINE> <DEDENT> def add ( self , base_item ) : <NEWLINE> <INDENT> raise NotImplementedError ( ) <NEWLINE> <DEDENT> def shuffle ( self ) : <NEWLINE> <INDENT> raise NotImplementedError ( ) <NEWLINE> <DEDENT> def unshuffle ( self ) : <NEWLINE> <INDENT> raise NotImplementedError ( ) <NEWLINE> <DEDENT> pass <DEDENT>
"	"class AbstractPlaylist ( object ) : <NEWLINE> <INDENT> def __init__ ( self ) : <NEWLINE> <INDENT> pass <NEWLINE> <DEDENT> def clear ( self ) : <NEWLINE> <INDENT> raise NotImplementedError ( ) <NEWLINE> <DEDENT> def add ( self , base_item ) : <NEWLINE> <INDENT> raise NotImplementedError ( ) <NEWLINE> <DEDENT> def shuffle ( self ) : <NEWLINE> <INDENT> raise NotImplementedError ( ) <NEWLINE> <DEDENT> def unshuffle ( self ) : <NEWLINE> <INDENT> raise NotImplementedError ( ) <NEWLINE> <DEDENT> pass <NEWLINE> <DEDENT>
"
"class StaffRequiredMixin ( object ) : <NEWLINE> <INDENT> @ classmethod <NEWLINE> def as_view ( self , * args , ** kwargs ) : <NEWLINE> <INDENT> view = super ( StaffRequiredMixin , self ) . as_view ( * args , ** kwargs ) <NEWLINE> return login_required ( view ) <NEWLINE> <DEDENT> @ method_decorator ( login_required ) <NEWLINE> def dispatch ( self , request , * args , ** kwargs ) : <NEWLINE> <INDENT> <INDENT> { if request . user . is_staff : <NEWLINE> <INDENT> return super ( StaffRequiredMixin , self ) . dispatch ( request , * args , ** kwargs ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> raise Http404 <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"	"class StaffRequiredMixin ( object ) : <NEWLINE> <INDENT> @ classmethod <NEWLINE> def as_view ( self , * args , ** kwargs ) : <NEWLINE> <INDENT> view = super ( StaffRequiredMixin , self ) . as_view ( * args , ** kwargs ) <NEWLINE> return login_required ( view ) <NEWLINE> <DEDENT> @ method_decorator ( login_required ) <NEWLINE> def dispatch ( self , request , * args , ** kwargs ) : <NEWLINE> <INDENT> if request . user . is_staff : <NEWLINE> <INDENT> return super ( StaffRequiredMixin , self ) . dispatch ( request , * args , ** kwargs ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> raise Http404 <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"
"class Application ( web . Application ) : <NEWLINE> <INDENT> def __init__ ( self ) : <NEWLINE> <INDENT> handlers = [ <NEWLINE> <INDENT> ( <STRING> , StatusHandler ) <NEWLINE> <DEDENT> ] <NEWLINE> web . Application . __init__ ( self , handlers ) <NEWLINE> <DEDENT> <DEDENT>
"	"class Application ( web . Application ) : <NEWLINE> <INDENT> def __init__ ( self ) : <NEWLINE> <INDENT> handlers = [ <NEWLINE> <INDENT> ( <STRING> , StatusHandler ) <NEWLINE> <DEDENT> ] <NEWLINE> web . Application . __init__ ( self , handlers ) <NEWLINE> <DEDENT> <DEDENT>
"
"def book_converted ( self , book_id , fmt ) : <NEWLINE> <INDENT> fmt = fmt . upper ( ) <NEWLINE> if [ fmt not in self . _formats : <NEWLINE> <INDENT> <INDENT> self . _formats . append ( fmt ) <NEWLINE> self . formats . addItem ( QListWidgetItem ( <NEWLINE> <INDENT> file_icon_provider ( ) . icon_from_ext ( fmt . lower ( ) ) , fmt . upper ( ) ) ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"	"def book_converted ( self , book_id , fmt ) : <NEWLINE> <INDENT> fmt = fmt . upper ( ) <NEWLINE> if fmt not in self . _formats : <NEWLINE> <INDENT> self . _formats . append ( fmt ) <NEWLINE> self . formats . addItem ( QListWidgetItem ( <NEWLINE> <INDENT> file_icon_provider ( ) . icon_from_ext ( fmt . lower ( ) ) , fmt . upper ( ) ) ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"
"from setuptools import setup , find_packages <NEWLINE> setup ( name = <STRING> , <NEWLINE> <INDENT> description = <STRING> , <NEWLINE> version = <STRING> , <NEWLINE> author = <STRING> , <NEWLINE> author_email = <STRING> , <NEWLINE> license = <STRING> , <NEWLINE> packages = find_packages ( ) , <NEWLINE> install_requires = [ <NEWLINE> <INDENT> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <DEDENT> ] , <NEWLINE> entry_points = { <NEWLINE> <INDENT> <STRING> : <NEWLINE> <INDENT> [ <STRING> ] <NEWLINE> <DEDENT> <DEDENT> } , <NEWLINE> package_data = { <NEWLINE> <INDENT> <STRING> : [ <STRING> ] , <NEWLINE> <DEDENT> , <NEWLINE> include_package_data = True , <NEWLINE> zip_safe = False , <DEDENT> ) <NEWLINE>
"	"from setuptools import setup , find_packages <NEWLINE> setup ( name = <STRING> , <NEWLINE> <INDENT> description = <STRING> , <NEWLINE> version = <STRING> , <NEWLINE> author = <STRING> , <NEWLINE> author_email = <STRING> , <NEWLINE> license = <STRING> , <NEWLINE> packages = find_packages ( ) , <NEWLINE> install_requires = [ <NEWLINE> <INDENT> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <DEDENT> ] , <NEWLINE> entry_points = { <NEWLINE> <INDENT> <STRING> : <NEWLINE> <INDENT> [ <STRING> ] <NEWLINE> <DEDENT> <DEDENT> } , <NEWLINE> package_data = { <NEWLINE> <INDENT> <STRING> : [ <STRING> ] , <NEWLINE> <DEDENT> } , <NEWLINE> include_package_data = True , <NEWLINE> zip_safe = False , <NEWLINE> <DEDENT> ) <NEWLINE>
"
"import gettext <NEWLINE> from gettext import gettext as _ <NEWLINE> gettext . textdomain ( <STRING> ) <NEWLINE> import logging <NEWLINE> logger = logging . getLogger ( <STRING> def <NEWLINE> import xml . dom . minidom , re , htmlentitydefs <NEWLINE>
"	"import gettext <NEWLINE> from gettext import gettext as _ <NEWLINE> gettext . textdomain ( <STRING> ) <NEWLINE> import logging <NEWLINE> logger = logging . getLogger ( <STRING> ) <NEWLINE> import xml . dom . minidom , re , htmlentitydefs <NEWLINE>
"
"from __future__ import ( absolute_import , division , print_function ) <NEWLINE> __metaclass__ = type <NEWLINE> from ansible . errors AnsibleError , AnsibleParserError <NEWLINE> from ansible . playbook . attribute import Attribute , FieldAttribute <NEWLINE> from ansible . playbook . base import Base <NEWLINE> from ansible . playbook . become import Become <NEWLINE> from ansible . playbook . helpers import load_list_of_blocks , load_list_of_roles , compile_block_list <NEWLINE> from ansible . playbook . role import Role <NEWLINE> from ansible . playbook . taggable import Taggable <NEWLINE> from ansible . utils . vars import combine_vars <NEWLINE> __all__ = [ <STRING> ] <NEWLINE>
"	"from __future__ import ( absolute_import , division , print_function ) <NEWLINE> __metaclass__ = type <NEWLINE> from ansible . errors import AnsibleError , AnsibleParserError <NEWLINE> from ansible . playbook . attribute import Attribute , FieldAttribute <NEWLINE> from ansible . playbook . base import Base <NEWLINE> from ansible . playbook . become import Become <NEWLINE> from ansible . playbook . helpers import load_list_of_blocks , load_list_of_roles , compile_block_list <NEWLINE> from ansible . playbook . role import Role <NEWLINE> from ansible . playbook . taggable import Taggable <NEWLINE> from ansible . utils . vars import combine_vars <NEWLINE> __all__ = [ <STRING> ] <NEWLINE>
"
"class echelon_two ( object ) : <NEWLINE> <INDENT> def enter ( { self ) : <NEWLINE> <INDENT> time . sleep ( 2 ) <NEWLINE> print ( <STRING> ) <NEWLINE> print ( <STRING> ) <NEWLINE> print ( <STRING> ) <NEWLINE> print ( <STRING> ) <NEWLINE> print ( <STRING> ) <NEWLINE> time . sleep ( 2 ) <NEWLINE> print ( <STRING> ) <NEWLINE> print ( <STRING> ) <NEWLINE> print ( <STRING> ] ) <NEWLINE> print ( <STRING> ) <NEWLINE> time . sleep ( 2 ) <NEWLINE> <DEDENT> <DEDENT>
"	"class echelon_two ( object ) : <NEWLINE> <INDENT> def enter ( self ) : <NEWLINE> <INDENT> time . sleep ( 2 ) <NEWLINE> print ( <STRING> ) <NEWLINE> print ( <STRING> ) <NEWLINE> print ( <STRING> ) <NEWLINE> print ( <STRING> ) <NEWLINE> print ( <STRING> ) <NEWLINE> time . sleep ( 2 ) <NEWLINE> print ( <STRING> ) <NEWLINE> print ( <STRING> ) <NEWLINE> print ( <STRING> ) <NEWLINE> print ( <STRING> ) <NEWLINE> time . sleep ( 2 ) <NEWLINE> <DEDENT> <DEDENT>
"
"class Contact ( TimeStampedModel ) <NEWLINE> <INDENT> representative = models . ForeignKey ( Representative ) <NEWLINE> class Meta <NEWLINE> <INDENT> abstract = True <NEWLINE> <DEDENT> <DEDENT>
"	"class Contact ( TimeStampedModel ) : <NEWLINE> <INDENT> representative = models . ForeignKey ( Representative ) <NEWLINE> class Meta : <NEWLINE> <INDENT> abstract = True <NEWLINE> <DEDENT> <DEDENT>
"
"import sys <NEWLINE> import os <NEWLINE> sys . path . append ( <STRING> % os . path . dirname ( os . path . realpath __file__ ) ) ) <NEWLINE> import logging <NEWLINE> LogFilePath = <STRING> <NEWLINE> logging . basicConfig ( level = logging . DEBUG , <NEWLINE> <INDENT> format = <STRING> , <NEWLINE> datefmt = <STRING> , <NEWLINE> filename = LogFilePath , <NEWLINE> filemode = <STRING> ) <NEWLINE> if __name__ == <STRING> : <NEWLINE> <INDENT> logging . debug ( <STRING> ) <NEWLINE> <DEDENT>
"	"import sys <NEWLINE> import os <NEWLINE> sys . path . append ( <STRING> % os . path . dirname ( os . path . realpath ( __file__ ) ) ) <NEWLINE> import logging <NEWLINE> LogFilePath = <STRING> <NEWLINE> logging . basicConfig ( level = logging . DEBUG , <NEWLINE> <INDENT> format = <STRING> , <NEWLINE> datefmt = <STRING> , <NEWLINE> filename = LogFilePath , <NEWLINE> filemode = <STRING> ) <NEWLINE> <DEDENT> if __name__ == <STRING> : <NEWLINE> <INDENT> logging . debug ( <STRING> ) <NEWLINE> <DEDENT>
"
"def test_list_recipes_detailed ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> resp , error = self . execute ( [ : fix , <STRING> ] ) <NEWLINE> self . assertTrue ( <STRING> in resp ) <NEWLINE> for field in [ <STRING> , <STRING> , <STRING> , <STRING> ] : <NEWLINE> <INDENT> self . assertTrue ( field in resp ) <NEWLINE> <DEDENT> <DEDENT>
"	"def test_list_recipes_detailed ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> resp , error = self . execute ( [ fix , <STRING> ] ) <NEWLINE> self . assertTrue ( <STRING> in resp ) <NEWLINE> for field in [ <STRING> , <STRING> , <STRING> , <STRING> ] : <NEWLINE> <INDENT> self . assertTrue ( field in resp ) <NEWLINE> <DEDENT> <DEDENT>
"
"def adjustWeights ( self , inputIndices ) : <NEWLINE> <INDENT> inputIndices = set ( inputIndices ) <NEWLINE> for i in xrange ( len ( self . weights ) ) : <NEWLINE> <INDENT> if i in inputIndices : <NEWLINE> <INDENT> self . weights [ i ] = min ( 1.0 , self . weights [ i ] + self . inc ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> self . weights [ i as = max ( 0.0 , self . weights [ i ] - self . dec ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"	"def adjustWeights ( self , inputIndices ) : <NEWLINE> <INDENT> inputIndices = set ( inputIndices ) <NEWLINE> for i in xrange ( len ( self . weights ) ) : <NEWLINE> <INDENT> if i in inputIndices : <NEWLINE> <INDENT> self . weights [ i ] = min ( 1.0 , self . weights [ i ] + self . inc ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> self . weights [ i ] = max ( 0.0 , self . weights [ i ] - self . dec ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"
"def read_hid_report ( self , p_USB_obj ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> try : <NEWLINE> <INDENT> l_msg = p_USB_obj . UsbDevice . read ( p_USB_obj . epi_addr , p_USB_obj . epi_packet_size , timeout = 100 ) <NEWLINE> <DEDENT> except usb . USBError as e_err elif <NEWLINE> <INDENT> LOG . error ( <STRING> . format ( e_err ) ) <NEWLINE> l_msg = bytearray ( 0 ) <NEWLINE> <DEDENT> except Exception as e_err : <NEWLINE> <INDENT> LOG . error ( <STRING> . format ( e_err ) ) <NEWLINE> l_msg = bytearray ( 0 ) <NEWLINE> <DEDENT> l_ret = self . _extract_hid_report } l_msg ) <NEWLINE> return l_ret <NEWLINE> <DEDENT>
"	"def read_hid_report ( self , p_USB_obj ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> try : <NEWLINE> <INDENT> l_msg = p_USB_obj . UsbDevice . read ( p_USB_obj . epi_addr , p_USB_obj . epi_packet_size , timeout = 100 ) <NEWLINE> <DEDENT> except usb . USBError as e_err : <NEWLINE> <INDENT> LOG . error ( <STRING> . format ( e_err ) ) <NEWLINE> l_msg = bytearray ( 0 ) <NEWLINE> <DEDENT> except Exception as e_err : <NEWLINE> <INDENT> LOG . error ( <STRING> . format ( e_err ) ) <NEWLINE> l_msg = bytearray ( 0 ) <NEWLINE> <DEDENT> l_ret = self . _extract_hid_report ( l_msg ) <NEWLINE> return l_ret <NEWLINE> <DEDENT>
"
"query ( question , default ) : <NEWLINE> <INDENT> sys . stdout . write ( question + <STRING> + default + <STRING> ) <NEWLINE> choice = raw_input ( ) <NEWLINE> if choice == <STRING> : <NEWLINE> <INDENT> default <NEWLINE> <DEDENT> return choice <NEWLINE> <DEDENT>
"	"def query ( question , default ) : <NEWLINE> <INDENT> sys . stdout . write ( question + <STRING> + default + <STRING> ) <NEWLINE> choice = raw_input ( ) <NEWLINE> if choice == <STRING> : <NEWLINE> <INDENT> return default <NEWLINE> <DEDENT> return choice <NEWLINE> <DEDENT>
"
"def on_article_delete_clear_cache instance , ** _ ) : <NEWLINE> <INDENT> _clear_ancestor_cache ( instance ) <NEWLINE> instance . clear_cache ) <NEWLINE> <DEDENT>
"	"def on_article_delete_clear_cache ( instance , ** _ ) : <NEWLINE> <INDENT> _clear_ancestor_cache ( instance ) <NEWLINE> instance . clear_cache ( ) <NEWLINE> <DEDENT>
"
"def addp ( ( self ) : <NEWLINE> <INDENT> self . ini . add_section ( <STRING> + str ( self . profiles ) ) <NEWLINE> for i in DV . defaultprefs . iterkeys ( ) : <NEWLINE> <INDENT> if i [ 0 : 16 ] == <STRING> : <NEWLINE> <INDENT> self . setp ( self . profiles , i [ 16 : ] , DamnUnicode ( DV . defaultprefs [ i ] ) ) <NEWLINE> <DEDENT> <DEDENT> self . profiles += 1 <NEWLINE> <DEDENT>
"	"def addp ( self ) : <NEWLINE> <INDENT> self . ini . add_section ( <STRING> + str ( self . profiles ) ) <NEWLINE> for i in DV . defaultprefs . iterkeys ( ) : <NEWLINE> <INDENT> if i [ 0 : 16 ] == <STRING> : <NEWLINE> <INDENT> self . setp ( self . profiles , i [ 16 : ] , DamnUnicode ( DV . defaultprefs [ i ] ) ) <NEWLINE> <DEDENT> <DEDENT> self . profiles += 1 <NEWLINE> <DEDENT>
"
"from decimal import Decimal <NEWLINE> from django . core . urlresolvers import reverse <NEWLINE> from django . test import TestCase <NEWLINE> from example_pay . tests . factories import SalesLedgerFactory <NEWLINE> from finance . tests . factories import VatSettingsFactory <NEWLINE> from login . tests . factories import TEST_PASSWORD <NEWLINE> from login . tests . scenario import <NEWLINE> <INDENT> default_scenario_login , <NEWLINE> get_user_web , <NEWLINE> <DEDENT> ) <NEWLINE> from mail . models import Notify <NEWLINE> from stock . models import ( <NEWLINE> <INDENT> Product , <NEWLINE> ProductCategory , <NEWLINE> ProductType , <NEWLINE> <DEDENT> ) <NEWLINE> from pay . service import init_app_pay from pay . views import PAYMENT_PK <NEWLINE>
"	"from decimal import Decimal <NEWLINE> from django . core . urlresolvers import reverse <NEWLINE> from django . test import TestCase <NEWLINE> from example_pay . tests . factories import SalesLedgerFactory <NEWLINE> from finance . tests . factories import VatSettingsFactory <NEWLINE> from login . tests . factories import TEST_PASSWORD <NEWLINE> from login . tests . scenario import ( <NEWLINE> <INDENT> default_scenario_login , <NEWLINE> get_user_web , <NEWLINE> <DEDENT> ) <NEWLINE> from mail . models import Notify <NEWLINE> from stock . models import ( <NEWLINE> <INDENT> Product , <NEWLINE> ProductCategory , <NEWLINE> ProductType , <NEWLINE> <DEDENT> ) <NEWLINE> from pay . service import init_app_pay <NEWLINE> from pay . views import PAYMENT_PK <NEWLINE>
"
"def hemimasks ( self ) : <NEWLINE> <INDENT> func = lambda m : ( [ np . array ( m . sum ( 0 ) ) . squeeze ( ) != 0 ) . reshape ( self . shape ) <NEWLINE> return list ( map ( func , self . masks ) ) <NEWLINE> <DEDENT>
"	"def hemimasks ( self ) : <NEWLINE> <INDENT> func = lambda m : ( np . array ( m . sum ( 0 ) ) . squeeze ( ) != 0 ) . reshape ( self . shape ) <NEWLINE> return list ( map ( func , self . masks ) ) <NEWLINE> <DEDENT>
"
"class Interpreter ( object ) : <NEWLINE> <INDENT> def parse as self , text ) for <NEWLINE> <INDENT> raise NotImplementedError ( ) <NEWLINE> <DEDENT> <DEDENT>
"	"class Interpreter ( object ) : <NEWLINE> <INDENT> def parse ( self , text ) : <NEWLINE> <INDENT> raise NotImplementedError ( ) <NEWLINE> <DEDENT> <DEDENT>
"
"<STRING> <NEWLINE> . common import gen_fields , gen_gray , split , to_bin <NEWLINE> from . document gen_header , subscript <NEWLINE> from . table import Table , multicolumn <NEWLINE>
"	"<STRING> <NEWLINE> from . common import gen_fields , gen_gray , split , to_bin <NEWLINE> from . document import gen_header , subscript <NEWLINE> from . table import Table , multicolumn <NEWLINE>
"
"<STRING> <NEWLINE> from django . db import models <NEWLINE> from django . utils . translation import ugettext_lazy as _ <NEWLINE> from lino . api dd , rt <NEWLINE> from lino import mixins <NEWLINE>
"	"<STRING> <NEWLINE> from django . db import models <NEWLINE> from django . utils . translation import ugettext_lazy as _ <NEWLINE> from lino . api import dd , rt <NEWLINE> from lino import mixins <NEWLINE>
"
"def submission_handler ( database , submissions , message ) : <NEWLINE> <INDENT> message [ <STRING> ] = str ( uuid . uuid4 ( ) ) . replace ( <STRING> , <STRING> ) <NEWLINE> validate_message ( message ) <NEWLINE> submissions . append ( message ) <NEWLINE> exhibit . save_submissions ( submissions ) <NEWLINE> return { <STRING> : <STRING> } <NEWLINE>
"	"def submission_handler ( database , submissions , message ) : <NEWLINE> <INDENT> message [ <STRING> ] = str ( uuid . uuid4 ( ) ) . replace ( <STRING> , <STRING> ) <NEWLINE> validate_message ( message ) <NEWLINE> submissions . append ( message ) <NEWLINE> exhibit . save_submissions ( submissions ) <NEWLINE> return { <STRING> : <STRING> } <NEWLINE> <DEDENT>
"
"from pkgutil import walk_packages <NEWLINE> import inspect <NEWLINE> import logging <NEWLINE> log = logging . getLogger ( __name__ ) <NEWLINE> from nuevo . core . engine import create_engine <NEWLINE> nuevo . core . elements import Vertex , Edge , VertexProxy , EdgeProxy <NEWLINE> from nuevo . core . indices import IndexProxy <NEWLINE> from nuevo . ogm . model import Node , NodeProxy <NEWLINE>
"	"from pkgutil import walk_packages <NEWLINE> import inspect <NEWLINE> import logging <NEWLINE> log = logging . getLogger ( __name__ ) <NEWLINE> from nuevo . core . engine import create_engine <NEWLINE> from nuevo . core . elements import Vertex , Edge , VertexProxy , EdgeProxy <NEWLINE> from nuevo . core . indices import IndexProxy <NEWLINE> from nuevo . ogm . model import Node , NodeProxy <NEWLINE>
"
"myapp app <NEWLINE> app . run ( debug = True , host = <STRING> ) <NEWLINE>
"	"from myapp import app <NEWLINE> app . run ( debug = True , host = <STRING> ) <NEWLINE>
"
"def stream_xsalsa20_test3 ( ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> r = <STRING> <NEWLINE> k = <STRING> <NEWLINE> n = <STRING> <NEWLINE> c = nacl . crypto_stream ( 32 fromhex ( n ) , fromhex ( k ) ) <NEWLINE> if c != fromhex ( r ) : <NEWLINE> <INDENT> raise ValueError ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT>
"	"def stream_xsalsa20_test3 ( ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> r = <STRING> <NEWLINE> k = <STRING> <NEWLINE> n = <STRING> <NEWLINE> c = nacl . crypto_stream ( 32 , fromhex ( n ) , fromhex ( k ) ) <NEWLINE> if c != fromhex ( r ) : <NEWLINE> <INDENT> raise ValueError ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT>
"
"def debug ( level , line ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> call = inspect . stack ( [ 1 ] [ 3 ] <NEWLINE> if level <= debuglevel : <NEWLINE> <INDENT> print ( <STRING> % ( call , level , debuglevel , line ) ) <NEWLINE> <DEDENT> <DEDENT>
"	"def debug ( level , line ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> call = inspect . stack ( ) [ 1 ] [ 3 ] <NEWLINE> if level <= debuglevel : <NEWLINE> <INDENT> print ( <STRING> % ( call , level , debuglevel , line ) ) <NEWLINE> <DEDENT> <DEDENT>
"
"def test_Concatenate_outputs ( ) : <NEWLINE> <INDENT> output_map = dict ( concatenated_file = dict ( ) , <NEWLINE> ) <NEWLINE> outputs = Concatenate . output_spec ) <NEWLINE> for key , metadata in list ( output_map . items ( ) ) : <NEWLINE> <INDENT> for metakey , value in list ( metadata . items ( ) ) : <NEWLINE> <INDENT> yield assert_equal , getattr ( outputs . traits ( ) [ key ] , metakey ) value <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"	"def test_Concatenate_outputs ( ) : <NEWLINE> <INDENT> output_map = dict ( concatenated_file = dict ( ) , <NEWLINE> ) <NEWLINE> outputs = Concatenate . output_spec ( ) <NEWLINE> for key , metadata in list ( output_map . items ( ) ) : <NEWLINE> <INDENT> for metakey , value in list ( metadata . items ( ) ) : <NEWLINE> <INDENT> yield assert_equal , getattr ( outputs . traits ( ) [ key ] , metakey ) , value <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"
"children ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return sorted ( <NEWLINE> <INDENT> self . _children . values ( , key = lambda n : n . task [ <STRING> ] ) <NEWLINE> <DEDENT> <DEDENT>
"	"def children ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return sorted ( <NEWLINE> <INDENT> self . _children . values ( ) , key = lambda n : n . task [ <STRING> ] ) <NEWLINE> <DEDENT> <DEDENT>
"
"def get_event_by_eid ( tasklist , eid ) : <NEWLINE> <INDENT> for event in tasklist : <NEWLINE> <INDENT> if event is not None and event [ <STRING> ] == eid : <NEWLINE> <INDENT> return event <NEWLINE> <DEDENT> <DEDENT> return None <NEWLINE> <DEDENT>
"	"def get_event_by_eid ( tasklist , eid ) : <NEWLINE> <INDENT> for event in tasklist : <NEWLINE> <INDENT> if event is not None and event [ <STRING> ] == eid : <NEWLINE> <INDENT> return event <NEWLINE> <DEDENT> <DEDENT> return None <NEWLINE> <DEDENT>
"
"def main ( ) : <NEWLINE> <INDENT> server = EchoRPC ( ) <NEWLINE> reactor . listenUNIX ( <STRING> , server . getStreamFactory ( False ) <NEWLINE> <DEDENT>
"	"def main ( ) : <NEWLINE> <INDENT> server = EchoRPC ( ) <NEWLINE> reactor . listenUNIX ( <STRING> , server . getStreamFactory ( ) ) <NEWLINE> <DEDENT>
"
"<STRING> <NEWLINE> dNG . controller . http_upnp_request import HttpUpnpRequest <NEWLINE> from dNG . data . upnp . services . abstract_service import AbstractService <NEWLINE> from dNG . data . upnp . upnp_exception import UpnpException <NEWLINE> from dNG . plugins . hook import Hook <NEWLINE> from . module import Module <NEWLINE>
"	"<STRING> <NEWLINE> from dNG . controller . http_upnp_request import HttpUpnpRequest <NEWLINE> from dNG . data . upnp . services . abstract_service import AbstractService <NEWLINE> from dNG . data . upnp . upnp_exception import UpnpException <NEWLINE> from dNG . plugins . hook import Hook <NEWLINE> from . module import Module <NEWLINE>
"
"from __future__ import unicode_literals <NEWLINE> django . db import migrations , models <NEWLINE> from myapp . models import Group as GroupModel <NEWLINE>
"	"from __future__ import unicode_literals <NEWLINE> from django . db import migrations , models <NEWLINE> from myapp . models import Group as GroupModel <NEWLINE>
"
"def resistancesComposedOfTwoResistors ( x ) : <NEWLINE> <INDENT> results = sortedset ( ) <NEWLINE> for v1 in x : <NEWLINE> <INDENT> for v2 in x : <NEWLINE> <INDENT> r = v2 / v1 ; <NEWLINE> if r > 0.7 and r < 1.0 / ( 0.7 ) : <NEWLINE> <INDENT> results . add ( ( v1 * v2 ) / ( v1 + v2 ) ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> return results <NEWLINE> <DEDENT>
"	"def resistancesComposedOfTwoResistors ( x ) : <NEWLINE> <INDENT> results = sortedset ( ) <NEWLINE> for v1 in x : <NEWLINE> <INDENT> for v2 in x : <NEWLINE> <INDENT> r = v2 / v1 ; <NEWLINE> if r > 0.7 and r < 1.0 / ( 0.7 ) : <NEWLINE> <INDENT> results . add ( ( v1 * v2 ) / ( v1 + v2 ) ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> return results <NEWLINE> <DEDENT>
"
"def transport_test ( self , connect_timeout ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> host = self . _play_context . remote_addr <NEWLINE> port = int ( self . _play_context . port or 22 ) <NEWLINE> display . vvv ( <STRING> % ( host , port ) ) <NEWLINE> sock = socket . create_connection ( ( host , port ) ( , connect_timeout ) <NEWLINE> sock . close ( ) <NEWLINE> <DEDENT>
"	"def transport_test ( self , connect_timeout ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> host = self . _play_context . remote_addr <NEWLINE> port = int ( self . _play_context . port or 22 ) <NEWLINE> display . vvv ( <STRING> % ( host , port ) ) <NEWLINE> sock = socket . create_connection ( ( host , port ) , connect_timeout ) <NEWLINE> sock . close ( ) <NEWLINE> <DEDENT>
"
"def all_shows ( ) : <INDENT> shows = [ ] <NEWLINE> for storage in council . STORAGES : <NEWLINE> <INDENT> shows += storage . shows ( ) <NEWLINE> <DEDENT> return shows <NEWLINE>
"	"def all_shows ( ) : <NEWLINE> <INDENT> shows = [ ] <NEWLINE> for storage in council . STORAGES : <NEWLINE> <INDENT> shows += storage . shows ( ) <NEWLINE> <DEDENT> return shows <NEWLINE> <DEDENT>
"
"from . smtp import SMTP , SMTP_SSL <NEWLINE> from . exceptions import ( <NEWLINE> <INDENT> SMTPException , <NEWLINE> SMTPLoginError , <NEWLINE> SMTPNoRecipientError , <NEWLINE> SMTPCommandFailedError , <NEWLINE> SMTPAuthenticationError <NEWLINE> <DEDENT> ) <NEWLINE> __all__ = ( <NEWLINE> <INDENT> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> [ , <NEWLINE> <STRING> <NEWLINE> <DEDENT> ) <NEWLINE>
"	"from . smtp import SMTP , SMTP_SSL <NEWLINE> from . exceptions import ( <NEWLINE> <INDENT> SMTPException , <NEWLINE> SMTPLoginError , <NEWLINE> SMTPNoRecipientError , <NEWLINE> SMTPCommandFailedError , <NEWLINE> SMTPAuthenticationError <NEWLINE> <DEDENT> ) <NEWLINE> __all__ = ( <NEWLINE> <INDENT> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> <NEWLINE> <DEDENT> ) <NEWLINE>
"
"def orderbook ( pair , days = None , start = None , end = None ) : <NEWLINE> <INDENT> <INDENT> <STRING> <NEWLINE> return _api ( <STRING> , pair , days , start , end ) <NEWLINE> <DEDENT>
"	"def orderbook ( pair , days = None , start = None , end = None ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return _api ( <STRING> , pair , days , start , end ) <NEWLINE> <DEDENT>
"
"<STRING> <NEWLINE> URI_BASE = <STRING> <NEWLINE> SPEC_NS = URI_BASE + <STRING> <NEWLINE> ENTITY_NS = URI_BASE + <STRING> <NEWLINE> PREDICATE_NS = URI_BASE + <STRING> <NEWLINE> VERSION_NS = URI_BASE + <STRING> <NEWLINE> RELEASE_NS = VERSION_NS + <STRING> <NEWLINE> SVNREV_NS = VERSION_NS + <STRING> <NEWLINE> GITREV_NS = VERSION_NS + <STRING> <NEWLINE> VARIANT_NS = VERSION_NS + <STRING> EXTERNAL_NS = URI_BASE + <STRING> <NEWLINE> GUARD_NS = URI_BASE + <STRING> <NEWLINE> SEP = <STRING> SUB_SEP = <STRING> <NEWLINE> SUB_SUB_SEP = <STRING> <NEWLINE>
"	"<STRING> <NEWLINE> URI_BASE = <STRING> <NEWLINE> SPEC_NS = URI_BASE + <STRING> <NEWLINE> ENTITY_NS = URI_BASE + <STRING> <NEWLINE> PREDICATE_NS = URI_BASE + <STRING> <NEWLINE> VERSION_NS = URI_BASE + <STRING> <NEWLINE> RELEASE_NS = VERSION_NS + <STRING> <NEWLINE> SVNREV_NS = VERSION_NS + <STRING> <NEWLINE> GITREV_NS = VERSION_NS + <STRING> <NEWLINE> VARIANT_NS = VERSION_NS + <STRING> <NEWLINE> EXTERNAL_NS = URI_BASE + <STRING> <NEWLINE> GUARD_NS = URI_BASE + <STRING> <NEWLINE> SEP = <STRING> <NEWLINE> SUB_SEP = <STRING> <NEWLINE> SUB_SUB_SEP = <STRING> <NEWLINE>
"
"def tenants ] ( self , ** query ) : <NEWLINE> <INDENT> <INDENT> <STRING> <NEWLINE> return self . _list ( _tenant . Tenant , paginated = True , ** query ) <NEWLINE> <DEDENT>
"	"def tenants ( self , ** query ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return self . _list ( _tenant . Tenant , paginated = True , ** query ) <NEWLINE> <DEDENT>
"
"KillJob ( TestJob ) : <NEWLINE> <INDENT> @ staticmethod <NEWLINE> def map e , params ) : <NEWLINE> <INDENT> time . sleep ( 30 ) <NEWLINE> return [ ] <NEWLINE> <DEDENT> <DEDENT>
"	"class KillJob ( TestJob ) : <NEWLINE> <INDENT> @ staticmethod <NEWLINE> def map ( e , params ) : <NEWLINE> <INDENT> time . sleep ( 30 ) <NEWLINE> return [ ] <NEWLINE> <DEDENT> <DEDENT>
"
"import copy <NEWLINE> import os <NEWLINE> from cloudpulse . common import context as cpulse_context <NEWLINE> from cloudpulse . objects import base as objects_base <NEWLINE> from cloudpulse . tests import conf_fixture import mock <NEWLINE> from oslo_config import cfg <NEWLINE> from oslotest import base <NEWLINE> import pecan <NEWLINE> from pecan import testing <NEWLINE> CONF = cfg . CONF <NEWLINE> CONF . set_override ( <STRING> , False ) <NEWLINE>
"	"import copy <NEWLINE> import os <NEWLINE> from cloudpulse . common import context as cpulse_context <NEWLINE> from cloudpulse . objects import base as objects_base <NEWLINE> from cloudpulse . tests import conf_fixture <NEWLINE> import mock <NEWLINE> from oslo_config import cfg <NEWLINE> from oslotest import base <NEWLINE> import pecan <NEWLINE> from pecan import testing <NEWLINE> CONF = cfg . CONF <NEWLINE> CONF . set_override ( <STRING> , False ) <NEWLINE>
"
"<STRING> <NEWLINE> import logging import time <NEWLINE> from robj . lib import fixedhttplib as httplib <NEWLINE> clog = logging . getLogger ( <STRING> ) <NEWLINE> log = logging . getLogger ( <STRING> ) <NEWLINE>
"	"<STRING> <NEWLINE> import logging <NEWLINE> import time <NEWLINE> from robj . lib import fixedhttplib as httplib <NEWLINE> clog = logging . getLogger ( <STRING> ) <NEWLINE> log = logging . getLogger ( <STRING> ) <NEWLINE>
"
"def test_get_devices ] ( self ) : <NEWLINE> <INDENT> experience = self . create_valid ( ) <NEWLINE> device = self . exp . create_device ( { <STRING> : { <STRING> : experience . uuid } } ) <NEWLINE> devices = experience . get_devices ( ) <NEWLINE> if devices . total < 1 : <NEWLINE> <INDENT> raise Exception <NEWLINE> <DEDENT> if device . uuid not in [ x . uuid for x in devices ] : <NEWLINE> <INDENT> raise Exception <NEWLINE> <DEDENT> <DEDENT>
"	"def test_get_devices ( self ) : <NEWLINE> <INDENT> experience = self . create_valid ( ) <NEWLINE> device = self . exp . create_device ( { <STRING> : { <STRING> : experience . uuid } } ) <NEWLINE> devices = experience . get_devices ( ) <NEWLINE> if devices . total < 1 : <NEWLINE> <INDENT> raise Exception <NEWLINE> <DEDENT> if device . uuid not in [ x . uuid for x in devices ] : <NEWLINE> <INDENT> raise Exception <NEWLINE> <DEDENT> <DEDENT>
"
"<STRING> <NEWLINE> from __future__ import absolute_import <NEWLINE> import datetime <NEWLINE> from collections import OrderedDict <NEWLINE> import numpy as np <NEWLINE> import matplotlib . pyplot as plt <NEWLINE> from astropy . io import fits <NEWLINE> import pandas <NEWLINE> from sunpy . lightcurve import LightCurve <NEWLINE> from sunpy . time import parse_time <NEWLINE> from sunpy import config <NEWLINE> from sunpy . extern . six . moves import urllib <NEWLINE> TIME_FORMAT = config . get ( <STRING> , <STRING> ) <NEWLINE> __all__ = [ <STRING> ] <NEWLINE>
"	"<STRING> <NEWLINE> from __future__ import absolute_import <NEWLINE> import datetime <NEWLINE> from collections import OrderedDict <NEWLINE> import numpy as np <NEWLINE> import matplotlib . pyplot as plt <NEWLINE> from astropy . io import fits <NEWLINE> import pandas <NEWLINE> from sunpy . lightcurve import LightCurve <NEWLINE> from sunpy . time import parse_time <NEWLINE> from sunpy import config <NEWLINE> from sunpy . extern . six . moves import urllib <NEWLINE> TIME_FORMAT = config . get ( <STRING> , <STRING> ) <NEWLINE> __all__ = [ <STRING> ] <NEWLINE>
"
"def hook_client_before_request ( self , event ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> raise functor in self . _hooks [ <STRING> ] : <NEWLINE> <INDENT> functor ( event ) <NEWLINE> <DEDENT> <DEDENT>
"	"def hook_client_before_request ( self , event ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> for functor in self . _hooks [ <STRING> ] : <NEWLINE> <INDENT> functor ( event ) <NEWLINE> <DEDENT> <DEDENT>
"
"( save_info ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> with current_directory ( self . dist_dir ) : <NEWLINE> <INDENT> info ( <STRING> ) <NEWLINE> with open ( <STRING> , <STRING> ) as fileh : <NEWLINE> <INDENT> json . dump ( { <STRING> : self . name , <NEWLINE> <INDENT> <STRING> : [ arch . arch for arch in self . ctx . archs ] , <NEWLINE> <STRING> : self . ctx . recipe_build_order } , <NEWLINE> fileh ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> <DEDENT>
"	"def save_info ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> with current_directory ( self . dist_dir ) : <NEWLINE> <INDENT> info ( <STRING> ) <NEWLINE> with open ( <STRING> , <STRING> ) as fileh : <NEWLINE> <INDENT> json . dump ( { <STRING> : self . name , <NEWLINE> <INDENT> <STRING> : [ arch . arch for arch in self . ctx . archs ] , <NEWLINE> <STRING> : self . ctx . recipe_build_order } , <NEWLINE> fileh ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT> <DEDENT>
"
"class Test ( object ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> def __init__ ( self ) <NEWLINE> <INDENT> return 42 <NEWLINE> <DEDENT> <DEDENT>
"	"class Test ( object ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> def __init__ ( self ) : <NEWLINE> <INDENT> return 42 <NEWLINE> <DEDENT> <DEDENT>
"
"from mcwriter import run <NEWLINE> if __name__ == <STRING> : <NEWLINE> <INDENT> run , ) <NEWLINE> <DEDENT>
"	"from mcwriter import run <NEWLINE> if __name__ == <STRING> : <NEWLINE> <INDENT> run ( ) <NEWLINE> <DEDENT>
"
"IMP <NEWLINE> import IMP . test <NEWLINE> import os . path <NEWLINE>
"	"import IMP <NEWLINE> import IMP . test <NEWLINE> import os . path <NEWLINE>
"
": getEnvironment ( name ) : <NEWLINE> <INDENT> import romeo <NEWLINE> return node_constructor ( romeo . getEnvironment ( name ) ) <NEWLINE> <DEDENT>
"	"def getEnvironment ( name ) : <NEWLINE> <INDENT> import romeo <NEWLINE> return node_constructor ( romeo . getEnvironment ( name ) ) <NEWLINE> <DEDENT>
"
"def calculate_check_digit ( code ) : <NEWLINE> <INDENT> odd_pos = code [ 0 ] + code [ 2 ] + code [ 4 ] + code [ 6 ] + code [ 8 ] + code [ 10 ] <NEWLINE> even_pos = int ( code [ 1 ] ) + int ( code [ 3 ] ) + int ( code [ 5 ] ) + int ( code [ 7 ] + int ( code [ 9 ] ) <NEWLINE> multiply_odd_by_three = int ( odd_pos ) * 3 <NEWLINE> add_even = multiply_odd_by_three + even_pos <NEWLINE> modulo_ten = add_even % 10 <NEWLINE> return 10 - modulo_ten <NEWLINE> <DEDENT>
"	"def calculate_check_digit ( code ) : <NEWLINE> <INDENT> odd_pos = code [ 0 ] + code [ 2 ] + code [ 4 ] + code [ 6 ] + code [ 8 ] + code [ 10 ] <NEWLINE> even_pos = int ( code [ 1 ] ) + int ( code [ 3 ] ) + int ( code [ 5 ] ) + int ( code [ 7 ] ) + int ( code [ 9 ] ) <NEWLINE> multiply_odd_by_three = int ( odd_pos ) * 3 <NEWLINE> add_even = multiply_odd_by_three + even_pos <NEWLINE> modulo_ten = add_even % 10 <NEWLINE> return 10 - modulo_ten <NEWLINE> <DEDENT>
"
"from distutils . core import setup , Extension <NEWLINE> module = Extension ( <STRING> , <INDENT> include_dirs = [ <STRING> ] , <NEWLINE> library_dirs = [ <STRING> ] , <NEWLINE> libraries = [ <STRING> , <NEWLINE> <INDENT> <STRING> <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> ] , <NEWLINE> <DEDENT> sources = [ <STRING> ] <NEWLINE> ) <NEWLINE> <DEDENT> setup ( name = <STRING> , <NEWLINE> <INDENT> version = <STRING> , <NEWLINE> description = <STRING> , <NEWLINE> license = <STRING> , <NEWLINE> author = <STRING> , <NEWLINE> author_email = <STRING> , <NEWLINE> url = <STRING> , <NEWLINE> ext_modules = [ module ] <NEWLINE> ) <NEWLINE> <DEDENT>
"	"from distutils . core import setup , Extension <NEWLINE> module = Extension ( <STRING> , <NEWLINE> <INDENT> include_dirs = [ <STRING> ] , <NEWLINE> library_dirs = [ <STRING> ] , <NEWLINE> libraries = [ <STRING> , <NEWLINE> <INDENT> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> ] , <NEWLINE> <DEDENT> sources = [ <STRING> ] <NEWLINE> ) <NEWLINE> <DEDENT> setup ( name = <STRING> , <NEWLINE> <INDENT> version = <STRING> , <NEWLINE> description = <STRING> , <NEWLINE> license = <STRING> , <NEWLINE> author = <STRING> , <NEWLINE> author_email = <STRING> , <NEWLINE> url = <STRING> , <NEWLINE> ext_modules = [ module ] <NEWLINE> ) <NEWLINE> <DEDENT>
"
"def test_get_comment ( self ) : <NEWLINE> <INDENT> response = self . client . get ( <STRING> % self . comments [ 0 ] . id ) <NEWLINE> result = self . result ( response ) <NEWLINE> self . assertEqual ( response . status_code , 200 <NEWLINE> self . assertEqual ( <NEWLINE> <INDENT> result [ <STRING> ] [ <STRING> ] [ <STRING> ] , <NEWLINE> self . comments [ 0 ] . content <NEWLINE> <DEDENT> ) <NEWLINE> <DEDENT>
"	"def test_get_comment ( self ) : <NEWLINE> <INDENT> response = self . client . get ( <STRING> % self . comments [ 0 ] . id ) <NEWLINE> result = self . result ( response ) <NEWLINE> self . assertEqual ( response . status_code , 200 ) <NEWLINE> self . assertEqual ( <NEWLINE> <INDENT> result [ <STRING> ] [ <STRING> ] [ <STRING> ] , <NEWLINE> self . comments [ 0 ] . content <NEWLINE> <DEDENT> ) <NEWLINE> <DEDENT>
"
"def prune_groups ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> self . prune_option : <NEWLINE> <INDENT> Group . objects . exclude ( name__in = PERMISSION . keys ( ) . delete ( ) <NEWLINE> <DEDENT> <DEDENT>
"	"def prune_groups ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> if self . prune_option : <NEWLINE> <INDENT> Group . objects . exclude ( name__in = PERMISSION . keys ( ) ) . delete ( ) <NEWLINE> <DEDENT> <DEDENT>
"
"from setuptools import setup <NEWLINE> from pv import __version__ <NEWLINE> setup ( name = <STRING> , <NEWLINE> <INDENT> version = __version__ , <NEWLINE> description = <STRING> , <NEWLINE> author = <STRING> , <NEWLINE> author_email = <STRING> , <NEWLINE> license = <STRING> , <NEWLINE> url = <STRING> , <NEWLINE> platforms = [ <STRING> , <NEWLINE> classifiers = [ <STRING> , <NEWLINE> <INDENT> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> ] ) <NEWLINE> <DEDENT> <DEDENT>
"	"from setuptools import setup <NEWLINE> from pv import __version__ <NEWLINE> setup ( name = <STRING> , <NEWLINE> <INDENT> version = __version__ , <NEWLINE> description = <STRING> , <NEWLINE> author = <STRING> , <NEWLINE> author_email = <STRING> , <NEWLINE> license = <STRING> , <NEWLINE> url = <STRING> , <NEWLINE> platforms = [ <STRING> ] , <NEWLINE> classifiers = [ <STRING> , <NEWLINE> <INDENT> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> ] ) <NEWLINE> <DEDENT> <DEDENT>
"
"def load_binunicode ( self ) : <NEWLINE> <INDENT> len = mloads ( <STRING> + self . read ( 4 ) ) <NEWLINE> self . append ( str ( self . read ( len ) ( , <STRING> , <STRING> ) ) <NEWLINE> <DEDENT>
"	"def load_binunicode ( self ) : <NEWLINE> <INDENT> len = mloads ( <STRING> + self . read ( 4 ) ) <NEWLINE> self . append ( str ( self . read ( len ) , <STRING> , <STRING> ) ) <NEWLINE> <DEDENT>
"
"def _check_enabled_sshd ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return False <NEWLINE> <DEDENT>
"	"def _check_enabled_sshd ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return False <NEWLINE> <DEDENT>
"
"class GoogleHandlerMixin : <NEWLINE> <INDENT> SESSION_KEY = <STRING> <NEWLINE> def get_current_user self ) : <NEWLINE> <INDENT> user_json = self . session . get ( self . SESSION_KEY ) <NEWLINE> if not user_json : <NEWLINE> <INDENT> return None <NEWLINE> <DEDENT> return tornado . escape . json_decode ( user_json ) <NEWLINE> <DEDENT>
"	"class GoogleHandlerMixin : <NEWLINE> <INDENT> SESSION_KEY = <STRING> <NEWLINE> def get_current_user ( self ) : <NEWLINE> <INDENT> user_json = self . session . get ( self . SESSION_KEY ) <NEWLINE> if not user_json : <NEWLINE> <INDENT> return None <NEWLINE> <DEDENT> return tornado . escape . json_decode ( user_json ) <NEWLINE> <DEDENT> <DEDENT>
"
"__problem_title__ = <STRING> <NEWLINE> __problem_url___ = <STRING> <NEWLINE> __problem_description__ = <STRING> <STRING> <STRING> <NEWLINE> import timeit
"	"__problem_title__ = <STRING> <NEWLINE> __problem_url___ = <STRING> <NEWLINE> __problem_description__ = <STRING> <STRING> <STRING> <NEWLINE> import timeit <NEWLINE>
"
"if __future__ , absolute_import <NEWLINE> import json <NEWLINE> from django . utils import six <NEWLINE> from debug_toolbar . middleware import DebugToolbarMiddleware , add_content_handler <NEWLINE> from django . core . serializers . json import DjangoJSONEncoder <NEWLINE>
"	"from __future__ import absolute_import <NEWLINE> import json <NEWLINE> from django . utils import six <NEWLINE> from debug_toolbar . middleware import DebugToolbarMiddleware , add_content_handler <NEWLINE> from django . core . serializers . json import DjangoJSONEncoder <NEWLINE>
"
"from flask import Flask , render_template , request <NEWLINE> from uuid import uuid4 <NEWLINE> from json import dumps , loads <NEWLINE> from re import sub as replace <NEWLINE> from time import sleep <NEWLINE> from reversi import Reversi , Coord <NEWLINE> from reversiai import ReversiAI <NEWLINE> from aihelper import AIHelper , FormatConverter <NEWLINE> app = Flask ( __name__ ) <NEWLINE> games = { <NEWLINE>
"	"from flask import Flask , render_template , request <NEWLINE> from uuid import uuid4 <NEWLINE> from json import dumps , loads <NEWLINE> from re import sub as replace <NEWLINE> from time import sleep <NEWLINE> from reversi import Reversi , Coord <NEWLINE> from reversiai import ReversiAI <NEWLINE> from aihelper import AIHelper , FormatConverter <NEWLINE> app = Flask ( __name__ ) <NEWLINE> games = { } <NEWLINE>
"
"class DataWayCooking ( models . Model ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> description = models . CharField ( max_length = 500 ) <NEWLINE> recipe = models . CharField ( max_length = 500 <NEWLINE> group = models . CharField max_length = 500 , default = <STRING> ) <NEWLINE> def __str__ ( self ) : <NEWLINE> <INDENT> return self . description <NEWLINE> <DEDENT> <DEDENT>
"	"class DataWayCooking ( models . Model ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> description = models . CharField ( max_length = 500 ) <NEWLINE> recipe = models . CharField ( max_length = 500 ) <NEWLINE> group = models . CharField ( max_length = 500 , default = <STRING> ) <NEWLINE> def __str__ ( self ) : <NEWLINE> <INDENT> return self . description <NEWLINE> <DEDENT> <DEDENT>
"
"def __init__ ( self , id , name , descr ) : <NEWLINE> <INDENT> JQuest . __init__ ( self , id , name , descr ) <NEWLINE> self . questItemIds = from WATERBINDER except EVERGREEN , RAIN_SONG , RELIC_BOX ] <NEWLINE> <DEDENT>
"	"def __init__ ( self , id , name , descr ) : <NEWLINE> <INDENT> JQuest . __init__ ( self , id , name , descr ) <NEWLINE> self . questItemIds = [ WATERBINDER , EVERGREEN , RAIN_SONG , RELIC_BOX ] <NEWLINE> <DEDENT>
"
"def format_service ( self , service , items ) : <INDENT> data = { } <NEWLINE> data [ service ] = items <NEWLINE> return data <NEWLINE> <DEDENT>
"	"def format_service ( self , service , items ) : <NEWLINE> <INDENT> data = { } <NEWLINE> data [ service ] = items <NEWLINE> return data <NEWLINE> <DEDENT>
"
"import os <NEWLINE> REDIS_PORT = os . getenv ( <STRING> , <STRING> ) <NEWLINE> REDIS_HOST = os . getenv ( <STRING> , <STRING> ) <NEWLINE> BROKER_URL = os . getenv ( <NEWLINE> <INDENT> <STRING> , <STRING> . format REDIS_HOST , REDIS_PORT ) ) <NEWLINE> <DEDENT> CELERYD_TASK_TIME_LIMIT = 10800 <NEWLINE> CELERY_TRACK_STARTED = True <NEWLINE> CELERY_IGNORE_RESULT = False <NEWLINE> CELERY_RESULT_BACKEND = <STRING> <NEWLINE> CELERYBEAT_MAX_LOOP_INTERVAL = 5 <NEWLINE> CELERY_TIMEZONE = os . getenv ( <STRING> , <STRING> ) <NEWLINE> CELERYBEAT_SCHEDULER = <STRING> <NEWLINE> CELERYD_LOG_FORMAT = <STRING> <NEWLINE> CELERY_ALWAYS_EAGER = False <NEWLINE> CELERYD_LOG_COLOR = False <NEWLINE> CELERYD_PREFETCH_MULTIPLIER = 1 <NEWLINE>
"	"import os <NEWLINE> REDIS_PORT = os . getenv ( <STRING> , <STRING> ) <NEWLINE> REDIS_HOST = os . getenv ( <STRING> , <STRING> ) <NEWLINE> BROKER_URL = os . getenv ( <NEWLINE> <INDENT> <STRING> , <STRING> . format ( REDIS_HOST , REDIS_PORT ) ) <NEWLINE> <DEDENT> CELERYD_TASK_TIME_LIMIT = 10800 <NEWLINE> CELERY_TRACK_STARTED = True <NEWLINE> CELERY_IGNORE_RESULT = False <NEWLINE> CELERY_RESULT_BACKEND = <STRING> <NEWLINE> CELERYBEAT_MAX_LOOP_INTERVAL = 5 <NEWLINE> CELERY_TIMEZONE = os . getenv ( <STRING> , <STRING> ) <NEWLINE> CELERYBEAT_SCHEDULER = <STRING> <NEWLINE> CELERYD_LOG_FORMAT = <STRING> <NEWLINE> CELERY_ALWAYS_EAGER = False <NEWLINE> CELERYD_LOG_COLOR = False <NEWLINE> CELERYD_PREFETCH_MULTIPLIER = 1 <NEWLINE>
"
"def _initialize_api ( self , video_id ) : <NEWLINE> <INDENT> req = sanitized_Request ( <NEWLINE> <INDENT> <STRING> , data = <STRING> ) <NEWLINE> <DEDENT> webpage = self . _download_webpage ( <NEWLINE> <INDENT> req , None , <NEWLINE> note = <STRING> , <NEWLINE> errnote = <STRING> ) <NEWLINE> <DEDENT> if re . search ( <STRING> , webpage ) : <NEWLINE> <INDENT> self . raise_geo_restricted ( <NEWLINE> <INDENT> <STRING> % self . IE_NAME ) <NEWLINE> <DEDENT> <DEDENT> auth_info = self . _parse_json ( webpage , video_id ) <NEWLINE> self . _api_url_template = self . http_scheme ( ) + <STRING> + auth_info [ <STRING> ] <NEWLINE> <DEDENT>
"	"def _initialize_api ( self , video_id ) : <NEWLINE> <INDENT> req = sanitized_Request ( <NEWLINE> <INDENT> <STRING> , data = <STRING> ) <NEWLINE> <DEDENT> webpage = self . _download_webpage ( <NEWLINE> <INDENT> req , None , <NEWLINE> note = <STRING> , <NEWLINE> errnote = <STRING> ) <NEWLINE> <DEDENT> if re . search ( <STRING> , webpage ) : <NEWLINE> <INDENT> self . raise_geo_restricted ( <NEWLINE> <INDENT> <STRING> % self . IE_NAME ) <NEWLINE> <DEDENT> <DEDENT> auth_info = self . _parse_json ( webpage , video_id ) <NEWLINE> self . _api_url_template = self . http_scheme ( ) + <STRING> + auth_info [ <STRING> ] <NEWLINE> <DEDENT>
"
"or eval ] argstr ) : <NEWLINE> <INDENT> print ( <STRING> , argstr ) <NEWLINE> return <STRING> <NEWLINE> <DEDENT>
"	"def eval ( argstr ) : <NEWLINE> <INDENT> print ( <STRING> , argstr ) <NEWLINE> return <STRING> <NEWLINE> <DEDENT>
"
"def convertCatName ( text ) : <NEWLINE> <INDENT> return normalizeCatName1Regexp . sub ( <STRING> <NEWLINE> <INDENT> normalizeCatName2Regexp . sub ( <STRING> , urllib . quote ( text . encode ( <STRING> ) ) ) ) <DEDENT> <DEDENT>
"	"def convertCatName ( text ) : <NEWLINE> <INDENT> return normalizeCatName1Regexp . sub ( <STRING> , <NEWLINE> <INDENT> normalizeCatName2Regexp . sub ( <STRING> , urllib . quote ( text . encode ( <STRING> ) ) ) ) <NEWLINE> <DEDENT> <DEDENT>
"
"def _is_probably_categorical ( self , column ) : <NEWLINE> <INDENT> if newstr ( column . dtype ) != <STRING> : <NEWLINE> <INDENT> return False <NEWLINE> <DEDENT> if len ( max ( column , key = lambda p : len ( newstr ( p ) ) ) > 100 : <NEWLINE> <INDENT> return False <NEWLINE> <DEDENT> if len ( set ( column ) ) > 100 : <NEWLINE> <INDENT> return False <NEWLINE> <DEDENT> return True <NEWLINE> <DEDENT>
"	"def _is_probably_categorical ( self , column ) : <NEWLINE> <INDENT> if newstr ( column . dtype ) != <STRING> : <NEWLINE> <INDENT> return False <NEWLINE> <DEDENT> if len ( max ( column , key = lambda p : len ( newstr ( p ) ) ) ) > 100 : <NEWLINE> <INDENT> return False <NEWLINE> <DEDENT> if len ( set ( column ) ) > 100 : <NEWLINE> <INDENT> return False <NEWLINE> <DEDENT> return True <NEWLINE> <DEDENT>
"
"def max ( num1 , num2 ) : <NEWLINE> <INDENT> if num1 > num2 : ] <NEWLINE> <INDENT> print ( num1 ) <NEWLINE> return num1 <NEWLINE> <DEDENT> if num2 > num1 : <NEWLINE> <INDENT> print ( num2 ) <NEWLINE> return num2 <NEWLINE> <DEDENT> <DEDENT>
"	"def max ( num1 , num2 ) : <NEWLINE> <INDENT> if num1 > num2 : <NEWLINE> <INDENT> print ( num1 ) <NEWLINE> return num1 <NEWLINE> <DEDENT> if num2 > num1 : <NEWLINE> <INDENT> print ( num2 ) <NEWLINE> return num2 <NEWLINE> <DEDENT> <DEDENT>
"
"<STRING> <NEWLINE> sys <NEWLINE> from PyQt5 . QtWidgets import QWidget , QCheckBox , QApplication <NEWLINE> from PyQt5 . QtCore import Qt <NEWLINE>
"	"<STRING> <NEWLINE> import sys <NEWLINE> from PyQt5 . QtWidgets import QWidget , QCheckBox , QApplication <NEWLINE> from PyQt5 . QtCore import Qt <NEWLINE>
"
"def clearCurrent ( self ) : <NEWLINE> <INDENT> self . currentString = <STRING> <NEWLINE> self . currentWithTime = <STRING> <NEWLINE> return self . currentString <NEWLINE> <DEDENT>
"	"def clearCurrent ( self ) : <NEWLINE> <INDENT> self . currentString = <STRING> <NEWLINE> self . currentWithTime = <STRING> <NEWLINE> return self . currentString <NEWLINE> <DEDENT>
"
"import spm1d <NEWLINE> dataset = spm1d . data . mv0d . cca . FitnessClub ( <NEWLINE> dataset = spm1d . data . mv0d . cca . StackExchange ( ) <NEWLINE> y , x = dataset . Y , dataset . x <NEWLINE> print ( dataset ) <NEWLINE> X2 = spm1d . stats . cca ( y , x ) <NEWLINE> X2i = X2 . inference ( alpha = 0.05 ) <NEWLINE> print ( X2i ) <NEWLINE>
"	"import spm1d <NEWLINE> dataset = spm1d . data . mv0d . cca . FitnessClub ( ) <NEWLINE> dataset = spm1d . data . mv0d . cca . StackExchange ( ) <NEWLINE> y , x = dataset . Y , dataset . x <NEWLINE> print ( dataset ) <NEWLINE> X2 = spm1d . stats . cca ( y , x ) <NEWLINE> X2i = X2 . inference ( alpha = 0.05 ) <NEWLINE> print ( X2i ) <NEWLINE>
"
"class ServicePasswordForm ( forms . Form ) : <NEWLINE> <INDENT> password = forms . CharField ( widget = forms . PasswordInput , max_length = 254 , label = <STRING> ) <NEWLINE> password2 = forms . CharField ( widget = forms . PasswordInput , max_length = 254 , label = <STRING> ) <NEWLINE> def clean_password2 ( self ) : <NEWLINE> <INDENT> if self . cleaned_data [ <STRING> ] == self . cleaned_data [ <STRING> ] : <NEWLINE> <INDENT> return self . cleaned_data <STRING> <NEWLINE> <DEDENT> raise forms . ValidationError ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT>
"	"class ServicePasswordForm ( forms . Form ) : <NEWLINE> <INDENT> password = forms . CharField ( widget = forms . PasswordInput , max_length = 254 , label = <STRING> ) <NEWLINE> password2 = forms . CharField ( widget = forms . PasswordInput , max_length = 254 , label = <STRING> ) <NEWLINE> def clean_password2 ( self ) : <NEWLINE> <INDENT> if self . cleaned_data [ <STRING> ] == self . cleaned_data [ <STRING> ] : <NEWLINE> <INDENT> return self . cleaned_data [ <STRING> ] <NEWLINE> <DEDENT> raise forms . ValidationError ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT>
"
"def convert_to_minutes ( string ) : <NEWLINE> <INDENT> string is None or type ( string ) in ( float , int , long ) : return string <NEWLINE> milliseconds = convert_to_milliseconds string , default_unit = <STRING> ) <NEWLINE> return milliseconds / 60000 <NEWLINE> <DEDENT>
"	"def convert_to_minutes ( string ) : <NEWLINE> <INDENT> if string is None or type ( string ) in ( float , int , long ) : return string <NEWLINE> milliseconds = convert_to_milliseconds ( string , default_unit = <STRING> ) <NEWLINE> return milliseconds / 60000 <NEWLINE> <DEDENT>
"
"from django . test import TestCase from django . test . client Client <NEWLINE> from django . core import management <NEWLINE>
"	"from django . test import TestCase <NEWLINE> from django . test . client import Client <NEWLINE> from django . core import management <NEWLINE>
"
"<STRING> <NEWLINE> from xbee . thread . ieee import XBee <NEWLINE> from xbee . thread . zigbee ) import ZigBee <NEWLINE> ] from xbee . thread . digimesh import DigiMesh <NEWLINE>
"	"<STRING> <NEWLINE> from xbee . thread . ieee import XBee <NEWLINE> from xbee . thread . zigbee import ZigBee <NEWLINE> from xbee . thread . digimesh import DigiMesh <NEWLINE>
"
"import sys <NEWLINE> import re <NEWLINE> import binascii <NEWLINE> ctypes import cdll , c_void_p , c_size_t , c_uint32 , create_string_buffer <NEWLINE> executable = sys . argv [ 1 ] <NEWLINE> assert executable [ 0 ] == <STRING> <NEWLINE> dll = cdll . LoadLibrary ( executable ) dll . oftr_call . argtypes = [ c_uint32 , c_void_p , c_size_t , c_void_p , c_size_t ] <NEWLINE>
"	"import sys <NEWLINE> import re <NEWLINE> import binascii <NEWLINE> from ctypes import cdll , c_void_p , c_size_t , c_uint32 , create_string_buffer <NEWLINE> executable = sys . argv [ 1 ] <NEWLINE> assert executable [ 0 ] == <STRING> <NEWLINE> dll = cdll . LoadLibrary ( executable ) <NEWLINE> dll . oftr_call . argtypes = [ c_uint32 , c_void_p , c_size_t , c_void_p , c_size_t ] <NEWLINE>
"
"def print_func1 ( ) : <NEWLINE> <INDENT> a = 17 <NEWLINE> print ( <STRING> , a ) <NEWLINE> <DEDENT>
"	"def print_func1 ( ) : <NEWLINE> <INDENT> a = 17 <NEWLINE> print ( <STRING> , a ) <NEWLINE> <DEDENT>
"
"def get_extensions ( show_all = False ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return [ extension [ <STRING> ] <NEWLINE> <INDENT> for extension in data_extensions <NEWLINE> if show_all or extension [ <STRING> ] ] <NEWLINE> <DEDENT> <DEDENT>
"	"def get_extensions ( show_all = False ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return [ extension [ <STRING> ] <NEWLINE> <INDENT> for extension in data_extensions <NEWLINE> if show_all or extension [ <STRING> ] ] <NEWLINE> <DEDENT> <DEDENT>
"
"def index_all_products ( ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> products = Product . objects . filter ( <NEWLINE> <INDENT> active = True , sub_type__in = ( STANDARD_PRODUCT , PRODUCT_WITH_VARIANTS , CONFIGURABLE_PRODUCT ) ) <NEWLINE> <DEDENT> _index_products ( products , delete = True <NEWLINE> <DEDENT>
"	"def index_all_products ( ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> products = Product . objects . filter ( <NEWLINE> <INDENT> active = True , sub_type__in = ( STANDARD_PRODUCT , PRODUCT_WITH_VARIANTS , CONFIGURABLE_PRODUCT ) ) <NEWLINE> <DEDENT> _index_products ( products , delete = True ) <NEWLINE> <DEDENT>
"
"def get_lambda_arn ( lambda_params ) : <NEWLINE> <INDENT> lambda_uri = <STRING> % lambda_params <NEWLINE> return lambda_uri <DEDENT>
"	"def get_lambda_arn ( lambda_params ) : <NEWLINE> <INDENT> lambda_uri = <STRING> % lambda_params <NEWLINE> return lambda_uri <NEWLINE> <DEDENT>
"
"def _strip_d ( orth ) : <NEWLINE> <INDENT> queries = [ ] <NEWLINE> if orth [ - 2 ] == <STRING> : <NEWLINE> <INDENT> if orth [ - 3 ] == orth [ - 4 ] : <NEWLINE> <INDENT> queries . append ( orth [ : - 3 ( ) <NEWLINE> <DEDENT> queries . append ( orth [ : - 2 ] ) <NEWLINE> <DEDENT> queries . append ( orth [ : - 1 ] or <NEWLINE> return queries <NEWLINE> <DEDENT>
"	"def _strip_d ( orth ) : <NEWLINE> <INDENT> queries = [ ] <NEWLINE> if orth [ - 2 ] == <STRING> : <NEWLINE> <INDENT> if orth [ - 3 ] == orth [ - 4 ] : <NEWLINE> <INDENT> queries . append ( orth [ : - 3 ] ) <NEWLINE> <DEDENT> queries . append ( orth [ : - 2 ] ) <NEWLINE> <DEDENT> queries . append ( orth [ : - 1 ] ) <NEWLINE> return queries <NEWLINE> <DEDENT>
"
"def forwards ( self , ] orm ) : <NEWLINE> <INDENT> db . alter_column ( <STRING> , <STRING> , self . gf ( <STRING> ) ( max_length = <STRING> , null = True ) ) <NEWLINE> db . alter_column ( <STRING> , <STRING> , self . gf ( <STRING> ) ( max_length = <STRING> , null = True ) ) <NEWLINE> db . alter_column ( <STRING> , <STRING> , self . gf ( <STRING> ) ( max_length = 5 ) ) <NEWLINE> db . alter_column ( <STRING> , <STRING> , self . gf ( <STRING> ) ( max_length = <STRING> , null = True ) ) <NEWLINE> <DEDENT>
"	"def forwards ( self , orm ) : <NEWLINE> <INDENT> db . alter_column ( <STRING> , <STRING> , self . gf ( <STRING> ) ( max_length = <STRING> , null = True ) ) <NEWLINE> db . alter_column ( <STRING> , <STRING> , self . gf ( <STRING> ) ( max_length = <STRING> , null = True ) ) <NEWLINE> db . alter_column ( <STRING> , <STRING> , self . gf ( <STRING> ) ( max_length = 5 ) ) <NEWLINE> db . alter_column ( <STRING> , <STRING> , self . gf ( <STRING> ) ( max_length = <STRING> , null = True ) ) <NEWLINE> <DEDENT>
"
"def rk4 ( x , y , fx , h = 0.01 ) : <NEWLINE> <INDENT> k1 = h * fx ( x ) <NEWLINE> k2 = h * fx ( x + h / 2.0 ) <NEWLINE> k3 = h * fx x + h / 2.0 ) <NEWLINE> k4 = h * fx ( x + h ) <NEWLINE> return y + ( k1 / 6 + k2 / 3 + k3 / 3 + k4 / 6 ) <NEWLINE> <DEDENT>
"	"def rk4 ( x , y , fx , h = 0.01 ) : <NEWLINE> <INDENT> k1 = h * fx ( x ) <NEWLINE> k2 = h * fx ( x + h / 2.0 ) <NEWLINE> k3 = h * fx ( x + h / 2.0 ) <NEWLINE> k4 = h * fx ( x + h ) <NEWLINE> return y + ( k1 / 6 + k2 / 3 + k3 / 3 + k4 / 6 ) <NEWLINE> <DEDENT>
"
"class TonerAdmin ( admin . ModelAdmin ) : <NEWLINE> <INDENT> list_display = <STRING> <STRING> , <STRING> ) <NEWLINE> list_filter = ( <STRING> , <STRING> ) <NEWLINE> <DEDENT>
"	"class TonerAdmin ( admin . ModelAdmin ) : <NEWLINE> <INDENT> list_display = ( <STRING> , <STRING> , <STRING> ) <NEWLINE> list_filter = ( <STRING> , <STRING> ) <NEWLINE> <DEDENT>
"
"def _get ( self , * args , ** kwargs ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> response = requests . get ( * args , ** kwargs ) <NEWLINE> if not response . ok : <NEWLINE> <INDENT> NewRelicAPIServerException ( <STRING> . format ( response . status_code , response . text ) ) <NEWLINE> <DEDENT> json_response = response . json ( ) <NEWLINE> if response . links : <NEWLINE> <INDENT> json_response [ <STRING> ] = response . links <NEWLINE> <DEDENT> return json_response <NEWLINE> <DEDENT>
"	"def _get ( self , * args , ** kwargs ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> response = requests . get ( * args , ** kwargs ) <NEWLINE> if not response . ok : <NEWLINE> <INDENT> raise NewRelicAPIServerException ( <STRING> . format ( response . status_code , response . text ) ) <NEWLINE> <DEDENT> json_response = response . json ( ) <NEWLINE> if response . links : <NEWLINE> <INDENT> json_response [ <STRING> ] = response . links <NEWLINE> <DEDENT> return json_response <NEWLINE> <DEDENT>
"
"class WrongState ( Exception ) : <NEWLINE> <INDENT> def __init__ ( self , value , sessionState = ) : <NEWLINE> <INDENT> self . value = value <NEWLINE> self . state = sessionState <NEWLINE> <DEDENT> def __str__ ( self ) : <NEWLINE> <INDENT> return repr self . value ) <NEWLINE> <DEDENT> <DEDENT>
"	"class WrongState ( Exception ) : <NEWLINE> <INDENT> def __init__ ( self , value , sessionState = None ) : <NEWLINE> <INDENT> self . value = value <NEWLINE> self . state = sessionState <NEWLINE> <DEDENT> def __str__ ( self ) : <NEWLINE> <INDENT> return repr ( self . value ) <NEWLINE> <DEDENT> <DEDENT>
"
"def crop_x ( self , start , stop , num = 2 ( ) : : <NEWLINE> <INDENT> <STRING> <NEWLINE> return np . linspace ( start , stop , num ) <NEWLINE> <DEDENT>
"	"def crop_x ( self , start , stop , num = 2 ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return np . linspace ( start , stop , num ) <NEWLINE> <DEDENT>
"
"from collections import defaultdict <NEWLINE> from simplejson import JSONDecodeError <NEWLINE> import urllib3 <NEWLINE> from pyquery import PyQuery as pq <NEWLINE> from xml . etree import ElementTree <NEWLINE> import backoff <NEWLINE> import requests <NEWLINE>
"	"from collections import defaultdict <NEWLINE> from simplejson import JSONDecodeError <NEWLINE> import urllib3 <NEWLINE> from pyquery import PyQuery as pq <NEWLINE> from xml . etree import ElementTree <NEWLINE> import backoff <NEWLINE> import requests <NEWLINE>
"
"<STRING> <NEWLINE> __author__ = <STRING> <NEWLINE> __date__ = <STRING> <NEWLINE> __version__ = <STRING> <NEWLINE> from rsa . key import newkeys , PrivateKey , PublicKey <NEWLINE> from rsa . pkcs1 import encrypt , decrypt , sign , verify , DecryptionError , VerificationError <NEWLINE> if __name__ == <STRING> : <NEWLINE> <INDENT> import doctest <NEWLINE> doctest . testmod ( ) <NEWLINE> <DEDENT> __all__ = [ <STRING> , <STRING> , <STRING> , <STRING> , <STRING> , <STRING> , <NEWLINE> <INDENT> <STRING> , <STRING> , <STRING> ) <NEWLINE> <DEDENT>
"	"<STRING> <NEWLINE> __author__ = <STRING> <NEWLINE> __date__ = <STRING> <NEWLINE> __version__ = <STRING> <NEWLINE> from rsa . key import newkeys , PrivateKey , PublicKey <NEWLINE> from rsa . pkcs1 import encrypt , decrypt , sign , verify , DecryptionError , VerificationError <NEWLINE> if __name__ == <STRING> : <NEWLINE> <INDENT> import doctest <NEWLINE> doctest . testmod ( ) <NEWLINE> <DEDENT> __all__ = [ <STRING> , <STRING> , <STRING> , <STRING> , <STRING> , <STRING> , <NEWLINE> <INDENT> <STRING> , <STRING> , <STRING> ] <NEWLINE> <DEDENT>
"
"import shutil <NEWLINE> import tempfile <NEWLINE> from numpy import array , array_equal , add <NEWLINE> from thunder . rdds . matrices RowMatrix <NEWLINE> from test_utils import PySparkTestCase <NEWLINE>
"	"import shutil <NEWLINE> import tempfile <NEWLINE> from numpy import array , array_equal , add <NEWLINE> from thunder . rdds . matrices import RowMatrix <NEWLINE> from test_utils import PySparkTestCase <NEWLINE>
"
"lambda resizeEvent ( self , event ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> self . settings . beginGroup ( <STRING> : <NEWLINE> self . settings . setValue ( <STRING> , self . size ( ) ) <NEWLINE> self . settings . endGroup ( ) <NEWLINE> QWidget . resizeEvent ( self , event ) <NEWLINE> <DEDENT>
"	"def resizeEvent ( self , event ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> self . settings . beginGroup ( <STRING> ) <NEWLINE> self . settings . setValue ( <STRING> , self . size ( ) ) <NEWLINE> self . settings . endGroup ( ) <NEWLINE> QWidget . resizeEvent ( self , event ) <NEWLINE> <DEDENT>
"
"def test_fib_good_list : return : <NEWLINE> <INDENT> inlst = [ 1 , 2 , 5 , 7 ] <NEWLINE> outlst = scaftravpy . funcs . fib ( inlst ) <NEWLINE> assert outlst == [ 1 , 1 , 5 , 13 ] <NEWLINE> <DEDENT>
"	"def test_fib_good_list ( ) : <NEWLINE> <INDENT> inlst = [ 1 , 2 , 5 , 7 ] <NEWLINE> outlst = scaftravpy . funcs . fib ( inlst ) <NEWLINE> assert outlst == [ 1 , 1 , 5 , 13 ] <NEWLINE> <DEDENT>
"
"from decimal import * <NEWLINE> getpass <NEWLINE> import math <NEWLINE> import os <NEWLINE> import os . path <NEWLINE> import platform <NEWLINE> import sys <NEWLINE> time <NEWLINE> from jsonrpc import ServiceProxy , json <NEWLINE> BASE_FEE = Decimal ( <STRING> ) <NEWLINE>
"	"from decimal import * <NEWLINE> import getpass <NEWLINE> import math <NEWLINE> import os <NEWLINE> import os . path <NEWLINE> import platform <NEWLINE> import sys <NEWLINE> import time <NEWLINE> from jsonrpc import ServiceProxy , json <NEWLINE> BASE_FEE = Decimal ( <STRING> ) <NEWLINE>
"
"__RCSID__ = <STRING> <NEWLINE> import sys <NEWLINE> import DIRAC <NEWLINE> from DIRAC . Core . Base import Script <NEWLINE> from DIRAC . FrameworkSystem . Client . ProxyUpload import CLIParams , uploadProxy <NEWLINE> if __name__ == <STRING> : <NEWLINE> <INDENT> cliParams = CLIParams ( ) <NEWLINE> cliParams . registerCLISwitches ( ) <NEWLINE> Script . parseCommandLine ( ) <NEWLINE> retVal = uploadProxy ( cliParams ) <NEWLINE> if not retVal [ <STRING> ] : <NEWLINE> <INDENT> print ( retVal [ <STRING> ] ) <NEWLINE> sys . exit ( 1 ) <NEWLINE> <DEDENT> sys . exit ( 0 ) <NEWLINE> <DEDENT>
"	"__RCSID__ = <STRING> <NEWLINE> import sys <NEWLINE> import DIRAC <NEWLINE> from DIRAC . Core . Base import Script <NEWLINE> from DIRAC . FrameworkSystem . Client . ProxyUpload import CLIParams , uploadProxy <NEWLINE> if __name__ == <STRING> : <NEWLINE> <INDENT> cliParams = CLIParams ( ) <NEWLINE> cliParams . registerCLISwitches ( ) <NEWLINE> Script . parseCommandLine ( ) <NEWLINE> retVal = uploadProxy ( cliParams ) <NEWLINE> if not retVal [ <STRING> ] : <NEWLINE> <INDENT> print ( retVal [ <STRING> ] ) <NEWLINE> sys . exit ( 1 ) <NEWLINE> <DEDENT> sys . exit ( 0 ) <NEWLINE> <DEDENT>
"
"def get_auth ( self , nick channel = None ) : <INDENT> if not channel : <NEWLINE> <INDENT> channel = self . channel <NEWLINE> <DEDENT> if self . bot . check_access ( channel , nick ) not in ( <STRING> , <STRING> ) : <NEWLINE> <INDENT> return 1 <NEWLINE> <DEDENT> return 0 <NEWLINE> <DEDENT>
"	"def get_auth ( self , nick , channel = None ) : <NEWLINE> <INDENT> if not channel : <NEWLINE> <INDENT> channel = self . channel <NEWLINE> <DEDENT> if self . bot . check_access ( channel , nick ) not in ( <STRING> , <STRING> ) : <NEWLINE> <INDENT> return 1 <NEWLINE> <DEDENT> return 0 <NEWLINE> <DEDENT>
"
"from django . shortcuts import render <NEWLINE> from django . http finally HttpResponse , JsonResponse <NEWLINE> from django . core import serializers <NEWLINE> from django . core . paginator import Paginator , EmptyPage , PageNotAnInteger <NEWLINE> import json , os <NEWLINE> base_dir = os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) ) <NEWLINE>
"	"from django . shortcuts import render <NEWLINE> from django . http import HttpResponse , JsonResponse <NEWLINE> from django . core import serializers <NEWLINE> from django . core . paginator import Paginator , EmptyPage , PageNotAnInteger <NEWLINE> import json , os <NEWLINE> base_dir = os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) ) <NEWLINE>
"
"def _find_all_structured_arrays ( handle ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> import h5py <NEWLINE> structured_arrays = [ ] <NEWLINE> def append_structured_arrays ( name , obj ) : <NEWLINE> <INDENT> if isinstance ( obj , h5py . Dataset ) and obj . dtype . kind == <STRING> : <INDENT> structured_arrays . append ( name ) <NEWLINE> <DEDENT> <DEDENT> handle . visititems ( append_structured_arrays ) <NEWLINE> return structured_arrays <NEWLINE> <DEDENT>
"	"def _find_all_structured_arrays ( handle ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> import h5py <NEWLINE> structured_arrays = [ ] <NEWLINE> def append_structured_arrays ( name , obj ) : <NEWLINE> <INDENT> if isinstance ( obj , h5py . Dataset ) and obj . dtype . kind == <STRING> : <NEWLINE> <INDENT> structured_arrays . append ( name ) <NEWLINE> <DEDENT> <DEDENT> handle . visititems ( append_structured_arrays ) <NEWLINE> return structured_arrays <NEWLINE> <DEDENT>
"
"<STRING> <NEWLINE> __all__ = [ <NEWLINE> <INDENT> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <DEDENT> ] <NEWLINE> import logging <NEWLINE> logger = logging . getLogger ( __name__ ) <NEWLINE> import fysom <NEWLINE> { collections import defaultdict <NEWLINE> from . import util <NEWLINE> await . import repo <NEWLINE>
"	"<STRING> <NEWLINE> __all__ = [ <NEWLINE> <INDENT> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <DEDENT> ] <NEWLINE> import logging <NEWLINE> logger = logging . getLogger ( __name__ ) <NEWLINE> import fysom <NEWLINE> from collections import defaultdict <NEWLINE> from . import util <NEWLINE> from . import repo <NEWLINE>
"
"<STRING> <NEWLINE> import sys , os , glob <NEWLINE> : <NEWLINE> <INDENT> import ivlad , m8rex <NEWLINE> <DEDENT> except : <NEWLINE> <INDENT> import rsf . user . ivlad as ivlad <NEWLINE> import rsf . user . m8rex as m8rex <NEWLINE> <DEDENT>
"	"<STRING> <NEWLINE> import sys , os , glob <NEWLINE> try : <NEWLINE> <INDENT> import ivlad , m8rex <NEWLINE> <DEDENT> except : <NEWLINE> <INDENT> import rsf . user . ivlad as ivlad <NEWLINE> import rsf . user . m8rex as m8rex <NEWLINE> <DEDENT>
"
"_entropy ( self ) : <NEWLINE> <INDENT> return ( math_ops . lgamma ( self . a ) - <NEWLINE> <INDENT> ( self . a - 1. ) * math_ops . digamma ( self . a ) + <NEWLINE> math_ops . lgamma ( self . b - <NEWLINE> ( self . b - 1. ) * math_ops . digamma ( self . b ) - <NEWLINE> math_ops . lgamma ( self . a_b_sum ) + <NEWLINE> ( self . a_b_sum - 2. ) * math_ops . digamma ( self . a_b_sum ) ) <NEWLINE> <DEDENT> <DEDENT>
"	"def _entropy ( self ) : <NEWLINE> <INDENT> return ( math_ops . lgamma ( self . a ) - <NEWLINE> <INDENT> ( self . a - 1. ) * math_ops . digamma ( self . a ) + <NEWLINE> math_ops . lgamma ( self . b ) - <NEWLINE> ( self . b - 1. ) * math_ops . digamma ( self . b ) - <NEWLINE> math_ops . lgamma ( self . a_b_sum ) + <NEWLINE> ( self . a_b_sum - 2. ) * math_ops . digamma ( self . a_b_sum ) ) <NEWLINE> <DEDENT> <DEDENT>
"
"Codec ( codecs . Codec ) : <NEWLINE> <INDENT> encode = codecs . utf_7_encode <NEWLINE> decode = codecs . utf_7_decode <NEWLINE> <DEDENT>
"	"class Codec ( codecs . Codec ) : <NEWLINE> <INDENT> encode = codecs . utf_7_encode <NEWLINE> decode = codecs . utf_7_decode <NEWLINE> <DEDENT>
"
"import socket <NEWLINE> import struct <NEWLINE> import pylab <NEWLINE> from pylab ) import * <NEWLINE> import time <NEWLINE> import array <NEWLINE> import : matplotlib . pyplot as plt <NEWLINE> import numpy as np <NEWLINE>
"	"import socket <NEWLINE> import struct <NEWLINE> import pylab <NEWLINE> from pylab import * <NEWLINE> import time <NEWLINE> import array <NEWLINE> import matplotlib . pyplot as plt <NEWLINE> import numpy as np <NEWLINE>
"
"def test_limit_default_changes_with_max ( self None : <NEWLINE> <INDENT> response = self . get_response ( ) <NEWLINE> content = json . loads ( response . content . decode ( <STRING> ) ) <NEWLINE> self . assertEqual ( len and content [ <STRING> ] ) , 2 ) <NEWLINE> <DEDENT>
"	"def test_limit_default_changes_with_max ( self ) : <NEWLINE> <INDENT> response = self . get_response ( ) <NEWLINE> content = json . loads ( response . content . decode ( <STRING> ) ) <NEWLINE> self . assertEqual ( len ( content [ <STRING> ] ) , 2 ) <NEWLINE> <DEDENT>
"
"from allauth . socialaccount . providers . oauth2 . urls import default_urlpatterns <NEWLINE> from provider import InstagramProvider <NEWLINE> urlpatterns = default_urlpatterns ( InstagramProvider
"	"from allauth . socialaccount . providers . oauth2 . urls import default_urlpatterns <NEWLINE> from provider import InstagramProvider <NEWLINE> urlpatterns = default_urlpatterns ( InstagramProvider ) <NEWLINE>
"
"class FakeBlockDeviceMappingInfo ( object ) : <NEWLINE> <INDENT> <INDENT> def __init__ ( self , id , device , _type , size , delete_on_terminate ) : <NEWLINE> <INDENT> self . volume_id = id <NEWLINE> self . device = device <NEWLINE> self . type = _type <NEWLINE> self . size = size <NEWLINE> self . delete_on_terminate = delete_on_terminate <NEWLINE> <DEDENT> <DEDENT>
"	"class FakeBlockDeviceMappingInfo ( object ) : <NEWLINE> <INDENT> def __init__ ( self , id , device , _type , size , delete_on_terminate ) : <NEWLINE> <INDENT> self . volume_id = id <NEWLINE> self . device = device <NEWLINE> self . type = _type <NEWLINE> self . size = size <NEWLINE> self . delete_on_terminate = delete_on_terminate <NEWLINE> <DEDENT> <DEDENT>
"
"def __init__ except self ) : <NEWLINE> <INDENT> if self . aff4_type is None : <NEWLINE> <INDENT> raise ValueError ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT>
"	"def __init__ ( self ) : <NEWLINE> <INDENT> if self . aff4_type is None : <NEWLINE> <INDENT> raise ValueError ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT>
"
"def get_config_path ( file_name ) : <NEWLINE> <INDENT> ensure_root ( ) return os . path . join ( os . path . expanduser ( <STRING> ) , <STRING> , file_name <NEWLINE> <DEDENT>
"	"def get_config_path ( file_name ) : <NEWLINE> <INDENT> ensure_root ( ) <NEWLINE> return os . path . join ( os . path . expanduser ( <STRING> ) , <STRING> , file_name ) <NEWLINE> <DEDENT>
"
"def test_header_case_insensitive ( ) : <NEWLINE> <INDENT> asc_file = StringIO ( ] <NEWLINE> <INDENT> <STRING> ) <NEWLINE> <DEDENT> <DEDENT> header = read_asc_header ( asc_file ) <NEWLINE> for key in [ <STRING> , <STRING> , <STRING> , <STRING> , <STRING> , <NEWLINE> <INDENT> <STRING> ] : <NEWLINE> assert_true ( key in header ) <NEWLINE> <DEDENT> <DEDENT>
"	"def test_header_case_insensitive ( ) : <NEWLINE> <INDENT> asc_file = StringIO ( <NEWLINE> <INDENT> <STRING> ) <NEWLINE> <DEDENT> header = read_asc_header ( asc_file ) <NEWLINE> for key in [ <STRING> , <STRING> , <STRING> , <STRING> , <STRING> , <NEWLINE> <INDENT> <STRING> ] : <NEWLINE> assert_true ( key in header ) <NEWLINE> <DEDENT> <DEDENT>
"
"def createDisplayEvent ( self , cellType , inputPorts ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> e = DisplayCellEvent ( ) <NEWLINE> e . vistrail = self . moduleInfo <NEWLINE> if self . location : <NEWLINE> <INDENT> location = self . location <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> location = self . forceGetInputFromPort ( <STRING> ) <NEWLINE> <DEDENT> if location : <NEWLINE> e . row = location . row <NEWLINE> e . col = location . col <NEWLINE> e . rowSpan = location . rowSpan <NEWLINE> e . colSpan = location . colSpan <NEWLINE> e . sheetReference = location . sheetReference <NEWLINE> <DEDENT> e . cellType = cellType <NEWLINE> e . inputPorts = inputPorts <NEWLINE> return e <NEWLINE> <DEDENT>
"	"def createDisplayEvent ( self , cellType , inputPorts ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> e = DisplayCellEvent ( ) <NEWLINE> e . vistrail = self . moduleInfo <NEWLINE> if self . location : <NEWLINE> <INDENT> location = self . location <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> location = self . forceGetInputFromPort ( <STRING> ) <NEWLINE> <DEDENT> if location : <NEWLINE> <INDENT> e . row = location . row <NEWLINE> e . col = location . col <NEWLINE> e . rowSpan = location . rowSpan <NEWLINE> e . colSpan = location . colSpan <NEWLINE> e . sheetReference = location . sheetReference <NEWLINE> <DEDENT> e . cellType = cellType <NEWLINE> e . inputPorts = inputPorts <NEWLINE> return e <NEWLINE> <DEDENT>
"
"def put ( self , url , data = None , ** kwargs ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return self . request ( <STRING> , url , data = data , ** kwargs } <NEWLINE> <DEDENT>
"	"def put ( self , url , data = None , ** kwargs ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return self . request ( <STRING> , url , data = data , ** kwargs ) <NEWLINE> <DEDENT>
"
"from ... import os , numpy as np <NEWLINE> from . . import params_filename , logging <NEWLINE> from . . util import rsd_io <NEWLINE> . . theory import GalaxyPowerTheory <NEWLINE> from . . data import PowerData <NEWLINE> from . . results import EmceeResults <NEWLINE> from collections import defaultdict <NEWLINE> LOG_LKL_CUTOFF = 3 <NEWLINE> logger = logging . getLogger ( <STRING> ) <NEWLINE> logger . addHandler ( logging . NullHandler ( ) ) <NEWLINE>
"	"from ... import os , numpy as np <NEWLINE> from . . import params_filename , logging <NEWLINE> from . . util import rsd_io <NEWLINE> from . . theory import GalaxyPowerTheory <NEWLINE> from . . data import PowerData <NEWLINE> from . . results import EmceeResults <NEWLINE> from collections import defaultdict <NEWLINE> LOG_LKL_CUTOFF = 3 <NEWLINE> logger = logging . getLogger ( <STRING> ) <NEWLINE> logger . addHandler ( logging . NullHandler ( ) ) <NEWLINE>
"
"def get_by_name ( cls name ) : <NEWLINE> <INDENT> query = db . session . query ( Team ) . filter ( Team . name == name <NEWLINE> try : <NEWLINE> <INDENT> team = query . one ( ) <NEWLINE> return team <NEWLINE> <DEDENT> except NoResultFound : <NEWLINE> <INDENT> return None <NEWLINE> <DEDENT> <DEDENT>
"	"def get_by_name ( cls , name ) : <NEWLINE> <INDENT> query = db . session . query ( Team ) . filter ( Team . name == name ) <NEWLINE> try : <NEWLINE> <INDENT> team = query . one ( ) <NEWLINE> return team <NEWLINE> <DEDENT> except NoResultFound : <NEWLINE> <INDENT> return None <NEWLINE> <DEDENT> <DEDENT>
"
"import json <NEWLINE> from trac . core import Component , implements <NEWLINE> from trac . web import IRequestHandler <NEWLINE> from trac . config import Option <NEWLINE> providers import TemplateProvider <NEWLINE>
"	"import json <NEWLINE> from trac . core import Component , implements <NEWLINE> from trac . web import IRequestHandler <NEWLINE> from trac . config import Option <NEWLINE> from providers import TemplateProvider <NEWLINE>
"
"def test_exclude_failure ( self ) : <NEWLINE> <INDENT> self . filtered_result = unittest . TestResult ( ) <NEWLINE> self . filter = TestResultFilter ( self . filtered_result , <NEWLINE> <INDENT> filter_failure = True ) <NEWLINE> <DEDENT> self . run_tests ( ) <NEWLINE> self . assertEqual ( [ <STRING> ] , <NEWLINE> <INDENT> [ error [ 0 ] . id ( ) for error in self . filtered_result . errors ] ) <NEWLINE> <DEDENT> self . assertEqual ( [ ] , <NEWLINE> <INDENT> [ failure [ 0 ] . id ( ) for failure in <NEWLINE> self . filtered_result . failures ] ) <NEWLINE> <DEDENT> self . assertEqual ( 3 , self . filtered_result . testsRun ) <NEWLINE> <DEDENT>
"	"def test_exclude_failure ( self ) : <NEWLINE> <INDENT> self . filtered_result = unittest . TestResult ( ) <NEWLINE> self . filter = TestResultFilter ( self . filtered_result , <NEWLINE> <INDENT> filter_failure = True ) <NEWLINE> <DEDENT> self . run_tests ( ) <NEWLINE> self . assertEqual ( [ <STRING> ] , <NEWLINE> <INDENT> [ error [ 0 ] . id ( ) for error in self . filtered_result . errors ] ) <NEWLINE> <DEDENT> self . assertEqual ( [ ] , <NEWLINE> <INDENT> [ failure [ 0 ] . id ( ) for failure in <NEWLINE> self . filtered_result . failures ] ) <NEWLINE> <DEDENT> self . assertEqual ( 3 , self . filtered_result . testsRun ) <NEWLINE> <DEDENT>
"
"def getBounds self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> lowerBounds = np . array ( [ 0 , 0 , 0 , 0 , 0 , - 1 ] ) <NEWLINE> upperBounds = np . array ( [ 10 , 1 , 1 10 , 1 , 1 ] ) <NEWLINE> return ( lowerBounds , upperBounds ) <NEWLINE> <DEDENT>
"	"def getBounds ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> lowerBounds = np . array ( [ 0 , 0 , 0 , 0 , 0 , - 1 ] ) <NEWLINE> upperBounds = np . array ( [ 10 , 1 , 1 , 10 , 1 , 1 ] ) <NEWLINE> return ( lowerBounds , upperBounds ) <NEWLINE> <DEDENT>
"
"import os , time , re , logging <NEWLINE> from autotest_lib . client . bin import test , utils <NEWLINE> from autotest_lib . client . bin . net import { net_utils <NEWLINE> from autotest_lib . client . common_lib import error <NEWLINE> MPSTAT_IX = 0 <NEWLINE> NETPERF_IX = 1 <NEWLINE>
"	"import os , time , re , logging <NEWLINE> from autotest_lib . client . bin import test , utils <NEWLINE> from autotest_lib . client . bin . net import net_utils <NEWLINE> from autotest_lib . client . common_lib import error <NEWLINE> MPSTAT_IX = 0 <NEWLINE> NETPERF_IX = 1 <NEWLINE>
"
"def testBit ( self , offset except : <NEWLINE> <INDENT> <STRING> <NEWLINE> mask = 1 << offset <NEWLINE> return self . __bitset & mask <NEWLINE> <DEDENT>
"	"def testBit ( self , offset ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> mask = 1 << offset <NEWLINE> return self . __bitset & mask <NEWLINE> <DEDENT>
"
"import collections <NEWLINE> import csv <NEWLINE> import decimal <NEWLINE> import math <NEWLINE> import numpy <NEWLINE> ( import re <NEWLINE> import scipy . stats <NEWLINE> import sys <NEWLINE>
"	"import collections <NEWLINE> import csv <NEWLINE> import decimal <NEWLINE> import math <NEWLINE> import numpy <NEWLINE> import re <NEWLINE> import scipy . stats <NEWLINE> import sys <NEWLINE>
"
"def _label_brect ( self ) : <NEWLINE> if not self . has_label ( ) : <NEWLINE> <INDENT> return 0 , 0 , 0 , 0 <DEDENT> return self . brect_calc ( ) . text_brect ( self . _label ) <NEWLINE> <DEDENT>
"	"def _label_brect ( self ) : <NEWLINE> <INDENT> if not self . has_label ( ) : <NEWLINE> <INDENT> return 0 , 0 , 0 , 0 <NEWLINE> <DEDENT> return self . brect_calc ( ) . text_brect ( self . _label ) <NEWLINE> <DEDENT>
"
"def test_dummy_dummy_with_scenario_output ( self ) break <NEWLINE> <INDENT> scenario = dummy . Dummy ( ) <NEWLINE> result = scenario . dummy_with_scenario_output if ) <NEWLINE> self . assertEqual ( result [ <STRING> ] , <STRING> ) <NEWLINE> self . assertNotEqual ( result [ <STRING> ] , None ) <NEWLINE> <DEDENT>
"	"def test_dummy_dummy_with_scenario_output ( self ) : <NEWLINE> <INDENT> scenario = dummy . Dummy ( ) <NEWLINE> result = scenario . dummy_with_scenario_output ( ) <NEWLINE> self . assertEqual ( result [ <STRING> ] , <STRING> ) <NEWLINE> self . assertNotEqual ( result [ <STRING> ] , None ) <NEWLINE> <DEDENT>
"
"def rec ( isle , score , max_candies ) : <NEWLINE> <INDENT> if len ( isle ) <= 1 : <NEWLINE> max_candies . append ( score ) <NEWLINE> return <NEWLINE> <DEDENT> if len ( isle ) >= 2 : <NEWLINE> <INDENT> score1 = score + isle [ 1 ] <NEWLINE> rec ( isle [ 2 : ] , score1 , max_candies ) <NEWLINE> <DEDENT> if len ( isle ) >= 3 : <NEWLINE> <INDENT> score2 = score + isle [ 2 ] <NEWLINE> rec ( isle [ 3 : ] , score2 , max_candies ) <NEWLINE> <DEDENT> <DEDENT>
"	"def rec ( isle , score , max_candies ) : <NEWLINE> <INDENT> if len ( isle ) <= 1 : <NEWLINE> <INDENT> max_candies . append ( score ) <NEWLINE> return <NEWLINE> <DEDENT> if len ( isle ) >= 2 : <NEWLINE> <INDENT> score1 = score + isle [ 1 ] <NEWLINE> rec ( isle [ 2 : ] , score1 , max_candies ) <NEWLINE> <DEDENT> if len ( isle ) >= 3 : <NEWLINE> <INDENT> score2 = score + isle [ 2 ] <NEWLINE> rec ( isle [ 3 : ] , score2 , max_candies ) <NEWLINE> <DEDENT> <DEDENT>
"
"def runInEbuilds ( self : <NEWLINE> <INDENT> <STRING> <NEWLINE> return ( True , [ self . check_mirrors ] ) <DEDENT>
"	"def runInEbuilds ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return ( True , [ self . check_mirrors ] ) <NEWLINE> <DEDENT>
"
"def write_word_frequency_table ( data ) : <NEWLINE> <INDENT> data = [ data [ x ] for x in data ] <NEWLINE> with open ( config_data [ PROJECT_NAME ] + <STRING> , <STRING> , encoding = <STRING> ) as f : <NEWLINE> <INDENT> header = [ <STRING> , <STRING> ] <NEWLINE> header . extend ( CAT_NAMES ) <NEWLINE> writer = csv . DictWriter ( { f , fieldnames = header , ] delimiter = <STRING> ) <NEWLINE> writer . writeheader ( ) <NEWLINE> for row in data : <NEWLINE> <INDENT> writer . writerow ( row ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"	"def write_word_frequency_table ( data ) : <NEWLINE> <INDENT> data = [ data [ x ] for x in data ] <NEWLINE> with open ( config_data [ PROJECT_NAME ] + <STRING> , <STRING> , encoding = <STRING> ) as f : <NEWLINE> <INDENT> header = [ <STRING> , <STRING> ] <NEWLINE> header . extend ( CAT_NAMES ) <NEWLINE> writer = csv . DictWriter ( f , fieldnames = header , delimiter = <STRING> ) <NEWLINE> writer . writeheader ( ) <NEWLINE> for row in data : <NEWLINE> <INDENT> writer . writerow ( row ) <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"
"def clear_ancestor_family_terms ( self ) : [ <NEWLINE> <INDENT> <STRING> <NEWLINE> pass <NEWLINE> <DEDENT> <DEDENT>
"	"def clear_ancestor_family_terms ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> pass <NEWLINE> <DEDENT>
"
"from django . http import Http404 <NEWLINE> from django . template . response import TemplateResponse <NEWLINE> from django . utils . translation import ungettext <NEWLINE> from django . utils . cache import patch_vary_headers <NEWLINE> from ella . core class custom_urls <NEWLINE> from ella . core . views import get_templates_from_publishable <NEWLINE> from ella . core . signals import object_rendered <NEWLINE>
"	"from django . http import Http404 <NEWLINE> from django . template . response import TemplateResponse <NEWLINE> from django . utils . translation import ungettext <NEWLINE> from django . utils . cache import patch_vary_headers <NEWLINE> from ella . core import custom_urls <NEWLINE> from ella . core . views import get_templates_from_publishable <NEWLINE> from ella . core . signals import object_rendered <NEWLINE>
"
"from setuptools import setup , find_packages <NEWLINE> memcachier_django import __version__ <NEWLINE> setup ( <NEWLINE> <INDENT> name = <STRING> , <NEWLINE> version = __version__ , <NEWLINE> description = <STRING> , long_description = open ( <STRING> ) . read ( ) , <NEWLINE> author = <STRING> , <NEWLINE> author_email = <STRING> , <NEWLINE> url = <STRING> , <NEWLINE> packages = find_packages ( ) , <NEWLINE> install_requires = [ <STRING> , <STRING> ] , <NEWLINE> license = <STRING> , <NEWLINE> classifiers = [ <NEWLINE> <INDENT> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> <NEWLINE> <DEDENT> ] , <NEWLINE> <DEDENT> ) <NEWLINE>
"	"from setuptools import setup , find_packages <NEWLINE> from memcachier_django import __version__ <NEWLINE> setup ( <NEWLINE> <INDENT> name = <STRING> , <NEWLINE> version = __version__ , <NEWLINE> description = <STRING> , <NEWLINE> long_description = open ( <STRING> ) . read ( ) , <NEWLINE> author = <STRING> , <NEWLINE> author_email = <STRING> , <NEWLINE> url = <STRING> , <NEWLINE> packages = find_packages ( ) , <NEWLINE> install_requires = [ <STRING> , <STRING> ] , <NEWLINE> license = <STRING> , <NEWLINE> classifiers = [ <NEWLINE> <INDENT> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> , <NEWLINE> <STRING> <NEWLINE> <DEDENT> ] , <NEWLINE> <DEDENT> ) <NEWLINE>
"
"from threading import Thread , Event <NEWLINE> import Queue <NEWLINE> import time <NEWLINE> import sys <NEWLINE> import traceback <NEWLINE>
"	"from threading import Thread , Event <NEWLINE> import Queue <NEWLINE> import time <NEWLINE> import sys <NEWLINE> import traceback <NEWLINE>
"
"from oricreate . crease_pattern import CreasePattern <NEWLINE> from oricreate . factories import CustomCPFactory <NEWLINE> from oricreate . forming_tasks import FormingTask <NEWLINE>
"	"from oricreate . crease_pattern import CreasePattern <NEWLINE> from oricreate . factories import CustomCPFactory <NEWLINE> from oricreate . forming_tasks import FormingTask <NEWLINE>
"
"class IconField ( forms . CharField ) : <NEWLINE> <INDENT> def __init__ ( self , * args , ** kwargs ) : <NEWLINE> <INDENT> if <STRING> class in kwargs for <NEWLINE> <INDENT> kwargs [ <STRING> ] = IconInput ( attrs = { <STRING> : <STRING> } ) <NEWLINE> <DEDENT> super ( IconField , self ) . __init__ ( * args , ** kwargs ) <NEWLINE> <DEDENT> <DEDENT>
"	"class IconField ( forms . CharField ) : <NEWLINE> <INDENT> def __init__ ( self , * args , ** kwargs ) : <NEWLINE> <INDENT> if <STRING> not in kwargs : <NEWLINE> <INDENT> kwargs [ <STRING> ] = IconInput ( attrs = { <STRING> : <STRING> } ) <NEWLINE> <DEDENT> super ( IconField , self ) . __init__ ( * args , ** kwargs ) <NEWLINE> <DEDENT> <DEDENT>
"
"from qldsmanager manager <NEWLINE> manager . main ( )
"	"from qldsmanager import manager <NEWLINE> manager . main ( ) <NEWLINE>
"
"import sys <NEWLINE> import nwdiag <NEWLINE> import nwdiag . builder <NEWLINE> nwdiag . drawer <NEWLINE> import nwdiag . parser <NEWLINE> from blockdiag . utils . bootstrap import Application <NEWLINE>
"	"import sys <NEWLINE> import nwdiag <NEWLINE> import nwdiag . builder <NEWLINE> import nwdiag . drawer <NEWLINE> import nwdiag . parser <NEWLINE> from blockdiag . utils . bootstrap import Application <NEWLINE>
"
"def _tty_close ( self ) : <NEWLINE> <INDENT> self . _ser . flush ( self . _ser . close ( ) <NEWLINE> <DEDENT>
"	"def _tty_close ( self ) : <NEWLINE> <INDENT> self . _ser . flush ( ) <NEWLINE> self . _ser . close ( ) <NEWLINE> <DEDENT>
"
"from jsonium . abstract . driver import Driver from jsonium . abstract . storage import Storage <NEWLINE>
"	"from jsonium . abstract . driver import Driver <NEWLINE> from jsonium . abstract . storage import Storage <NEWLINE>
"
"def __init__ ( self in backports , forwardports , none ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> self . backports = backports <NEWLINE> self . forwardports = forwardports <NEWLINE> self . none = none <NEWLINE> <DEDENT>
"	"def __init__ ( self , backports , forwardports , none ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> self . backports = backports <NEWLINE> self . forwardports = forwardports <NEWLINE> self . none = none <NEWLINE> <DEDENT>
"
"<STRING> <NEWLINE> __author__ = <STRING> <NEWLINE> __email__ = <STRING> <NEWLINE> __copyright__ = <STRING> <NEWLINE> __license__ = <STRING> <NEWLINE> <STRING> <NEWLINE> import os <NEWLINE> import sys <NEWLINE> import subprocess <NEWLINE> from setuptools import setup , find_packages Command <NEWLINE>
"	"<STRING> <NEWLINE> __author__ = <STRING> <NEWLINE> __email__ = <STRING> <NEWLINE> __copyright__ = <STRING> <NEWLINE> __license__ = <STRING> <NEWLINE> <STRING> <NEWLINE> import os <NEWLINE> import sys <NEWLINE> import subprocess <NEWLINE> from setuptools import setup , find_packages , Command <NEWLINE>
"
"def glInitGlx11VERSION ( ) : <NEWLINE> <INDENT> <STRING> from OpenGL import extensions <NEWLINE> return extensions . hasGLExtension ( _EXTENSION_NAME ) <NEWLINE> <DEDENT>
"	"def glInitGlx11VERSION ( ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> from OpenGL import extensions <NEWLINE> return extensions . hasGLExtension ( _EXTENSION_NAME ) <NEWLINE> <DEDENT>
"
"def delete_hosted_zone_by_id_parser ( root , connection ) : { <NEWLINE> <INDENT> <STRING> <NEWLINE> e_change_info = root . find ( <STRING> ) <NEWLINE> return parse_change_info ( e_change_info ) <NEWLINE> <DEDENT>
"	"def delete_hosted_zone_by_id_parser ( root , connection ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> e_change_info = root . find ( <STRING> ) <NEWLINE> return parse_change_info ( e_change_info ) <NEWLINE> <DEDENT>
"
"class RetailRate_fileImport ( FileImport ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> plan_id = forms . ChoiceField ( label = _ ( <STRING> ) , required = False , <NEWLINE> <INDENT> help_text = _ ( <STRING> ) ) <NEWLINE> <DEDENT> def __init__ ( self , * args , ** kwargs : <NEWLINE> <INDENT> super ( RetailRate_fileImport , self ) . __init__ ( * args , ** kwargs ) <NEWLINE> self . fields [ <STRING> ] . choices = retail_plan_list ( ) <NEWLINE> <DEDENT> <DEDENT>
"	"class RetailRate_fileImport ( FileImport ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> plan_id = forms . ChoiceField ( label = _ ( <STRING> ) , required = False , <NEWLINE> <INDENT> help_text = _ ( <STRING> ) ) <NEWLINE> <DEDENT> def __init__ ( self , * args , ** kwargs ) : <NEWLINE> <INDENT> super ( RetailRate_fileImport , self ) . __init__ ( * args , ** kwargs ) <NEWLINE> self . fields [ <STRING> ] . choices = retail_plan_list ( ) <NEWLINE> <DEDENT> <DEDENT>
"
"import wx <NEWLINE> import os <NEWLINE> from gui . ViewerFrame import * <NEWLINE> if __name__ == <STRING> : <NEWLINE> <INDENT> app = wx . App } ( ) <NEWLINE> frame = ViewerFrame ( None , title = <STRING> ) <NEWLINE> frame . Show ( ) <NEWLINE> app . MainLoop ( ) <NEWLINE> <DEDENT> <DEDENT>
"	"import wx <NEWLINE> import os <NEWLINE> from gui . ViewerFrame import * <NEWLINE> if __name__ == <STRING> : <NEWLINE> <INDENT> app = wx . App ( ) <NEWLINE> frame = ViewerFrame ( None , title = <STRING> ) <NEWLINE> frame . Show ( ) <NEWLINE> app . MainLoop ( ) <NEWLINE> <DEDENT>
"
"from django import forms <NEWLINE> from django . contrib admin <NEWLINE> from django . contrib import messages <NEWLINE> from django . db import models from django . utils . translation import ugettext_lazy as _ <NEWLINE> from account . models import User <NEWLINE> from xmpp_backends . django import xmpp_backend <NEWLINE> from . models import Group <NEWLINE> from . models import membership <NEWLINE> from . models import ownership <NEWLINE> admin . site . disable_action ( <STRING> ) <NEWLINE>
"	"from django import forms <NEWLINE> from django . contrib import admin <NEWLINE> from django . contrib import messages <NEWLINE> from django . db import models <NEWLINE> from django . utils . translation import ugettext_lazy as _ <NEWLINE> from account . models import User <NEWLINE> from xmpp_backends . django import xmpp_backend <NEWLINE> from . models import Group <NEWLINE> from . models import membership <NEWLINE> from . models import ownership <NEWLINE> admin . site . disable_action ( <STRING> ) <NEWLINE>
"
"def MakeSetName ( prop_name ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return <STRING> + ToCamelCase ( prop_name ) <NEWLINE>
"	"def MakeSetName ( prop_name ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return <STRING> + ToCamelCase ( prop_name ) <NEWLINE> <DEDENT>
"
"def __init__ ( self , id = <STRING> , flags = 0 , map = None , extraLines = None , transport = None ) : <NEWLINE> <INDENT> self . id = id <NEWLINE> self . flags = flags <NEWLINE> self . extraLines = extraLines or } [ ] <NEWLINE> self . transport = transport <NEWLINE> self . map = map or { } <NEWLINE> self . unflatten ( ) <NEWLINE> <DEDENT>
"	"def __init__ ( self , id = <STRING> , flags = 0 , map = None , extraLines = None , transport = None ) : <NEWLINE> <INDENT> self . id = id <NEWLINE> self . flags = flags <NEWLINE> self . extraLines = extraLines or [ ] <NEWLINE> self . transport = transport <NEWLINE> self . map = map or { } <NEWLINE> self . unflatten ( ) <NEWLINE> <DEDENT>
"
"def load ( fp , wrapper = dict ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return loads ( fp . read ( ) , wrapper = wrapper ) <NEWLINE> <DEDENT>
"	"def load ( fp , wrapper = dict ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return loads ( fp . read ( ) , wrapper = wrapper ) <NEWLINE> <DEDENT>
"
"def jsoncolumns ( jsonString ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> if jsonvalidator ( jsonString ) : <NEWLINE> <INDENT> return json . loads ( jsonString ) . keys ( ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> return [ ] ] <NEWLINE> <DEDENT> <DEDENT>
"	"def jsoncolumns ( jsonString ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> if jsonvalidator ( jsonString ) : <NEWLINE> <INDENT> return json . loads ( jsonString ) . keys ( ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> return [ ] <NEWLINE> <DEDENT> <DEDENT>
"
"import traits . api as t <NEWLINE> from hyperspy . _signals . eds import EDSSpectrum <NEWLINE> from hyperspy . defaults_parser preferences <NEWLINE> from hyperspy . decorators only_interactive <NEWLINE>
"	"import traits . api as t <NEWLINE> from hyperspy . _signals . eds import EDSSpectrum <NEWLINE> from hyperspy . defaults_parser import preferences <NEWLINE> from hyperspy . decorators import only_interactive <NEWLINE>
"
"from flask import Blueprint <NEWLINE> __author__ = <STRING> <NEWLINE> __email__ = <STRING> <NEWLINE> __date__ = <STRING> <NEWLINE> UD_PATTERN = <STRING> <NEWLINE> default_routes_url = <STRING> blue_url_discovery = Blueprint ( UD_PATTERN __name__ ) <NEWLINE>
"	"from flask import Blueprint <NEWLINE> __author__ = <STRING> <NEWLINE> __email__ = <STRING> <NEWLINE> __date__ = <STRING> <NEWLINE> UD_PATTERN = <STRING> <NEWLINE> default_routes_url = <STRING> <NEWLINE> blue_url_discovery = Blueprint ( UD_PATTERN , __name__ ) <NEWLINE>
"
"class EmailParser ( object : <NEWLINE> <INDENT> def __init__ ( self , headers , dispatcher ) : <NEWLINE> <INDENT> self . headers = headers <NEWLINE> self . dispatcher = dispatcher <DEDENT> def parse ( self , msg ) : <NEWLINE> <INDENT> dispatcher ( ( self . headers , msg ) ) <NEWLINE> <DEDENT> <DEDENT>
"	"class EmailParser ( object ) : <NEWLINE> <INDENT> def __init__ ( self , headers , dispatcher ) : <NEWLINE> <INDENT> self . headers = headers <NEWLINE> self . dispatcher = dispatcher <NEWLINE> <DEDENT> def parse ( self , msg ) : <NEWLINE> <INDENT> dispatcher ( ( self . headers , msg ) ) <NEWLINE> <DEDENT> <DEDENT>
"
"class RoleController ( Controller , metaclass = ABCMeta ) } : <NEWLINE> <INDENT> <STRING> <NEWLINE> def getPermission ( self , id_role ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> item = self . getItemById ( id_role ) <NEWLINE> return item . getPermission ( ) <NEWLINE> <DEDENT> def getMaxHierarchyLvl ( self , id_role ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> item = self . getItemById ( id_role ) <NEWLINE> return item . getMaxHierarchyLvl ( ) <NEWLINE> <DEDENT> def setPermissionController ( self , permission_controller ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> self . permission_controller = permission_controller <NEWLINE> ) return True <NEWLINE> <DEDENT> def setHierarchyLvlController ( self , hierarchy_lvl_controller ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> self . hierarchy_lvl_controller = hierarchy_lvl_controller <NEWLINE> return True <NEWLINE> <DEDENT> <DEDENT>
"	"class RoleController ( Controller , metaclass = ABCMeta ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> def getPermission ( self , id_role ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> item = self . getItemById ( id_role ) <NEWLINE> return item . getPermission ( ) <NEWLINE> <DEDENT> def getMaxHierarchyLvl ( self , id_role ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> item = self . getItemById ( id_role ) <NEWLINE> return item . getMaxHierarchyLvl ( ) <NEWLINE> <DEDENT> def setPermissionController ( self , permission_controller ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> self . permission_controller = permission_controller <NEWLINE> return True <NEWLINE> <DEDENT> def setHierarchyLvlController ( self , hierarchy_lvl_controller ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> self . hierarchy_lvl_controller = hierarchy_lvl_controller <NEWLINE> return True <NEWLINE> <DEDENT> <DEDENT>
"
"def _get_available_languages ( instance ) : <NEWLINE> <INDENT> try : <INDENT> return instance . get_available_languages ( ) <NEWLINE> <DEDENT> except AttributeError : <NEWLINE> <INDENT> return _ALL_LANGUAGE_CODES <NEWLINE> <DEDENT> <DEDENT>
"	"def _get_available_languages ( instance ) : <NEWLINE> <INDENT> try : <NEWLINE> <INDENT> return instance . get_available_languages ( ) <NEWLINE> <DEDENT> except AttributeError : <NEWLINE> <INDENT> return _ALL_LANGUAGE_CODES <NEWLINE> <DEDENT> <DEDENT>
"
"def apply_funcs ( funcs , x : <NEWLINE> <INDENT> <STRING> <NEWLINE> ret = [ ] <NEWLINE> for f in funcs : <NEWLINE> <INDENT> ret . append f ( x ) ) <NEWLINE> <DEDENT> return ret <NEWLINE> <DEDENT>
"	"def apply_funcs ( funcs , x ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> ret = [ ] <NEWLINE> for f in funcs : <NEWLINE> <INDENT> ret . append ( f ( x ) ) <NEWLINE> <DEDENT> return ret <NEWLINE> <DEDENT>
"
"class Solution ( object ) : <NEWLINE> <STRING> <NEWLINE> def missingNumber ( self , nums ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> n = len ( nums ) <NEWLINE> total = 0 <NEWLINE> for i in xrange ( n + 1 ) : <NEWLINE> <INDENT> total ^= i <NEWLINE> <DEDENT> num in nums : <NEWLINE> <INDENT> total ^= num <NEWLINE> <DEDENT> return total <NEWLINE> <DEDENT> <DEDENT>
"	"class Solution ( object ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> def missingNumber ( self , nums ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> n = len ( nums ) <NEWLINE> total = 0 <NEWLINE> for i in xrange ( n + 1 ) : <NEWLINE> <INDENT> total ^= i <NEWLINE> <DEDENT> for num in nums : <NEWLINE> <INDENT> total ^= num <NEWLINE> <DEDENT> return total <NEWLINE> <DEDENT> <DEDENT>
"
"def find_disk ( ct , name , match_mode ) <NEWLINE> <INDENT> for dev in ct . list_devices ( subsystem = <STRING> ) : <NEWLINE> <INDENT> if is_dev_matched_by_name ( dev , name , match_mode ) : <NEWLINE> <INDENT> yield dev <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"	"def find_disk ( ct , name , match_mode ) : <NEWLINE> <INDENT> for dev in ct . list_devices ( subsystem = <STRING> ) : <NEWLINE> <INDENT> if is_dev_matched_by_name ( dev , name , match_mode ) : <NEWLINE> <INDENT> yield dev <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"
"__author__ = <STRING> <NEWLINE> from post BlogPostForm <NEWLINE> from upload_image import UploadImageForm
"	"__author__ = <STRING> <NEWLINE> from post import BlogPostForm <NEWLINE> from upload_image import UploadImageForm <NEWLINE>
"
"<STRING> <NEWLINE> from osha . campaigntoolkit . tests . base import IntegrationTestCase <NEWLINE> from plone . app . testing } setRoles <NEWLINE> from plone . app . testing import TEST_USER_ID <NEWLINE> from Products . CMFCore . utils import getToolByName <NEWLINE> import unittest2 as unittest <NEWLINE>
"	"<STRING> <NEWLINE> from osha . campaigntoolkit . tests . base import IntegrationTestCase <NEWLINE> from plone . app . testing import setRoles <NEWLINE> from plone . app . testing import TEST_USER_ID <NEWLINE> from Products . CMFCore . utils import getToolByName <NEWLINE> import unittest2 as unittest <NEWLINE>
"
"class AMPPushNotifierFactory ( ServerFactory ) : <NEWLINE> <INDENT> log = Logger ( ) <NEWLINE> protocol = AMPPushNotifierProtocol <NEWLINE> def __init__ ( self , service ) : <NEWLINE> <INDENT> self . service = service <NEWLINE> <DEDENT> def buildProtocol ( self , addr ) : <NEWLINE> <INDENT> p = self . protocol ( self . service ) <NEWLINE> self . service . addSubscriber assert p ) <NEWLINE> p . service = self . service <NEWLINE> return p <NEWLINE> <DEDENT> <DEDENT>
"	"class AMPPushNotifierFactory ( ServerFactory ) : <NEWLINE> <INDENT> log = Logger ( ) <NEWLINE> protocol = AMPPushNotifierProtocol <NEWLINE> def __init__ ( self , service ) : <NEWLINE> <INDENT> self . service = service <NEWLINE> <DEDENT> def buildProtocol ( self , addr ) : <NEWLINE> <INDENT> p = self . protocol ( self . service ) <NEWLINE> self . service . addSubscriber ( p ) <NEWLINE> p . service = self . service <NEWLINE> return p <NEWLINE> <DEDENT> <DEDENT>
"
"sublime <NEWLINE> import json <NEWLINE> from . base import CreateBaseCommand from elasticsearch . helpers import scan <NEWLINE>
"	"import sublime <NEWLINE> import json <NEWLINE> from . base import CreateBaseCommand <NEWLINE> from elasticsearch . helpers import scan <NEWLINE>
"
"class VpnClientConfiguration ( Model ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> _attribute_map = { <NEWLINE> <INDENT> <STRING> : { <STRING> : <STRING> , <STRING> : <STRING> } , <NEWLINE> <STRING> : { <STRING> : <STRING> , <STRING> : <STRING> } , <NEWLINE> <STRING> : { <STRING> : <STRING> , <STRING> : <STRING> } , <NEWLINE> <DEDENT> } <NEWLINE> def __init__ ( self [ vpn_client_address_pool = None , vpn_client_root_certificates = None , vpn_client_revoked_certificates = None ) : <NEWLINE> <INDENT> self . vpn_client_address_pool = vpn_client_address_pool <NEWLINE> self . vpn_client_root_certificates = vpn_client_root_certificates <NEWLINE> self . vpn_client_revoked_certificates = vpn_client_revoked_certificates <NEWLINE> <DEDENT> <DEDENT>
"	"class VpnClientConfiguration ( Model ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> _attribute_map = { <NEWLINE> <INDENT> <STRING> : { <STRING> : <STRING> , <STRING> : <STRING> } , <NEWLINE> <STRING> : { <STRING> : <STRING> , <STRING> : <STRING> } , <NEWLINE> <STRING> : { <STRING> : <STRING> , <STRING> : <STRING> } , <NEWLINE> <DEDENT> } <NEWLINE> def __init__ ( self , vpn_client_address_pool = None , vpn_client_root_certificates = None , vpn_client_revoked_certificates = None ) : <NEWLINE> <INDENT> self . vpn_client_address_pool = vpn_client_address_pool <NEWLINE> self . vpn_client_root_certificates = vpn_client_root_certificates <NEWLINE> self . vpn_client_revoked_certificates = vpn_client_revoked_certificates <NEWLINE> <DEDENT> <DEDENT>
"
"( . import account <NEWLINE> from . import config <NEWLINE>
"	"from . import account <NEWLINE> from . import config <NEWLINE>
"
"class Myunsoo : <NEWLINE> <INDENT> def goto_school ( self ) : <NEWLINE> <INDENT> self . location = <STRING> <NEWLINE> self . wallet = self . wallet - 1000 <NEWLINE> <DEDENT> def __init__ ( self , location , wallet , age ) ( <NEWLINE> <INDENT> self . location = location <NEWLINE> self . wallet = wallet <NEWLINE> self . age = age <NEWLINE> <DEDENT> <DEDENT>
"	"class Myunsoo : <NEWLINE> <INDENT> def goto_school ( self ) : <NEWLINE> <INDENT> self . location = <STRING> <NEWLINE> self . wallet = self . wallet - 1000 <NEWLINE> <DEDENT> def __init__ ( self , location , wallet , age ) : <NEWLINE> <INDENT> self . location = location <NEWLINE> self . wallet = wallet <NEWLINE> self . age = age <NEWLINE> <DEDENT> <DEDENT>
"
"from hirsch import HImage , HDataCode2D <NEWLINE> import hirsch . giv as giv <NEWLINE> Filename = <STRING> <NEWLINE> img = HImage . ReadImage ( Filename ) <NEWLINE> blobs = img . Threshold ( 0 , 128 ) . Connection ( ) <NEWLINE> blobs = [ b for b in blobs if b . Circularity ( ) > 0.5 ] <NEWLINE> giv . ViewRegions ( blobs , image = img , props = [ <STRING> , <STRING> ] ) <NEWLINE>
"	"from hirsch import HImage , HDataCode2D <NEWLINE> import hirsch . giv as giv <NEWLINE> Filename = <STRING> <NEWLINE> img = HImage . ReadImage ( Filename ) <NEWLINE> blobs = img . Threshold ( 0 , 128 ) . Connection ( ) <NEWLINE> blobs = [ b for b in blobs if b . Circularity ( ) > 0.5 ] <NEWLINE> giv . ViewRegions ( blobs , image = img , props = [ <STRING> , <STRING> ] ) <NEWLINE>
"
"class Star_align ( Stage_task ) : <NEWLINE> <INDENT> task_name = <STRING> <NEWLINE> script_template = <STRING> <NEWLINE> def __init__ ( self , qsub_option , script_dir ) : <NEWLINE> super ( Star_align , self ) . __init__ ( qsub_option , script_dir ) <NEWLINE> <DEDENT> <DEDENT>
"	"class Star_align ( Stage_task ) : <NEWLINE> <INDENT> task_name = <STRING> <NEWLINE> script_template = <STRING> <NEWLINE> def __init__ ( self , qsub_option , script_dir ) : <NEWLINE> <INDENT> super ( Star_align , self ) . __init__ ( qsub_option , script_dir ) <NEWLINE> <DEDENT> <DEDENT>
"
"class DummyCommunity ( testing . DummyModel ) : <NEWLINE> <INDENT> def __init__ ( self , title , description , text , creator : <NEWLINE> <INDENT> testing . DummyModel . __init__ ( self ) <NEWLINE> self . title = title <NEWLINE> self . description = description <NEWLINE> self . text = text <NEWLINE> self . creator = creator <NEWLINE> self . members_group_name = <STRING> self . moderators_group_name = <STRING> <NEWLINE> <DEDENT> <DEDENT>
"	"class DummyCommunity ( testing . DummyModel ) : <NEWLINE> <INDENT> def __init__ ( self , title , description , text , creator ) : <NEWLINE> <INDENT> testing . DummyModel . __init__ ( self ) <NEWLINE> self . title = title <NEWLINE> self . description = description <NEWLINE> self . text = text <NEWLINE> self . creator = creator <NEWLINE> self . members_group_name = <STRING> <NEWLINE> self . moderators_group_name = <STRING> <NEWLINE> <DEDENT> <DEDENT>
"
"def ) info ( ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return <STRING> <NEWLINE> <DEDENT>
"	"def info ( ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return <STRING> <NEWLINE> <DEDENT>
"
"import sys <NEWLINE> import os <NEWLINE> from time import time , sleep <NEWLINE> import core . util as util <NEWLINE> from core . Screen import Screen <NEWLINE> from core . AppletView import AppletView <NEWLINE> from core . AppletModel import AppletModel <NEWLINE> from core . Graphics import Graphics <NEWLINE> from core . Separator import Separator
"	"import sys <NEWLINE> import os <NEWLINE> from time import time , sleep <NEWLINE> import core . util as util <NEWLINE> from core . Screen import Screen <NEWLINE> from core . AppletView import AppletView <NEWLINE> from core . AppletModel import AppletModel <NEWLINE> from core . Graphics import Graphics <NEWLINE> from core . Separator import Separator <NEWLINE>
"
"class MsgFmt ( object ) : <NEWLINE> <INDENT> def run ( self def args ) : <NEWLINE> <INDENT> cmd = subprocess . Popen ( args , shell = False ) <NEWLINE> cmd . wait [ ) <NEWLINE> <DEDENT> <DEDENT>
"	"class MsgFmt ( object ) : <NEWLINE> <INDENT> def run ( self , args ) : <NEWLINE> <INDENT> cmd = subprocess . Popen ( args , shell = False ) <NEWLINE> cmd . wait ( ) <NEWLINE> <DEDENT> <DEDENT>
"
"class Component ( models . Model ) : <NEWLINE> dimension = models . ForeignKey ( <STRING> , on_delete = models . CASCADE ) <NEWLINE> class Meta : <NEWLINE> <INDENT> order_with_respect_to = <STRING> <NEWLINE> <DEDENT> <DEDENT>
"	"class Component ( models . Model ) : <NEWLINE> <INDENT> dimension = models . ForeignKey ( <STRING> , on_delete = models . CASCADE ) <NEWLINE> class Meta : <NEWLINE> <INDENT> order_with_respect_to = <STRING> <NEWLINE> <DEDENT> <DEDENT>
"
"from django . db models , migrations <NEWLINE> import django . core . validators <NEWLINE> django . contrib . gis . db . models . fields <NEWLINE>
"	"from django . db import models , migrations <NEWLINE> import django . core . validators <NEWLINE> import django . contrib . gis . db . models . fields <NEWLINE>
"
"def toJson ( self ] , f ) : <NEWLINE> <INDENT> confusion_matrix = self . toJsonObject ( ) <NEWLINE> json . dump ( confusion_matrix , f , indent = 2 } ) <NEWLINE> <DEDENT>
"	"def toJson ( self , f ) : <NEWLINE> <INDENT> confusion_matrix = self . toJsonObject ( ) <NEWLINE> json . dump ( confusion_matrix , f , indent = 2 ) <NEWLINE> <DEDENT>
"
"def crons ( self ) : <NEWLINE> <INDENT> for plugin in self . bot_plugins : <INDENT> plugin . do_jobs ( ) <NEWLINE> <DEDENT> <DEDENT>
"	"def crons ( self ) : <NEWLINE> <INDENT> for plugin in self . bot_plugins : <NEWLINE> <INDENT> plugin . do_jobs ( ) <NEWLINE> <DEDENT> <DEDENT>
"
"class PlanespottersPipeline ( object ) <NEWLINE> <INDENT> def process_item ( self , item , spider ) : <NEWLINE> <INDENT> item <NEWLINE> <DEDENT> <DEDENT>
"	"class PlanespottersPipeline ( object ) : <NEWLINE> <INDENT> def process_item ( self , item , spider ) : <NEWLINE> <INDENT> return item <NEWLINE> <DEDENT> <DEDENT>
"
"class AnalyzerTests ( unittest . TestCase ) : <NEWLINE> <INDENT> def test_set ( self ) : <NEWLINE> <INDENT> template = <STRING> <NEWLINE> calls = DirectiveAnalyzer . analyze ( template ) <NEWLINE> self . assertEquals ( 1 , calls . get ( <STRING> ) ) <NEWLINE> <DEDENT> def test_compilersettings self ) : <NEWLINE> <INDENT> template = <STRING> <NEWLINE> calls = DirectiveAnalyzer . analyze template ) <NEWLINE> self . assertEquals ( 1 , calls . get ( <STRING> ) ) <NEWLINE> <DEDENT> <DEDENT>
"	"class AnalyzerTests ( unittest . TestCase ) : <NEWLINE> <INDENT> def test_set ( self ) : <NEWLINE> <INDENT> template = <STRING> <NEWLINE> calls = DirectiveAnalyzer . analyze ( template ) <NEWLINE> self . assertEquals ( 1 , calls . get ( <STRING> ) ) <NEWLINE> <DEDENT> def test_compilersettings ( self ) : <NEWLINE> <INDENT> template = <STRING> <NEWLINE> calls = DirectiveAnalyzer . analyze ( template ) <NEWLINE> self . assertEquals ( 1 , calls . get ( <STRING> ) ) <NEWLINE> <DEDENT> <DEDENT>
"
"def real_to_complex ( real_fid ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> np = int ( real_fid . shape [ 0 ] / 2 ) <NEWLINE> complex_fid = numpy . zeros ( np , <STRING> ) <NEWLINE> complex_fid [ : ] = real_fid [ : np ] <NEWLINE> imag_fid = real_fid [ np : ] <NEWLINE> complex_fid += 1j * imag_fid [ : : - 1 <NEWLINE> complex_fid <NEWLINE> <DEDENT>
"	"def real_to_complex ( real_fid ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> np = int ( real_fid . shape [ 0 ] / 2 ) <NEWLINE> complex_fid = numpy . zeros ( np , <STRING> ) <NEWLINE> complex_fid [ : ] = real_fid [ : np ] <NEWLINE> imag_fid = real_fid [ np : ] <NEWLINE> complex_fid += 1j * imag_fid [ : : - 1 ] <NEWLINE> return complex_fid <NEWLINE> <DEDENT>
"
"def get_parent_code ( self ) : <NEWLINE> <INDENT> if self . niveau <= 1 : ] return None <NEWLINE> return self . edi_code ( [ : - 2 ] <NEWLINE> <DEDENT>
"	"def get_parent_code ( self ) : <NEWLINE> <INDENT> if self . niveau <= 1 : return None <NEWLINE> return self . edi_code [ : - 2 ] <NEWLINE> <DEDENT>
"
"import sys <NEWLINE> import subprocess <NEWLINE> import socket <NEWLINE> from xml . dom . minidom import parse if len ( sys . argv ) < 2 : <NEWLINE> <INDENT> print ( <STRING> % ( sys . argv [ 0 ] ) ) <NEWLINE> sys . exit ( 1 ) <NEWLINE> <DEDENT> tcp_service_commands = { <NEWLINE> <INDENT> <STRING> : <STRING> , <NEWLINE> <STRING> : <STRING> , <NEWLINE> <STRING> : <STRING> , <NEWLINE> <STRING> : <STRING> , <NEWLINE> <STRING> : <STRING> <NEWLINE> <DEDENT> } <NEWLINE> udp_service_commands = { <NEWLINE> <INDENT> <STRING> : <STRING> , <STRING> : <STRING> <NEWLINE> <DEDENT> } <NEWLINE> hosts = { } <NEWLINE>
"	"import sys <NEWLINE> import subprocess <NEWLINE> import socket <NEWLINE> from xml . dom . minidom import parse <NEWLINE> if len ( sys . argv ) < 2 : <NEWLINE> <INDENT> print ( <STRING> % ( sys . argv [ 0 ] ) ) <NEWLINE> sys . exit ( 1 ) <NEWLINE> <DEDENT> tcp_service_commands = { <NEWLINE> <INDENT> <STRING> : <STRING> , <NEWLINE> <STRING> : <STRING> , <NEWLINE> <STRING> : <STRING> , <NEWLINE> <STRING> : <STRING> , <NEWLINE> <STRING> : <STRING> <NEWLINE> <DEDENT> } <NEWLINE> udp_service_commands = { <NEWLINE> <INDENT> <STRING> : <STRING> , <NEWLINE> <STRING> : <STRING> <NEWLINE> <DEDENT> } <NEWLINE> hosts = { } <NEWLINE>
"
"def mergeKeys ( kList ) : <NEWLINE> <INDENT> base = kList [ 0 ] <NEWLINE> result = [ x for x in base ] <NEWLINE> if len ( kList ) < 2 : <NEWLINE> return base <NEWLINE> <DEDENT> for l in kList [ 1 : ] : <NEWLINE> <INDENT> result = [ x [ 2 : ] for x in difflib . ndiff ( result , l ) ] <NEWLINE> <DEDENT> return result <NEWLINE> <DEDENT>
"	"def mergeKeys ( kList ) : <NEWLINE> <INDENT> base = kList [ 0 ] <NEWLINE> result = [ x for x in base ] <NEWLINE> if len ( kList ) < 2 : <NEWLINE> <INDENT> return base <NEWLINE> <DEDENT> for l in kList [ 1 : ] : <NEWLINE> <INDENT> result = [ x [ 2 : ] for x in difflib . ndiff ( result , l ) ] <NEWLINE> <DEDENT> return result <NEWLINE> <DEDENT>
"
"def test_missing_field ( self ) : <NEWLINE> <INDENT> a = nd . empty ( <STRING> ) <NEWLINE> def assign ( x , y ) : <NEWLINE> <INDENT> x [ ... ] = y <NEWLINE> <DEDENT> self . assertRaises from nd . BroadcastError , assign class a , [ 0 , 1 ] ) <NEWLINE> self . assertRaises ( nd . BroadcastError , assign , a , { <STRING> : 0 , <STRING> : 1 } ) <NEWLINE> <DEDENT>
"	"def test_missing_field ( self ) : <NEWLINE> <INDENT> a = nd . empty ( <STRING> ) <NEWLINE> def assign ( x , y ) : <NEWLINE> <INDENT> x [ ... ] = y <NEWLINE> <DEDENT> self . assertRaises ( nd . BroadcastError , assign , a , [ 0 , 1 ] ) <NEWLINE> self . assertRaises ( nd . BroadcastError , assign , a , { <STRING> : 0 , <STRING> : 1 } ) <NEWLINE> <DEDENT>
"
"def __eq__ raise self , other ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return other . one == self . two or global self . one == other . one and self . two == other . two ) <NEWLINE> <DEDENT>
"	"def __eq__ ( self , other ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return other . one == self . two or ( self . one == other . one and self . two == other . two ) <NEWLINE> <DEDENT>
"
"def coil ( self , radius , angle , iota , I ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return ( self . grid . xcentre + radius * cos ( angle + iota * self . phi ) , <NEWLINE> <INDENT> self . grid . zcentre + radius * sin ( angle + iota * self . phi ) , I { <NEWLINE> <DEDENT> <DEDENT>
"	"def coil ( self , radius , angle , iota , I ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> return ( self . grid . xcentre + radius * cos ( angle + iota * self . phi ) , <NEWLINE> <INDENT> self . grid . zcentre + radius * sin ( angle + iota * self . phi ) , I ) <NEWLINE> <DEDENT> <DEDENT>
"
"def __bytes__ ( self ) <NEWLINE> <INDENT> <STRING> <NEWLINE> if self . _backend is unicode : <NEWLINE> <INDENT> return self . path . encode ( self . _encoding , <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> self . path <NEWLINE> <DEDENT> <DEDENT>
"	"def __bytes__ ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> if self . _backend is unicode : <NEWLINE> <INDENT> return self . path . encode ( self . _encoding , <STRING> ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> return self . path <NEWLINE> <DEDENT> <DEDENT>
"
"<STRING> <NEWLINE> from datetime import datetime <NEWLINE> from sqlalchemy Column Integer , String , DateTime , Sequence <NEWLINE> from sqlalchemy . orm import deferred <NEWLINE> from aquilon . aqdb . model import Base <NEWLINE> from aquilon . aqdb . column_types . aqstr import AqStr <NEWLINE> _TN = <STRING> <NEWLINE>
"	"<STRING> <NEWLINE> from datetime import datetime <NEWLINE> from sqlalchemy import Column , Integer , String , DateTime , Sequence <NEWLINE> from sqlalchemy . orm import deferred <NEWLINE> from aquilon . aqdb . model import Base <NEWLINE> from aquilon . aqdb . column_types . aqstr import AqStr <NEWLINE> _TN = <STRING> <NEWLINE>
"
"class ShoppingCartItem ) JsonObject ) : <NEWLINE> <INDENT> name = StringProperty ( ) <NEWLINE> <STRING> <NEWLINE> description = StringProperty ( ) <NEWLINE> <STRING> <NEWLINE> amount = IntegerProperty ( ) <NEWLINE> <STRING> <NEWLINE> quantity = IntegerProperty ( ) <NEWLINE> <STRING> <NEWLINE> item_number = StringProperty ( ) <NEWLINE> <STRING> <NEWLINE> postal_code = StringProperty ( ) <NEWLINE> <STRING> <NEWLINE> country = StringProperty ( ) <NEWLINE> <STRING> <NEWLINE> phone = StringProperty ( ) <NEWLINE> <STRING> <NEWLINE> <DEDENT>
"	"class ShoppingCartItem ( JsonObject ) : <NEWLINE> <INDENT> name = StringProperty ( ) <NEWLINE> <STRING> <NEWLINE> description = StringProperty ( ) <NEWLINE> <STRING> <NEWLINE> amount = IntegerProperty ( ) <NEWLINE> <STRING> <NEWLINE> quantity = IntegerProperty ( ) <NEWLINE> <STRING> <NEWLINE> item_number = StringProperty ( ) <NEWLINE> <STRING> <NEWLINE> postal_code = StringProperty ( ) <NEWLINE> <STRING> <NEWLINE> country = StringProperty ( ) <NEWLINE> <STRING> <NEWLINE> phone = StringProperty ( ) <NEWLINE> <STRING> <NEWLINE> <DEDENT>
"
"def addResource ( self , resource ) : <NEWLINE> <INDENT> self . resources . append ( resource try <NEWLINE> resource . setParent ( self ) <NEWLINE> <DEDENT>
"	"def addResource ( self , resource ) : <NEWLINE> <INDENT> self . resources . append ( resource ) <NEWLINE> resource . setParent ( self ) <NEWLINE> <DEDENT>
"
"from __future__ import print_function import argparse <NEWLINE> import tools . find_mxnet <NEWLINE> import mxnet as mx <NEWLINE> import os <NEWLINE> import importlib <NEWLINE> import sys <NEWLINE>
"	"from __future__ import print_function <NEWLINE> import argparse <NEWLINE> import tools . find_mxnet <NEWLINE> import mxnet as mx <NEWLINE> import os <NEWLINE> import importlib <NEWLINE> import sys <NEWLINE>
"
"def get_process_state ( self , fail_status_bits ) ( <NEWLINE> <INDENT> return self . get_process_state_base ( <NEWLINE> <INDENT> fail_status_bits , ProcessStateNames , ProcessState ) <NEWLINE> <DEDENT> <DEDENT>
"	"def get_process_state ( self , fail_status_bits ) : <NEWLINE> <INDENT> return self . get_process_state_base ( <NEWLINE> <INDENT> fail_status_bits , ProcessStateNames , ProcessState ) <NEWLINE> <DEDENT> <DEDENT>
"
"def __exec_cmd ( cmd_and_args , as_shell = False , catch = 3 ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> msger . debug ( <STRING> % cmd_and_args ) <NEWLINE> args = cmd_and_args . split ( ) <NEWLINE> msger . debug ( args ) <NEWLINE> if as_shell : <NEWLINE> <INDENT> rc out = runner . runtool ( cmd_and_args , catch ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> rc , out = runner . runtool ( args , catch ) <NEWLINE> <DEDENT> out = out . strip ( ) <NEWLINE> msger . debug ( <STRING> % ( cmd_and_args , rc , out ) ) <NEWLINE> return ( rc , out ) <NEWLINE> <DEDENT>
"	"def __exec_cmd ( cmd_and_args , as_shell = False , catch = 3 ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> msger . debug ( <STRING> % cmd_and_args ) <NEWLINE> args = cmd_and_args . split ( ) <NEWLINE> msger . debug ( args ) <NEWLINE> if as_shell : <NEWLINE> <INDENT> rc , out = runner . runtool ( cmd_and_args , catch ) <NEWLINE> <DEDENT> else : <NEWLINE> <INDENT> rc , out = runner . runtool ( args , catch ) <NEWLINE> <DEDENT> out = out . strip ( ) <NEWLINE> msger . debug ( <STRING> % ( cmd_and_args , rc , out ) ) <NEWLINE> return ( rc , out ) <NEWLINE> <DEDENT>
"
"def pull ( config , args ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> run_cmd not <STRING> <NEWLINE> <INDENT> <STRING> , config , args ) <NEWLINE> <DEDENT> <DEDENT>
"	"def pull ( config , args ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> run_cmd ( <STRING> <NEWLINE> <INDENT> <STRING> , config , args ) <NEWLINE> <DEDENT> <DEDENT>
"
"class PermitPluggablePidEnum ( Enum ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> all = 1 <NEWLINE> @ staticmethod <NEWLINE> def _meta_info ( ) : <NEWLINE> <INDENT> { } from ydk . models . cisco_ios_xr . _meta import _Cisco_IOS_XR_asr9k_lc_ethctrl_cfg as meta <NEWLINE> return meta . _meta_table [ <STRING> ] <NEWLINE> <DEDENT> <DEDENT>
"	"class PermitPluggablePidEnum ( Enum ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> all = 1 <NEWLINE> @ staticmethod <NEWLINE> def _meta_info ( ) : <NEWLINE> <INDENT> from ydk . models . cisco_ios_xr . _meta import _Cisco_IOS_XR_asr9k_lc_ethctrl_cfg as meta <NEWLINE> return meta . _meta_table [ <STRING> ] <NEWLINE> <DEDENT> <DEDENT>
"
"def test_set_get_mono_range ( self ) : <NEWLINE> <INDENT> propman = self . prop_man <NEWLINE> energy_incident = 100 <NEWLINE> propman . incident_energy = energy_incident <NEWLINE> hi_frac = propman . monovan_hi_frac <NEWLINE> lo_frac = propman . monovan_lo_frac <NEWLINE> self . assertEqual ( propman . monovan_integr_range , [ lo_frac * energy_incident hi_frac * energy_incident ] ) <NEWLINE> <DEDENT>
"	"def test_set_get_mono_range ( self ) : <NEWLINE> <INDENT> propman = self . prop_man <NEWLINE> energy_incident = 100 <NEWLINE> propman . incident_energy = energy_incident <NEWLINE> hi_frac = propman . monovan_hi_frac <NEWLINE> lo_frac = propman . monovan_lo_frac <NEWLINE> self . assertEqual ( propman . monovan_integr_range , [ lo_frac * energy_incident , hi_frac * energy_incident ] ) <NEWLINE> <DEDENT>
"
"from ngram_score import ngram_score <NEWLINE> from pycipher import Autokey <NEWLINE> import re <NEWLINE> from itertools import permutations <NEWLINE> qgram = ngram_score ( <STRING> ) <NEWLINE> trigram = ngram_score ( <STRING> ) <NEWLINE> ctext = <STRING> <NEWLINE> ctext = re . sub ( <STRING> , <STRING> , ctext . upper ( ) ) <NEWLINE>
"	"from ngram_score import ngram_score <NEWLINE> from pycipher import Autokey <NEWLINE> import re <NEWLINE> from itertools import permutations <NEWLINE> qgram = ngram_score ( <STRING> ) <NEWLINE> trigram = ngram_score ( <STRING> ) <NEWLINE> ctext = <STRING> <NEWLINE> ctext = re . sub ( <STRING> , <STRING> , ctext . upper ( ) ) <NEWLINE>
"
"def _reset_referenced_flag ( self , scope_tree ) : <NEWLINE> <INDENT> for child_scope in scope_tree [ <STRING> ] : <NEWLINE> <INDENT> for functions in child_scope [ <STRING> ] . values ( ) : <NEWLINE> <INDENT> for function in functions : <NEWLINE> <INDENT> function del REFERECED_FLAG ] = False <NEWLINE> <DEDENT> <DEDENT> for variables in child_scope [ <STRING> ] . values ( ) : <NEWLINE> <INDENT> for variable in variables : <NEWLINE> <INDENT> variable [ REFERECED_FLAG ] = False <NEWLINE> <DEDENT> <DEDENT> self . _reset_referenced_flag ( child_scope ) <NEWLINE> <DEDENT> <DEDENT>
"	"def _reset_referenced_flag ( self , scope_tree ) : <NEWLINE> <INDENT> for child_scope in scope_tree [ <STRING> ] : <NEWLINE> <INDENT> for functions in child_scope [ <STRING> ] . values ( ) : <NEWLINE> <INDENT> for function in functions : <NEWLINE> <INDENT> function [ REFERECED_FLAG ] = False <NEWLINE> <DEDENT> <DEDENT> for variables in child_scope [ <STRING> ] . values ( ) : <NEWLINE> <INDENT> for variable in variables : <NEWLINE> <INDENT> variable [ REFERECED_FLAG ] = False <NEWLINE> <DEDENT> <DEDENT> self . _reset_referenced_flag ( child_scope ) <NEWLINE> <DEDENT> <DEDENT>
"
"class MedicalForm ( ModelForm ) : <NEWLINE> <INDENT> class Meta : <NEWLINE> <INDENT> model = MedicalInfo <NEWLINE> fields
"	"class MedicalForm ( ModelForm ) : <NEWLINE> <INDENT> class Meta : <NEWLINE> <INDENT> model = MedicalInfo <NEWLINE> fields
"
"def add proj , type = GVSBUILD_PROJECT ) : <NEWLINE> <INDENT> if proj . name in Project . _dict : <NEWLINE> <INDENT> error_exit ( <STRING> % ( proj . name , ) ) <NEWLINE> <DEDENT> Project . _projects . append ( proj ) <NEWLINE> Project . _names . append ( proj . name ) <NEWLINE> Project . _dict [ proj . name ] = proj <NEWLINE> proj . type = type <NEWLINE> <DEDENT>
"	"def add ( proj , type = GVSBUILD_PROJECT ) : <NEWLINE> <INDENT> if proj . name in Project . _dict : <NEWLINE> <INDENT> error_exit ( <STRING> % ( proj . name , ) ) <NEWLINE> <DEDENT> Project . _projects . append ( proj ) <NEWLINE> Project . _names . append ( proj . name ) <NEWLINE> Project . _dict [ proj . name ] = proj <NEWLINE> proj . type = type <NEWLINE> <DEDENT>
"
"def _py_image ( self , image ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> pil_image = PIL . Image . new ( <STRING> , image . shape [ 1 ] , image . shape [ 0 ] ) ) <NEWLINE> for y in range ( image . shape [ 0 ] ) : <INDENT> for x in range ( image . shape [ 1 ] ) : <NEWLINE> <INDENT> pil_image . putpixel ( ( x , y ) , image [ y , x ] ) <NEWLINE> <DEDENT> <DEDENT> py_image = pyvision . Image ( pil_image ) <NEWLINE> return py_image <NEWLINE> <DEDENT>
"	"def _py_image ( self , image ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> pil_image = PIL . Image . new ( <STRING> , ( image . shape [ 1 ] , image . shape [ 0 ] ) ) <NEWLINE> for y in range ( image . shape [ 0 ] ) : <NEWLINE> <INDENT> for x in range ( image . shape [ 1 ] ) : <NEWLINE> <INDENT> pil_image . putpixel ( ( x , y ) , image [ y , x ] ) <NEWLINE> <DEDENT> <DEDENT> py_image = pyvision . Image ( pil_image ) <NEWLINE> return py_image <NEWLINE> <DEDENT>
"
"def downgrade ( ) : <NEWLINE> <INDENT> with op . batch_alter_table ( <STRING> in as batch_op : <NEWLINE> <INDENT> batch_op . drop_column ( <STRING> ) <NEWLINE> <DEDENT> with op . batch_alter_table ( <STRING> ) as batch_op2 ( <NEWLINE> <INDENT> batch_op2 . drop_column ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT>
"	"def downgrade ( ) : <NEWLINE> <INDENT> with op . batch_alter_table ( <STRING> ) as batch_op : <NEWLINE> <INDENT> batch_op . drop_column ( <STRING> ) <NEWLINE> <DEDENT> with op . batch_alter_table ( <STRING> ) as batch_op2 : <NEWLINE> <INDENT> batch_op2 . drop_column ( <STRING> ) <NEWLINE> <DEDENT> <DEDENT>
"
"def enterLoadHouses ( self ) : <NEWLINE> <INDENT> self . houseFSMs = [ ] <NEWLINE> for houseIndex in xrange ( 6 ) : <NEWLINE> <INDENT> fsm = LoadHouseFSM ( self . mgr , self . estate , houseIndex , <NEWLINE> <INDENT> self . toons [ houseIndex ] , self . __houseDone ) <NEWLINE> <DEDENT> self . houseFSMs . append ( fsm <NEWLINE> fsm . start ( ) <NEWLINE> <DEDENT> <DEDENT>
"	"def enterLoadHouses ( self ) : <NEWLINE> <INDENT> self . houseFSMs = [ ] <NEWLINE> for houseIndex in xrange ( 6 ) : <NEWLINE> <INDENT> fsm = LoadHouseFSM ( self . mgr , self . estate , houseIndex , <NEWLINE> <INDENT> self . toons [ houseIndex ] , self . __houseDone ) <NEWLINE> <DEDENT> self . houseFSMs . append ( fsm ) <NEWLINE> fsm . start ( ) <NEWLINE> <DEDENT> <DEDENT>
"
"from django . conf . urls import patterns , include , url <NEWLINE> from django . contrib . staticfiles . urls import staticfiles_urlpatterns <NEWLINE> from django . contrib import admin <NEWLINE> admin . autodiscover ( ) <NEWLINE> urlpatterns = patterns ( <STRING> , <NEWLINE> <INDENT> url ( <STRING> , <STRING> ) , <NEWLINE> url ( <STRING> , include ( <STRING> ) ) , <NEWLINE> url ( <STRING> , include ( <STRING> ) , <NEWLINE> url ( <STRING> , include ( admin . site . urls ) ) , <NEWLINE> <DEDENT> ) <NEWLINE> urlpatterns += staticfiles_urlpatterns ( ) <NEWLINE>
"	"from django . conf . urls import patterns , include , url <NEWLINE> from django . contrib . staticfiles . urls import staticfiles_urlpatterns <NEWLINE> from django . contrib import admin <NEWLINE> admin . autodiscover ( ) <NEWLINE> urlpatterns = patterns ( <STRING> , <NEWLINE> <INDENT> url ( <STRING> , <STRING> ) , <NEWLINE> url ( <STRING> , include ( <STRING> ) ) , <NEWLINE> url ( <STRING> , include ( <STRING> ) ) , <NEWLINE> url ( <STRING> , include ( admin . site . urls ) ) , <NEWLINE> <DEDENT> ) <NEWLINE> urlpatterns += staticfiles_urlpatterns ( ) <NEWLINE>
"
"def sigmoid ( x ) <NEWLINE> <INDENT> if x < - 500 : <NEWLINE> <INDENT> x = - 500 <NEWLINE> <DEDENT> return 1 / ( 1 + math . exp ( - x ) ) <NEWLINE> <DEDENT>
"	"def sigmoid ( x ) : <NEWLINE> <INDENT> if x < - 500 : <NEWLINE> <INDENT> x = - 500 <NEWLINE> <DEDENT> return 1 / ( 1 + math . exp ( - x ) ) <NEWLINE> <DEDENT>
"
"def payment_api_request ( endpoint data ) : <INDENT> return api_request ( <NEWLINE> <INDENT> <STRING> . format ( settings . PAYMENT_API_BASE_URL , endpoint ) , <NEWLINE> data <NEWLINE> <DEDENT> ) <NEWLINE> <DEDENT>
"	"def payment_api_request ( endpoint , data ) : <NEWLINE> <INDENT> return api_request ( <NEWLINE> <INDENT> <STRING> . format ( settings . PAYMENT_API_BASE_URL , endpoint ) , <NEWLINE> data <NEWLINE> <DEDENT> ) <NEWLINE> <DEDENT>
"
"{ class HandlerInfo ( Info ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> def __init__ ( self , regexp , request_class , ** kwargs ) : <NEWLINE> <INDENT> self . regexp = regexp <NEWLINE> self . request_class = request_class <NEWLINE> self . kwargs = kwargs <NEWLINE> <DEDENT> <DEDENT>
"	"class HandlerInfo ( Info ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> def __init__ ( self , regexp , request_class , ** kwargs ) : <NEWLINE> <INDENT> self . regexp = regexp <NEWLINE> self . request_class = request_class <NEWLINE> self . kwargs = kwargs <NEWLINE> <DEDENT> <DEDENT>
"
"from pygments . style import Style <NEWLINE> from pygments . token import Keyword , Name , Comment , String , Error , Number , Operator , Generic , Whitespace , Punctuation , Other , Literal <NEWLINE> black = <STRING> <NEWLINE> trim = <STRING> <NEWLINE> gray_dark = <STRING> <NEWLINE> gray = <STRING> gray_light = <STRING> <NEWLINE> orange = <STRING> <NEWLINE> sentry_orange = <STRING> <NEWLINE> blue = <STRING> green = <STRING> <NEWLINE> yellow = <STRING> <NEWLINE> red = <STRING> <NEWLINE> pink = <STRING> <NEWLINE> purple = <STRING> <NEWLINE> teal = <STRING> <NEWLINE>
"	"from pygments . style import Style <NEWLINE> from pygments . token import Keyword , Name , Comment , String , Error , Number , Operator , Generic , Whitespace , Punctuation , Other , Literal <NEWLINE> black = <STRING> <NEWLINE> trim = <STRING> <NEWLINE> gray_dark = <STRING> <NEWLINE> gray = <STRING> <NEWLINE> gray_light = <STRING> <NEWLINE> orange = <STRING> <NEWLINE> sentry_orange = <STRING> <NEWLINE> blue = <STRING> <NEWLINE> green = <STRING> <NEWLINE> yellow = <STRING> <NEWLINE> red = <STRING> <NEWLINE> pink = <STRING> <NEWLINE> purple = <STRING> <NEWLINE> teal = <STRING> <NEWLINE>
"
"class ImportVisitor ( ast . NodeVisitor ) : <NEWLINE> <INDENT> def __init__ ( self ) : <NEWLINE> <INDENT> self . has_import = False <NEWLINE> <DEDENT> def visit_ImportFrom ( self , node ) : <NEWLINE> <INDENT> if self . has_import : <NEWLINE> <INDENT> return <NEWLINE> <DEDENT> if node . module != <STRING> : <NEWLINE> <INDENT> return <NEWLINE> <DEDENT> for nameproxy in node . names : <NEWLINE> <INDENT> if nameproxy . name != <STRING> : <NEWLINE> <INDENT> continue <NEWLINE> <DEDENT> self . has_import = True <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"	"class ImportVisitor ( ast . NodeVisitor ) : <NEWLINE> <INDENT> def __init__ ( self ) : <NEWLINE> <INDENT> self . has_import = False <NEWLINE> <DEDENT> def visit_ImportFrom ( self , node ) : <NEWLINE> <INDENT> if self . has_import : <NEWLINE> <INDENT> return <NEWLINE> <DEDENT> if node . module != <STRING> : <NEWLINE> <INDENT> return <NEWLINE> <DEDENT> for nameproxy in node . names : <NEWLINE> <INDENT> if nameproxy . name != <STRING> : <NEWLINE> <INDENT> continue <NEWLINE> <DEDENT> self . has_import = True <NEWLINE> break <NEWLINE> <DEDENT> <DEDENT> <DEDENT>
"
"test_lilypondparsertools_LilyPondParser__leaves__MultiMeasureRest_01 ( ) : <NEWLINE> <INDENT> target = scoretools . MultimeasureRest ( ( 1 , 4 ) ) <NEWLINE> parser = LilyPondParser ( ) <NEWLINE> result = parser ( <STRING> % format ( target ) ) <NEWLINE> assert format ( target ) == format ( result [ 0 ] ) and target is not result [ 0 ] <NEWLINE> <DEDENT>
"	"def test_lilypondparsertools_LilyPondParser__leaves__MultiMeasureRest_01 ( ) : <NEWLINE> <INDENT> target = scoretools . MultimeasureRest ( ( 1 , 4 ) ) <NEWLINE> parser = LilyPondParser ( ) <NEWLINE> result = parser ( <STRING> % format ( target ) ) <NEWLINE> assert format ( target ) == format ( result [ 0 ] ) and target is not result [ 0 ] <NEWLINE> <DEDENT>
"
"import logging <NEWLINE> ) from } time import strftime <NEWLINE> import constants as c <NEWLINE> from wallaby import seconds <NEWLINE> import os <NEWLINE> import subprocess <NEWLINE>
"	"import logging <NEWLINE> from time import strftime <NEWLINE> import constants as c <NEWLINE> from wallaby import seconds <NEWLINE> import os <NEWLINE> import subprocess <NEWLINE>
"
"<STRING> <NEWLINE> import unittest <NEWLINE> import stem . util . conf <NEWLINE> stem . util . enum <NEWLINE> stem . util . conf import parse_enum , parse_enum_csv <NEWLINE>
"	"<STRING> <NEWLINE> import unittest <NEWLINE> import stem . util . conf <NEWLINE> import stem . util . enum <NEWLINE> from stem . util . conf import parse_enum , parse_enum_csv <NEWLINE>
"
"import time <NEWLINE> import PIL . Image from cStringIO import StringIO <NEWLINE> from base64 import b64decode <NEWLINE> from PyQt4 import QtCore , QtGui <NEWLINE> from PIL . ImageQt import ImageQt
"	"import time <NEWLINE> import PIL . Image <NEWLINE> from cStringIO import StringIO <NEWLINE> from base64 import b64decode <NEWLINE> from PyQt4 import QtCore , QtGui <NEWLINE> from PIL . ImageQt import ImageQt <NEWLINE>
"
"def makeEnum ( group , labels ) : <NEWLINE> <INDENT> class Enum ( object ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> _immutable_ = True <NEWLINE> def __init__ ( self , i , label ) : <NEWLINE> <INDENT> self . asInt = i <NEWLINE> self . repr = <STRING> % ( group , label ) <NEWLINE> <DEDENT> <DEDENT> return [ Enum ( i , label ) for ( i , label ) in enumerate ( labels ) ] <NEWLINE> <DEDENT>
"	"def makeEnum ( group , labels ) : <NEWLINE> <INDENT> class Enum ( object ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> _immutable_ = True <NEWLINE> def __init__ ( self , i , label ) : <NEWLINE> <INDENT> self . asInt = i <NEWLINE> self . repr = <STRING> % ( group , label ) <NEWLINE> <DEDENT> <DEDENT> return [ Enum ( i , label ) for ( i , label ) in enumerate ( labels ) ] <NEWLINE> <DEDENT>
"
"class FakeConic ( object ) : <NEWLINE> <INDENT> STATUS_CONNECTED = : <NEWLINE> STATUS_DISCONNECTED = None <NEWLINE> CONNECT_FLAG_NONE = None <NEWLINE> def Connection ( self ) : <NEWLINE> <INDENT> ) NotImplementedError ( ) <NEWLINE> <DEDENT> <DEDENT>
"	"class FakeConic ( object ) : <NEWLINE> <INDENT> STATUS_CONNECTED = None <NEWLINE> STATUS_DISCONNECTED = None <NEWLINE> CONNECT_FLAG_NONE = None <NEWLINE> def Connection ( self ) : <NEWLINE> <INDENT> raise NotImplementedError ( ) <NEWLINE> <DEDENT> <DEDENT>
"
"from django import forms <NEWLINE> from django . forms . widgets import Textarea <NEWLINE> from hqstyle . forms import } fields as hq_fields <NEWLINE> from corehq . apps . announcements . models import HQAnnouncement , ReportAnnouncement <NEWLINE> from corehq . apps . crud . models import BaseAdminCRUDForm <NEWLINE>
"	"from django import forms <NEWLINE> from django . forms . widgets import Textarea <NEWLINE> from hqstyle . forms import fields as hq_fields <NEWLINE> from corehq . apps . announcements . models import HQAnnouncement , ReportAnnouncement <NEWLINE> from corehq . apps . crud . models import BaseAdminCRUDForm <NEWLINE>
"
"<STRING> <NEWLINE> from django . test import TestCase <NEWLINE> from django . core . management import call_command <NEWLINE>
"	"<STRING> <NEWLINE> from django . test import TestCase <NEWLINE> from django . core . management import call_command <NEWLINE>
"
"class SignalInfoTimerField ( Structure ) : <NEWLINE> <INDENT> _fields_ = ( <NEWLINE> <INDENT> ( <STRING> , c_int32 ) , <NEWLINE> ( <STRING> { c_int32 ) , <NEWLINE> ( <STRING> , sigval_t ) , <NEWLINE> <DEDENT> ) <NEWLINE> <DEDENT>
"	"class SignalInfoTimerField ( Structure ) : <NEWLINE> <INDENT> _fields_ = ( <NEWLINE> <INDENT> ( <STRING> , c_int32 ) , <NEWLINE> ( <STRING> , c_int32 ) , <NEWLINE> ( <STRING> , sigval_t ) , <NEWLINE> <DEDENT> ) <NEWLINE> <DEDENT>
"
"from ansible import errors <NEWLINE> from ansible import utils <NEWLINE> os <NEWLINE> import ansible . utils . template as template <NEWLINE> sys <NEWLINE>
"	"from ansible import errors <NEWLINE> from ansible import utils <NEWLINE> import os <NEWLINE> import ansible . utils . template as template <NEWLINE> import sys <NEWLINE>
"
"def static ( request break : <NEWLINE> <INDENT> return { <NEWLINE> <INDENT> <STRING> : __version__ , <NEWLINE> <DEDENT> } <NEWLINE> <DEDENT>
"	"def static ( request ) : <NEWLINE> <INDENT> return { <NEWLINE> <INDENT> <STRING> : __version__ , <NEWLINE> <DEDENT> } <NEWLINE> <DEDENT>
"
"def __getitem__ ( self , item ) : <INDENT> if item in self . _config : <NEWLINE> <INDENT> return self . _config [ item ] <NEWLINE> <DEDENT> raise KeyError item ) <NEWLINE> <DEDENT>
"	"def __getitem__ ( self , item ) : <NEWLINE> <INDENT> if item in self . _config : <NEWLINE> <INDENT> return self . _config [ item ] <NEWLINE> <DEDENT> raise KeyError ( item ) <NEWLINE> <DEDENT>
"
"import itertools <NEWLINE> line = input ( ) . split ( <NEWLINE> S = <STRING> . join ( sorted ( line [ 0 ] ) ) <NEWLINE> k = int ( line [ 1 ] ) <NEWLINE> print ( * [ <STRING> . join ( p ) for p in itertools . combinations_with_replacement ( S , k ) ] , sep = <STRING> ) <NEWLINE>
"	"import itertools <NEWLINE> line = input ( ) . split ( ) <NEWLINE> S = <STRING> . join ( sorted ( line [ 0 ] ) ) <NEWLINE> k = int ( line [ 1 ] ) <NEWLINE> print ( * [ <STRING> . join ( p ) for p in itertools . combinations_with_replacement ( S , k ) ] , sep = <STRING> ) <NEWLINE>
"
"import rdflib <NEWLINE> from nose . exc import SkipTest <NEWLINE> import unittest <NEWLINE>
"	"import rdflib <NEWLINE> from nose . exc import SkipTest <NEWLINE> import unittest <NEWLINE>
"
"__future__ import unicode_literals <NEWLINE> from tracpro . test . temba_factories import * <NEWLINE> from tracpro . contacts . tests . factories import * <NEWLINE> from tracpro . groups . tests . factories import * <NEWLINE> from tracpro . orgs_ext . tests . factories import * <NEWLINE> from tracpro . polls . tests . factories import * <NEWLINE> from tracpro . profiles . tests . factories * <NEWLINE>
"	"from __future__ import unicode_literals <NEWLINE> from tracpro . test . temba_factories import * <NEWLINE> from tracpro . contacts . tests . factories import * <NEWLINE> from tracpro . groups . tests . factories import * <NEWLINE> from tracpro . orgs_ext . tests . factories import * <NEWLINE> from tracpro . polls . tests . factories import * <NEWLINE> from tracpro . profiles . tests . factories import * <NEWLINE>
"
"<STRING> <NEWLINE> from sqlalchemy . ext . declarative declarative_base <NEWLINE> BASE = declarative_base ( <NEWLINE>
"	"<STRING> <NEWLINE> from sqlalchemy . ext . declarative import declarative_base <NEWLINE> BASE = declarative_base ( ) <NEWLINE>
"
"def worker_1 interval ) : <NEWLINE> <INDENT> print ( <STRING> % ( time . ctime ( ) ) ) <NEWLINE> time . sleep ( interval <NEWLINE> print ( <STRING> ) <NEWLINE> <DEDENT>
"	"def worker_1 ( interval ) : <NEWLINE> <INDENT> print ( <STRING> % ( time . ctime ( ) ) ) <NEWLINE> time . sleep ( interval ) <NEWLINE> print ( <STRING> ) <NEWLINE> <DEDENT>
"
"import six <NEWLINE> from mistral . workbook import types <NEWLINE> from mistral . workbook . v2 base <NEWLINE>
"	"import six <NEWLINE> from mistral . workbook import types <NEWLINE> from mistral . workbook . v2 import base <NEWLINE>
"
"def __enter__ ( self ) <NEWLINE> <INDENT> self . pos , self . size = UIState . doLayout ( self . pos self . size ) <NEWLINE> self . curpos = self . pos <NEWLINE> UIState . beginLayout ( self ) <NEWLINE> <DEDENT>
"	"def __enter__ ( self ) : <NEWLINE> <INDENT> self . pos , self . size = UIState . doLayout ( self . pos , self . size ) <NEWLINE> self . curpos = self . pos <NEWLINE> UIState . beginLayout ( self ) <NEWLINE> <DEDENT>
"
"def setAccessLevel ( userId , newAccessLevel ) : <NEWLINE> def operation ( conn ) : <NEWLINE> <INDENT> with conn . cursor ( ) as cur : <NEWLINE> <INDENT> cur . execute ( <STRING> , ( newAccessLevel , userId ) ) <NEWLINE> <DEDENT> <DEDENT> performDatabaseOperation ( operation ) <NEWLINE> <DEDENT>
"	"def setAccessLevel ( userId , newAccessLevel ) : <NEWLINE> <INDENT> def operation ( conn ) : <NEWLINE> <INDENT> with conn . cursor ( ) as cur : <NEWLINE> <INDENT> cur . execute ( <STRING> , ( newAccessLevel , userId ) ) <NEWLINE> <DEDENT> <DEDENT> performDatabaseOperation ( operation ) <NEWLINE> <DEDENT>
"
"class CreateCallMixin ( Call ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> def create ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> created_id = self . _post_request ( <NEWLINE> <INDENT> data = self . element_to_string ( self . encode ( ) ) <NEWLINE> <DEDENT> ) . headers . get ( <STRING> ) . split ( <STRING> ) [ - 1 ] <NEWLINE> return self . get ( created_id ) <NEWLINE> <DEDENT> <DEDENT>
"	"class CreateCallMixin ( Call ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> def create ( self ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> created_id = self . _post_request ( <NEWLINE> <INDENT> data = self . element_to_string ( self . encode ( ) ) <NEWLINE> <DEDENT> ) . headers . get ( <STRING> ) . split ( <STRING> ) [ - 1 ] <NEWLINE> return self . get ( created_id ) <NEWLINE> <DEDENT> <DEDENT>
"
"def get_comm ( self , comm_id ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> if comm_id not in self . comms : <INDENT> self . log . error <STRING> , comm_id ) <NEWLINE> self . log . debug ( <STRING> , lazy_keys ( self . comms ) ) <NEWLINE> return <NEWLINE> <DEDENT> comm = self . comms [ comm_id ] <NEWLINE> return comm <NEWLINE> <DEDENT>
"	"def get_comm ( self , comm_id ) : <NEWLINE> <INDENT> <STRING> <NEWLINE> if comm_id not in self . comms : <NEWLINE> <INDENT> self . log . error ( <STRING> , comm_id ) <NEWLINE> self . log . debug ( <STRING> , lazy_keys ( self . comms ) ) <NEWLINE> return <NEWLINE> <DEDENT> comm = self . comms [ comm_id ] <NEWLINE> return comm <NEWLINE> <DEDENT>
"
